"use strict";(globalThis.webpackChunknautilus_trader=globalThis.webpackChunknautilus_trader||[]).push([[3172],{3037:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"concepts/backtesting","title":"Backtesting","description":"Backtesting with NautilusTrader is a methodical simulation process that replicates trading","source":"@site/docs/concepts/backtesting.md","sourceDirName":"concepts","slug":"/concepts/backtesting","permalink":"/concepts/backtesting","draft":false,"unlisted":false,"editUrl":"https://github.com/Aloento/NautilusTraderDoc/tree/main/docs/concepts/backtesting.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Architecture","permalink":"/concepts/architecture"},"next":{"title":"Cache","permalink":"/concepts/cache"}}');var s=i(7259),t=i(9087);const a={},l="Backtesting",o={},d=[{value:"Choosing an API level",id:"choosing-an-api-level",level:2},{value:"Low-level API",id:"low-level-api",level:2},{value:"High-level API",id:"high-level-api",level:2},{value:"Data",id:"data",level:2},{value:"Choosing data: cost vs. accuracy",id:"choosing-data-cost-vs-accuracy",level:3},{value:"Venues",id:"venues",level:2},{value:"Execution",id:"execution",level:2},{value:"Data and message sequencing",id:"data-and-message-sequencing",level:3},{value:"Bar based execution",id:"bar-based-execution",level:3},{value:"Bar timestamp convention",id:"bar-timestamp-convention",level:4},{value:"Processing bar data",id:"processing-bar-data",level:4},{value:"OHLC prices simulation",id:"ohlc-prices-simulation",level:4},{value:"Slippage and spread handling",id:"slippage-and-spread-handling",level:3},{value:"Fill model",id:"fill-model",level:3},{value:"Configuration and parameters",id:"configuration-and-parameters",level:4},{value:"How simulation varies by data type",id:"how-simulation-varies-by-data-type",level:4},{value:"Important considerations",id:"important-considerations",level:4},{value:"Account types",id:"account-types",level:2},{value:"Cash accounts",id:"cash-accounts",level:3},{value:"Margin accounts",id:"margin-accounts",level:3},{value:"Betting accounts",id:"betting-accounts",level:3},{value:"Margin models",id:"margin-models",level:2},{value:"Overview",id:"overview",level:3},{value:"Available models",id:"available-models",level:3},{value:"StandardMarginModel",id:"standardmarginmodel",level:4},{value:"LeveragedMarginModel",id:"leveragedmarginmodel",level:4},{value:"Usage",id:"usage",level:3},{value:"Programmatic configuration",id:"programmatic-configuration",level:4},{value:"Backtest configuration",id:"backtest-configuration",level:4},{value:"Available model types",id:"available-model-types",level:4},{value:"Default behavior",id:"default-behavior",level:4},{value:"Real-world example",id:"real-world-example",level:4},{value:"Real-world scenarios",id:"real-world-scenarios",level:3},{value:"Interactive Brokers EUR/USD futures",id:"interactive-brokers-eurusd-futures",level:4},{value:"Binance crypto trading",id:"binance-crypto-trading",level:4},{value:"Model selection",id:"model-selection",level:3},{value:"Using the default model",id:"using-the-default-model",level:4},{value:"Using the standard model",id:"using-the-standard-model",level:4},{value:"Custom models",id:"custom-models",level:3},{value:"Using custom models",id:"using-custom-models",level:4},{value:"High-level backtest API configuration",id:"high-level-backtest-api-configuration",level:3},{value:"Configuration examples",id:"configuration-examples",level:4}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"backtesting",children:"Backtesting"})}),"\n",(0,s.jsxs)(n.p,{children:["Backtesting with NautilusTrader is a methodical simulation process that replicates trading\nactivities using a specific system implementation. This system is composed of various components\nincluding the built-in engines, ",(0,s.jsx)(n.code,{children:"Cache"}),", ",(0,s.jsx)(n.a,{href:"/concepts/message_bus",children:"MessageBus"}),", ",(0,s.jsx)(n.code,{children:"Portfolio"}),", ",(0,s.jsx)(n.a,{href:"/concepts/actors",children:"Actors"}),", ",(0,s.jsx)(n.a,{href:"/concepts/strategies",children:"Strategies"}),", ",(0,s.jsx)(n.a,{href:"/concepts/execution",children:"Execution Algorithms"}),",\nand other user-defined modules. The entire trading simulation is predicated on a stream of historical data processed by a\n",(0,s.jsx)(n.code,{children:"BacktestEngine"}),". Once this data stream is exhausted, the engine concludes its operation, producing\ndetailed results and performance metrics for in-depth analysis."]}),"\n",(0,s.jsx)(n.p,{children:"It's important to recognize that NautilusTrader offers two distinct API levels for setting up and conducting backtests:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"High-level API"}),": Uses a ",(0,s.jsx)(n.code,{children:"BacktestNode"})," and configuration objects (",(0,s.jsx)(n.code,{children:"BacktestEngine"}),"s are used internally)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Low-level API"}),": Uses a ",(0,s.jsx)(n.code,{children:"BacktestEngine"}),' directly with more "manual" setup.']}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"choosing-an-api-level",children:"Choosing an API level"}),"\n",(0,s.jsxs)(n.p,{children:["Consider using the ",(0,s.jsx)(n.strong,{children:"low-level"})," API when:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Your entire data stream can be processed within the available machine resources (e.g., RAM)."}),"\n",(0,s.jsx)(n.li,{children:"You prefer not to store data in the Nautilus-specific Parquet format."}),"\n",(0,s.jsx)(n.li,{children:"You have a specific need or preference to retain raw data in its original format (e.g., CSV, binary, etc.)."}),"\n",(0,s.jsxs)(n.li,{children:["You require fine-grained control over the ",(0,s.jsx)(n.code,{children:"BacktestEngine"}),", such as the ability to re-run backtests on identical datasets while swapping out components (e.g., actors or strategies) or adjusting parameter configurations."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Consider using the ",(0,s.jsx)(n.strong,{children:"high-level"})," API when:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Your data stream exceeds available memory, requiring streaming data in batches."}),"\n",(0,s.jsxs)(n.li,{children:["You want to leverage the performance and convenience of the ",(0,s.jsx)(n.code,{children:"ParquetDataCatalog"})," for storing data in the Nautilus-specific Parquet format."]}),"\n",(0,s.jsx)(n.li,{children:"You value the flexibility and functionality of passing configuration objects to define and manage multiple backtest runs across various engines simultaneously."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"low-level-api",children:"Low-level API"}),"\n",(0,s.jsxs)(n.p,{children:["The low-level API centers around a ",(0,s.jsx)(n.code,{children:"BacktestEngine"}),", where inputs are initialized and added manually via a Python script.\nAn instantiated ",(0,s.jsx)(n.code,{children:"BacktestEngine"})," can accept the following:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Lists of ",(0,s.jsx)(n.code,{children:"Data"})," objects, which are automatically sorted into monotonic order based on ",(0,s.jsx)(n.code,{children:"ts_init"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Multiple venues, manually initialized."}),"\n",(0,s.jsx)(n.li,{children:"Multiple actors, manually initialized and added."}),"\n",(0,s.jsx)(n.li,{children:"Multiple execution algorithms, manually initialized and added."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This approach offers detailed control over the backtesting process, allowing you to manually configure each component."}),"\n",(0,s.jsx)(n.h2,{id:"high-level-api",children:"High-level API"}),"\n",(0,s.jsxs)(n.p,{children:["The high-level API centers around a ",(0,s.jsx)(n.code,{children:"BacktestNode"}),", which orchestrates the management of multiple ",(0,s.jsx)(n.code,{children:"BacktestEngine"})," instances,\neach defined by a ",(0,s.jsx)(n.code,{children:"BacktestRunConfig"}),". Multiple configurations can be bundled into a list and processed by the node in one run."]}),"\n",(0,s.jsxs)(n.p,{children:["Each ",(0,s.jsx)(n.code,{children:"BacktestRunConfig"})," object consists of the following:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A list of ",(0,s.jsx)(n.code,{children:"BacktestDataConfig"})," objects."]}),"\n",(0,s.jsxs)(n.li,{children:["A list of ",(0,s.jsx)(n.code,{children:"BacktestVenueConfig"})," objects."]}),"\n",(0,s.jsxs)(n.li,{children:["A list of ",(0,s.jsx)(n.code,{children:"ImportableActorConfig"})," objects."]}),"\n",(0,s.jsxs)(n.li,{children:["A list of ",(0,s.jsx)(n.code,{children:"ImportableStrategyConfig"})," objects."]}),"\n",(0,s.jsxs)(n.li,{children:["A list of ",(0,s.jsx)(n.code,{children:"ImportableExecAlgorithmConfig"})," objects."]}),"\n",(0,s.jsxs)(n.li,{children:["An optional ",(0,s.jsx)(n.code,{children:"ImportableControllerConfig"})," object."]}),"\n",(0,s.jsxs)(n.li,{children:["An optional ",(0,s.jsx)(n.code,{children:"BacktestEngineConfig"})," object, with a default configuration if not specified."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"data",children:"Data"}),"\n",(0,s.jsx)(n.p,{children:"Data provided for backtesting drives the execution flow. Since a variety of data types can be used,\nit's crucial that your venue configurations align with the data being provided for backtesting.\nMismatches between data and configuration can lead to unexpected behavior during execution."}),"\n",(0,s.jsx)(n.p,{children:"NautilusTrader is primarily designed and optimized for order book data, which provides\na complete representation of every price level or order in the market, reflecting the real-time behavior of a trading venue.\nThis ensures the highest level of execution granularity and realism. However, if granular order book data is either not\navailable or necessary, then the platform has the capability of processing market data in the following descending order of detail:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Order Book Data/Deltas (L3 market-by-order)"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Providing comprehensive market depth and detailed order flow, with visibility of all individual orders."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Order Book Data/Deltas (L2 market-by-price)"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Providing market depth visibility across all price levels."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Quote Ticks (L1 market-by-price)"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Representing the "top of the book" by capturing only the best bid and ask prices and sizes.'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Trade Ticks"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Reflecting actual executed trades, offering a precise view of transaction activity."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Bars"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Aggregating trading activity - typically over fixed time intervals, such as 1-minute, 1-hour, or 1-day."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"choosing-data-cost-vs-accuracy",children:"Choosing data: cost vs. accuracy"}),"\n",(0,s.jsx)(n.p,{children:"For many trading strategies, bar data (e.g., 1-minute) can be sufficient for backtesting and strategy development. This is\nparticularly important because bar data is typically much more accessible and cost-effective compared to tick or order book data."}),"\n",(0,s.jsx)(n.p,{children:"Given this practical reality, Nautilus is designed to support bar-based backtesting with advanced features\nthat maximize simulation accuracy, even when working with lower granularity data."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"For some trading strategies, it can be practical to start development with bar data to validate core trading ideas.\nIf the strategy looks promising, but is more sensitive to precise execution timing (e.g., requires fills at specific prices\nbetween OHLC levels, or uses tight take-profit/stop-loss levels), you can then invest in higher granularity data\nfor more accurate validation."})}),"\n",(0,s.jsx)(n.h2,{id:"venues",children:"Venues"}),"\n",(0,s.jsxs)(n.p,{children:["When initializing a venue for backtesting, you must specify its internal order ",(0,s.jsx)(n.code,{children:"book_type"})," for execution processing from the following options:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"L1_MBP"}),": Level 1 market-by-price (default). Only the top level of the order book is maintained."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"L2_MBP"}),": Level 2 market-by-price. Order book depth is maintained, with a single order aggregated per price level."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"L3_MBO"}),": Level 3 market-by-order. Order book depth is maintained, with all individual orders tracked as provided by the data."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The granularity of the data must match the specified order ",(0,s.jsx)(n.code,{children:"book_type"}),". Nautilus cannot generate higher granularity data (L2 or L3) from lower-level data such as quotes, trades, or bars."]})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["If you specify ",(0,s.jsx)(n.code,{children:"L2_MBP"})," or ",(0,s.jsx)(n.code,{children:"L3_MBO"})," as the venue\u2019s ",(0,s.jsx)(n.code,{children:"book_type"}),", all non-order book data (such as quotes, trades, and bars) will be ignored for execution processing.\nThis may cause orders to appear as though they are never filled. We are actively working on improved validation logic to prevent configuration and data mismatches."]})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["When providing L2 or higher order book data, ensure that the ",(0,s.jsx)(n.code,{children:"book_type"})," is updated to reflect the data's granularity.\nFailing to do so will result in data aggregation: L2 data will be reduced to a single order per level, and L1 data will reflect only top-of-book levels."]})}),"\n",(0,s.jsx)(n.h2,{id:"execution",children:"Execution"}),"\n",(0,s.jsx)(n.h3,{id:"data-and-message-sequencing",children:"Data and message sequencing"}),"\n",(0,s.jsx)(n.p,{children:"In the main backtesting loop, new market data is first processed for the execution of existing orders before being processed\nby the data engine that will then send data to strategies."}),"\n",(0,s.jsx)(n.h3,{id:"bar-based-execution",children:"Bar based execution"}),"\n",(0,s.jsx)(n.p,{children:"Bar data provides a summary of market activity with four key prices for each time period (assuming bars are aggregated by trades):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Open"}),": opening price (first trade)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"High"}),": highest price traded"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Low"}),": lowest price traded"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Close"}),": closing price (last trade)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"While this gives us an overview of price movement, we lose some important information that we'd have with more granular data:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"We don't know in what order the market hit the high and low prices."}),"\n",(0,s.jsx)(n.li,{children:"We can't see exactly when prices changed within the time period."}),"\n",(0,s.jsx)(n.li,{children:"We don't know the actual sequence of trades that occurred."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This is why Nautilus processes bar data through a system that attempts to maintain\nthe most realistic yet conservative market behavior possible, despite these limitations.\nAt its core, the platform always maintains an order book simulation - even when you provide less\ngranular data such as quotes, trades, or bars (although the simulation will only have a top level book)."}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["When using bars for execution simulation (enabled by default with ",(0,s.jsx)(n.code,{children:"bar_execution=True"})," in venue configurations),\nNautilus strictly expects the timestamp (",(0,s.jsx)(n.code,{children:"ts_init"}),") of each bar to represent its ",(0,s.jsx)(n.strong,{children:"closing time"}),".\nThis ensures accurate chronological processing, prevents look-ahead bias, and aligns market updates (Open \u2192 High \u2192 Low \u2192 Close) with the moment the bar is complete."]})}),"\n",(0,s.jsx)(n.h4,{id:"bar-timestamp-convention",children:"Bar timestamp convention"}),"\n",(0,s.jsxs)(n.p,{children:["If your data source provides bars timestamped at the ",(0,s.jsx)(n.strong,{children:"opening time"})," (common in some providers), you must adjust them to the closing time before loading into Nautilus.\nFailure to do so can lead to incorrect order fills, event sequencing errors, or unrealistic backtest results."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use adapter-specific configurations like ",(0,s.jsx)(n.code,{children:"bars_timestamp_on_close=True"})," (e.g., for Bybit or Databento adapters) to handle this automatically during data ingestion."]}),"\n",(0,s.jsxs)(n.li,{children:["For custom data, manually shift timestamps by the bar duration (e.g., add 1 minute for ",(0,s.jsx)(n.code,{children:"1-MINUTE"})," bars)."]}),"\n",(0,s.jsx)(n.li,{children:"Always verify your data's timestamp convention with a small sample to avoid simulation inaccuracies."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"processing-bar-data",children:"Processing bar data"}),"\n",(0,s.jsx)(n.p,{children:"Even when you provide bar data, Nautilus maintains an internal order book for each instrument - just like a real venue would."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Time processing"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Nautilus has a specific way of handling the timing of bar data ",(0,s.jsx)(n.em,{children:"for execution"})," that's crucial for accurate simulation."]}),"\n",(0,s.jsxs)(n.li,{children:["Bar timestamps (",(0,s.jsx)(n.code,{children:"ts_event"}),") are expected to represent the close time of the bar. This approach is most logical because it represents the moment when the bar is fully formed and its aggregation is complete."]}),"\n",(0,s.jsxs)(n.li,{children:["The initialization time (",(0,s.jsx)(n.code,{children:"ts_init"}),") can be controlled using the ",(0,s.jsx)(n.code,{children:"ts_init_delta"})," parameter in ",(0,s.jsx)(n.code,{children:"BarDataWrangler"}),", which should typically be set to the bar's step size (timeframe) in nanoseconds."]}),"\n",(0,s.jsx)(n.li,{children:"The platform ensures all events happen in the correct sequence based on these timestamps, preventing any possibility of look-ahead bias in your backtests."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Price processing"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The platform converts each bar's OHLC prices into a sequence of market updates."}),"\n",(0,s.jsx)(n.li,{children:"These updates always follow the same order: Open \u2192 High \u2192 Low \u2192 Close."}),"\n",(0,s.jsx)(n.li,{children:"If you provide multiple timeframes (like both 1-minute and 5-minute bars), the platform uses the more granular data for highest accuracy."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Executions"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When you place orders, they interact with the simulated order book just like they would on a real venue."}),"\n",(0,s.jsx)(n.li,{children:"For MARKET orders, execution happens at the current simulated market price plus any configured latency."}),"\n",(0,s.jsx)(n.li,{children:"For LIMIT orders working in the market, they'll execute if any of the bar's prices reach or cross your limit price (see below)."}),"\n",(0,s.jsx)(n.li,{children:"The matching engine continuously processes orders as OHLC prices move, rather than waiting for complete bars."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"ohlc-prices-simulation",children:"OHLC prices simulation"}),"\n",(0,s.jsx)(n.p,{children:"During backtest execution, each bar is converted into a sequence of four price points:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Opening price"}),"\n",(0,s.jsxs)(n.li,{children:["High price ",(0,s.jsxs)(n.em,{children:["(Order between High/Low is configurable. See ",(0,s.jsx)(n.code,{children:"bar_adaptive_high_low_ordering"})," below.)"]})]}),"\n",(0,s.jsx)(n.li,{children:"Low price"}),"\n",(0,s.jsx)(n.li,{children:"Closing price"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The trading volume for that bar is ",(0,s.jsx)(n.strong,{children:"split evenly"})," among these four points (25% each). In marginal cases,\nif the original bar's volume divided by 4 is less than the instrument's minimum ",(0,s.jsx)(n.code,{children:"size_increment"}),",\nwe still use the minimum ",(0,s.jsx)(n.code,{children:"size_increment"})," per price point to ensure valid market activity (e.g., 1 contract\nfor CME group exchanges)."]}),"\n",(0,s.jsxs)(n.p,{children:["How these price points are sequenced can be controlled via the ",(0,s.jsx)(n.code,{children:"bar_adaptive_high_low_ordering"})," parameter when configuring a venue."]}),"\n",(0,s.jsx)(n.p,{children:"Nautilus supports two modes of bar processing:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Fixed ordering"})," (",(0,s.jsx)(n.code,{children:"bar_adaptive_high_low_ordering=False"}),", default)"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Processes every bar in a fixed sequence: ",(0,s.jsx)(n.code,{children:"Open \u2192 High \u2192 Low \u2192 Close"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Simple and deterministic approach."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Adaptive ordering"})," (",(0,s.jsx)(n.code,{children:"bar_adaptive_high_low_ordering=True"}),")"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Uses bar structure to estimate likely price path:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If Open is closer to High: processes as ",(0,s.jsx)(n.code,{children:"Open \u2192 High \u2192 Low \u2192 Close"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["If Open is closer to Low: processes as ",(0,s.jsx)(n.code,{children:"Open \u2192 Low \u2192 High \u2192 Close"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://gist.github.com/stefansimik/d387e1d9ff784a8973feca0cde51e363",children:"Research"})," shows this approach achieves ~75-85% accuracy in predicting correct High/Low sequence (compared to statistical ~50% accuracy with fixed ordering)."]}),"\n",(0,s.jsx)(n.li,{children:"This is particularly important when both take-profit and stop-loss levels occur within the same bar - as the sequence determines which order fills first."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Here's how to configure adaptive bar ordering for a venue, including account setup:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.backtest.engine import BacktestEngine\nfrom nautilus_trader.model.enums import OmsType, AccountType\nfrom nautilus_trader.model import Money, Currency\n\n# Initialize the backtest engine\nengine = BacktestEngine()\n\n# Add a venue with adaptive bar ordering and required account settings\nengine.add_venue(\n    venue=venue,  # Your Venue identifier, e.g., Venue("BINANCE")\n    oms_type=OmsType.NETTING,\n    account_type=AccountType.CASH,\n    starting_balances=[Money(10_000, Currency.from_str("USDT"))],\n    bar_adaptive_high_low_ordering=True,  # Enable adaptive ordering of High/Low bar prices\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"slippage-and-spread-handling",children:"Slippage and spread handling"}),"\n",(0,s.jsx)(n.p,{children:"When backtesting with different types of data, Nautilus implements specific handling for slippage and spread simulation:"}),"\n",(0,s.jsx)(n.p,{children:"For L2 (market-by-price) or L3 (market-by-order) data, slippage is simulated with high accuracy by:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Filling orders against actual order book levels."}),"\n",(0,s.jsx)(n.li,{children:"Matching available size at each price level sequentially."}),"\n",(0,s.jsx)(n.li,{children:"Maintaining realistic order book depth impact (per order fill)."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For L1 data types (e.g., L1 order book, trades, quotes, bars), slippage is handled through:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Initial fill slippage"})," (",(0,s.jsx)(n.code,{children:"prob_slippage"}),"):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Controlled by the ",(0,s.jsx)(n.code,{children:"prob_slippage"})," parameter of the ",(0,s.jsx)(n.code,{children:"FillModel"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Determines if the initial fill will occur one tick away from current market price."}),"\n",(0,s.jsxs)(n.li,{children:["Example: With ",(0,s.jsx)(n.code,{children:"prob_slippage=0.5"}),", a market BUY has 50% chance of filling one tick above the best ask price."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"When backtesting with bar data, be aware that the reduced granularity of price information affects the slippage mechanism.\nFor the most realistic backtesting results, consider using higher granularity data sources such as L2 or L3 order book data when available."})}),"\n",(0,s.jsx)(n.h3,{id:"fill-model",children:"Fill model"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"FillModel"})," helps simulate order queue position and execution in a simple probabilistic way during backtesting.\nIt addresses a fundamental challenge: ",(0,s.jsx)(n.em,{children:"even with perfect historical market data, we can't fully simulate how orders may have interacted with other\nmarket participants in real-time"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"FillModel"})," simulates two key aspects of trading that exist in real markets regardless of data quality:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Queue position for limit orders"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When multiple traders place orders at the same price level, the order's position in the queue affects if and when it gets filled."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Market impact and competition"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When taking liquidity with market orders, you compete with other traders for available liquidity, which can affect your fill price."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-and-parameters",children:"Configuration and parameters"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.backtest.models import FillModel\nfrom nautilus_trader.backtest.config import BacktestEngineConfig\nfrom nautilus_trader.backtest.engine import BacktestEngine\n\n# Create a custom fill model with your desired probabilities\nfill_model = FillModel(\n    prob_fill_on_limit=0.2,    # Chance a limit order fills when price matches (applied to bars/trades/quotes + L1/L2/L3 order book)\n    prob_fill_on_stop=0.95,    # [DEPRECATED] Will be removed in a future version, use `prob_slippage` instead\n    prob_slippage=0.5,         # Chance of 1-tick slippage (applied to bars/trades/quotes + L1 order book only)\n    random_seed=None,          # Optional: Set for reproducible results\n)\n\n# Add the fill model to your engine configuration\nengine = BacktestEngine(\n    config=BacktestEngineConfig(\n        trader_id="TESTER-001",\n        fill_model=fill_model,  # Inject your custom fill model here\n    )\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"prob_fill_on_limit"})," (default: ",(0,s.jsx)(n.code,{children:"1.0"}),")"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Purpose:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Simulates the probability of a limit order getting filled when its price level is reached in the market."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Details:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Simulates your position in the order queue at a given price level."}),"\n",(0,s.jsx)(n.li,{children:"Applies to all data types (e.g., L1/L2/L3 order book, quotes, trades, bars)."}),"\n",(0,s.jsx)(n.li,{children:"New random probability check occurs each time market price touches your order price (but does not move through it)."}),"\n",(0,s.jsx)(n.li,{children:"On successful probability check, fills entire remaining order quantity."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Examples"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["With ",(0,s.jsx)(n.code,{children:"prob_fill_on_limit=0.0"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Limit BUY orders never fill when best ask reaches the limit price."}),"\n",(0,s.jsx)(n.li,{children:"Limit SELL orders never fill when best bid reaches the limit price."}),"\n",(0,s.jsx)(n.li,{children:"This simulates being at the very back of the queue and never reaching the front."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["With ",(0,s.jsx)(n.code,{children:"prob_fill_on_limit=0.5"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Limit BUY orders have 50% chance of filling when best ask reaches the limit price."}),"\n",(0,s.jsx)(n.li,{children:"Limit SELL orders have 50% chance of filling when best bid reaches the limit price."}),"\n",(0,s.jsx)(n.li,{children:"This simulates being in the middle of the queue."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["With ",(0,s.jsx)(n.code,{children:"prob_fill_on_limit=1.0"})," (default):","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Limit BUY orders always fill when best ask reaches the limit price."}),"\n",(0,s.jsx)(n.li,{children:"Limit SELL orders always fill when best bid reaches the limit price."}),"\n",(0,s.jsx)(n.li,{children:"This simulates being at the front of the queue with guaranteed fills."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"prob_slippage"})," (default: ",(0,s.jsx)(n.code,{children:"0.0"}),")"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Purpose:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Simulates the probability of experiencing price slippage when executing market orders."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Details:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Only applies to L1 data types (e.g., quotes, trades, bars)."}),"\n",(0,s.jsx)(n.li,{children:"When triggered, moves fill price one tick against your order direction."}),"\n",(0,s.jsxs)(n.li,{children:["Affects all market-type orders (",(0,s.jsx)(n.code,{children:"MARKET"}),", ",(0,s.jsx)(n.code,{children:"MARKET_TO_LIMIT"}),", ",(0,s.jsx)(n.code,{children:"MARKET_IF_TOUCHED"}),", ",(0,s.jsx)(n.code,{children:"STOP_MARKET"}),")."]}),"\n",(0,s.jsx)(n.li,{children:"Not utilized with L2/L3 data where order book depth can determine slippage."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Examples"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["With ",(0,s.jsx)(n.code,{children:"prob_slippage=0.0"})," (default):","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No artificial slippage is applied, representing an idealized scenario where you always get filled at the current market price."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["With ",(0,s.jsx)(n.code,{children:"prob_slippage=0.5"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Market BUY orders have 50% chance of filling one tick above the best ask price, and 50% chance at the best ask price."}),"\n",(0,s.jsx)(n.li,{children:"Market SELL orders have 50% chance of filling one tick below the best bid price, and 50% chance at the best bid price."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["With ",(0,s.jsx)(n.code,{children:"prob_slippage=1.0"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Market BUY orders always fill one tick above the best ask price."}),"\n",(0,s.jsx)(n.li,{children:"Market SELL orders always fill one tick below the best bid price."}),"\n",(0,s.jsx)(n.li,{children:"This simulates consistent adverse price movement against your orders."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"prob_fill_on_stop"})," (default: ",(0,s.jsx)(n.code,{children:"1.0"}),")"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Stop order is just shorter name for stop-market order, that convert to market orders when market-price touches the stop-price."}),"\n",(0,s.jsxs)(n.li,{children:["That means, stop order order-fill mechanics is simply market-order mechanics, that is controlled by the ",(0,s.jsx)(n.code,{children:"prob_slippage"})," parameter."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"prob_fill_on_stop"})," parameter is deprecated and will be removed in a future version (use ",(0,s.jsx)(n.code,{children:"prob_slippage"})," instead)."]})}),"\n",(0,s.jsx)(n.h4,{id:"how-simulation-varies-by-data-type",children:"How simulation varies by data type"}),"\n",(0,s.jsxs)(n.p,{children:["The behavior of the ",(0,s.jsx)(n.code,{children:"FillModel"})," adapts based on the order book type being used:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"L2/L3 order book data"})}),"\n",(0,s.jsxs)(n.p,{children:["With full order book depth, the ",(0,s.jsx)(n.code,{children:"FillModel"})," focuses purely on simulating queue position for limit orders through ",(0,s.jsx)(n.code,{children:"prob_fill_on_limit"}),".\nThe order book itself handles slippage naturally based on available liquidity at each price level."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prob_fill_on_limit"})," is active - simulates queue position."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prob_slippage"})," is not used - real order book depth determines price impact."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"L1 order book data"})}),"\n",(0,s.jsxs)(n.p,{children:["With only best bid/ask prices available, the ",(0,s.jsx)(n.code,{children:"FillModel"})," provides additional simulation:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prob_fill_on_limit"})," is active - simulates queue position."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prob_slippage"})," is active - simulates basic price impact since we lack real depth information."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Bar/Quote/Trade data"})}),"\n",(0,s.jsx)(n.p,{children:"When using less granular data, the same behaviors apply as L1:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prob_fill_on_limit"})," is active - simulates queue position."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prob_slippage"})," is active - simulates basic price impact."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"important-considerations",children:"Important considerations"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"FillModel"})," has certain limitations to keep in mind:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Partial fills are supported"})," with L2/L3 order book data - when there is no longer any size available in the order book, no more fills will be generated and the order will remain in a partially filled state. This accurately simulates real market conditions where not enough liquidity is available at the desired price levels."]}),"\n",(0,s.jsx)(n.li,{children:"With L1 data, slippage limits to a fixed 1-tick, at which the system fills the entire order's quantity."}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["As the ",(0,s.jsx)(n.code,{children:"FillModel"})," continues to evolve, future versions may introduce more sophisticated simulation of order execution dynamics, including:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Partial fill simulation."}),"\n",(0,s.jsx)(n.li,{children:"Variable slippage based on order size."}),"\n",(0,s.jsx)(n.li,{children:"More complex queue position modeling."}),"\n"]})]}),"\n",(0,s.jsx)(n.h2,{id:"account-types",children:"Account types"}),"\n",(0,s.jsxs)(n.p,{children:["When you attach a venue to the engine\u2014either for live trading or a back\u2011test\u2014you must pick one of three accounting modes by passing the ",(0,s.jsx)(n.code,{children:"account_type"})," parameter:"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Account type"}),(0,s.jsx)(n.th,{children:"Typical use-case"}),(0,s.jsx)(n.th,{children:"What the engine locks"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Cash"}),(0,s.jsx)(n.td,{children:"Spot trading (e.g. BTC/USDT, stocks)"}),(0,s.jsx)(n.td,{children:"Notional value for every position a pending order would open."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Margin"}),(0,s.jsx)(n.td,{children:"Derivatives or any product that allows leverage"}),(0,s.jsx)(n.td,{children:"Initial margin for each order plus maintenance margin for open positions."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Betting"}),(0,s.jsx)(n.td,{children:"Sports betting, book\u2011making"}),(0,s.jsx)(n.td,{children:"Stake required by the venue; no leverage."})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["Example of adding a ",(0,s.jsx)(n.code,{children:"CASH"})," account for a backtest venue:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.adapters.binance import BINANCE_VENUE\nfrom nautilus_trader.backtest.engine import BacktestEngine\nfrom nautilus_trader.model.currencies import USDT\nfrom nautilus_trader.model.enums import OmsType, AccountType\nfrom nautilus_trader.model import Money, Currency\n\n# Initialize the backtest engine\nengine = BacktestEngine()\n\n# Add a CASH account for the venue\nengine.add_venue(\n    venue=BINANCE_VENUE,  # Create or reference a Venue identifier\n    oms_type=OmsType.NETTING,\n    account_type=AccountType.CASH,\n    starting_balances=[Money(10_000, USDT)],\n)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cash-accounts",children:"Cash accounts"}),"\n",(0,s.jsx)(n.p,{children:"Cash accounts settle trades in full; there is no leverage and therefore no concept of margin."}),"\n",(0,s.jsx)(n.h3,{id:"margin-accounts",children:"Margin accounts"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.em,{children:"margin account"})," facilitates trading of instruments requiring margin, such as futures or leveraged products.\nIt tracks account balances, calculates required margins, and manages leverage to ensure sufficient collateral for positions and orders."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Key concepts"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Leverage"}),": Amplifies trading exposure relative to account equity. Higher leverage increases potential returns and risks."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Initial Margin"}),": Collateral required to submit an order to open a position."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Maintenance Margin"}),": Minimum collateral required to maintain an open position."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Locked Balance"}),": Funds reserved as collateral, unavailable for new orders or withdrawals."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Reduce-only orders ",(0,s.jsx)(n.strong,{children:"do not"})," contribute to ",(0,s.jsx)(n.code,{children:"balance_locked"})," in cash accounts,\nnor do they add to initial margin in margin accounts\u2014as they can only reduce existing exposure."]})}),"\n",(0,s.jsx)(n.h3,{id:"betting-accounts",children:"Betting accounts"}),"\n",(0,s.jsx)(n.p,{children:"Betting accounts are specialised for venues where you stake an amount to win or lose a fixed payout (some prediction markets, sports books, etc.).\nThe engine locks only the stake required by the venue; leverage and margin are not applicable."}),"\n",(0,s.jsx)(n.h2,{id:"margin-models",children:"Margin models"}),"\n",(0,s.jsx)(n.p,{children:"NautilusTrader provides flexible margin calculation models to accommodate different venue types and trading scenarios."}),"\n",(0,s.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Different venues and brokers have varying approaches to calculating margin requirements:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Traditional Brokers"})," (Interactive Brokers, TD Ameritrade): Fixed margin percentages regardless of leverage."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Crypto Exchanges"})," (Binance, some others): Leverage may reduce margin requirements."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Futures Exchanges"})," (CME, ICE): Fixed margin amounts per contract."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"available-models",children:"Available models"}),"\n",(0,s.jsx)(n.h4,{id:"standardmarginmodel",children:"StandardMarginModel"}),"\n",(0,s.jsx)(n.p,{children:"Uses fixed percentages without leverage division, matching traditional broker behavior."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Formula:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Fixed percentages - leverage ignored\nmargin = notional * instrument.margin_init\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Initial Margin = ",(0,s.jsx)(n.code,{children:"notional_value * instrument.margin_init"})]}),"\n",(0,s.jsxs)(n.li,{children:["Maintenance Margin = ",(0,s.jsx)(n.code,{children:"notional_value * instrument.margin_maint"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Use cases:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Traditional brokers (Interactive Brokers, TD Ameritrade)."}),"\n",(0,s.jsx)(n.li,{children:"Futures exchanges (CME, ICE)."}),"\n",(0,s.jsx)(n.li,{children:"Forex brokers with fixed margin requirements."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"leveragedmarginmodel",children:"LeveragedMarginModel"}),"\n",(0,s.jsx)(n.p,{children:"Divides margin requirements by leverage."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Formula:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Leverage reduces margin requirements\nadjusted_notional = notional / leverage\nmargin = adjusted_notional * instrument.margin_init\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Initial Margin = ",(0,s.jsx)(n.code,{children:"(notional_value / leverage) * instrument.margin_init"})]}),"\n",(0,s.jsxs)(n.li,{children:["Maintenance Margin = ",(0,s.jsx)(n.code,{children:"(notional_value / leverage) * instrument.margin_maint"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Use cases:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Crypto exchanges that reduce margin with leverage."}),"\n",(0,s.jsx)(n.li,{children:"Venues where leverage affects margin requirements."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.h4,{id:"programmatic-configuration",children:"Programmatic configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.backtest.models import LeveragedMarginModel\nfrom nautilus_trader.backtest.models import StandardMarginModel\nfrom nautilus_trader.test_kit.stubs.execution import TestExecStubs\n\n# Create account\naccount = TestExecStubs.margin_account()\n\n# Set standard model for traditional brokers\nstandard_model = StandardMarginModel()\naccount.set_margin_model(standard_model)\n\n# Or use leveraged model for crypto exchanges\nleveraged_model = LeveragedMarginModel()\naccount.set_margin_model(leveraged_model)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"backtest-configuration",children:"Backtest configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.backtest.config import BacktestVenueConfig\nfrom nautilus_trader.backtest.config import MarginModelConfig\n\nvenue_config = BacktestVenueConfig(\n    name="SIM",\n    oms_type="NETTING",\n    account_type="MARGIN",\n    starting_balances=["1_000_000 USD"],\n    margin_model=MarginModelConfig(model_type="standard"),  # Options: \'standard\', \'leveraged\'\n)\n'})}),"\n",(0,s.jsx)(n.h4,{id:"available-model-types",children:"Available model types"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"leveraged"'}),": Margin reduced by leverage (default)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"standard"'}),": Fixed percentages (traditional brokers)."]}),"\n",(0,s.jsxs)(n.li,{children:["Custom class path: ",(0,s.jsx)(n.code,{children:'"my_package.my_module.MyMarginModel"'}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"default-behavior",children:"Default behavior"}),"\n",(0,s.jsxs)(n.p,{children:["By default, ",(0,s.jsx)(n.code,{children:"MarginAccount"})," uses ",(0,s.jsx)(n.code,{children:"LeveragedMarginModel"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"real-world-example",children:"Real-world example"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"EUR/USD Trading Scenario:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Instrument"}),": EUR/USD"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Quantity"}),": 100,000 EUR"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Price"}),": 1.10000"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Notional Value"}),": $110,000"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Leverage"}),": 50x"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Instrument Margin Init"}),": 3%"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Margin calculations:"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Model"}),(0,s.jsx)(n.th,{children:"Calculation"}),(0,s.jsx)(n.th,{children:"Result"}),(0,s.jsx)(n.th,{children:"Percentage"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Standard"}),(0,s.jsx)(n.td,{children:"$110,000 \xd7 0.03"}),(0,s.jsx)(n.td,{children:"$3,300"}),(0,s.jsx)(n.td,{children:"3.00%"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Leveraged"}),(0,s.jsx)(n.td,{children:"($110,000 \xf7 50) \xd7 0.03"}),(0,s.jsx)(n.td,{children:"$66"}),(0,s.jsx)(n.td,{children:"0.06%"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Account balance impact:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Account Balance"}),": $10,000"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Standard Model"}),": Cannot trade (requires $3,300 margin)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Leveraged Model"}),": Can trade (requires only $66 margin)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"real-world-scenarios",children:"Real-world scenarios"}),"\n",(0,s.jsx)(n.h4,{id:"interactive-brokers-eurusd-futures",children:"Interactive Brokers EUR/USD futures"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# IB requires fixed margin regardless of leverage\naccount.set_margin_model(StandardMarginModel())\nmargin = account.calculate_margin_init(instrument, quantity, price)\n# Result: Fixed percentage of notional value\n"})}),"\n",(0,s.jsx)(n.h4,{id:"binance-crypto-trading",children:"Binance crypto trading"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Binance may reduce margin with leverage\naccount.set_margin_model(LeveragedMarginModel())\nmargin = account.calculate_margin_init(instrument, quantity, price)\n# Result: Margin reduced by leverage factor\n"})}),"\n",(0,s.jsx)(n.h3,{id:"model-selection",children:"Model selection"}),"\n",(0,s.jsx)(n.h4,{id:"using-the-default-model",children:"Using the default model"}),"\n",(0,s.jsxs)(n.p,{children:["The default ",(0,s.jsx)(n.code,{children:"LeveragedMarginModel"})," works out of the box:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"account = TestExecStubs.margin_account()\nmargin = account.calculate_margin_init(instrument, quantity, price)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"using-the-standard-model",children:"Using the standard model"}),"\n",(0,s.jsx)(n.p,{children:"For traditional broker behavior:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"account.set_margin_model(StandardMarginModel())\nmargin = account.calculate_margin_init(instrument, quantity, price)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"custom-models",children:"Custom models"}),"\n",(0,s.jsxs)(n.p,{children:["You can create custom margin models by inheriting from ",(0,s.jsx)(n.code,{children:"MarginModel"}),". Custom models receive configuration through the ",(0,s.jsx)(n.code,{children:"MarginModelConfig"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.backtest.models import MarginModel\nfrom nautilus_trader.backtest.config import MarginModelConfig\n\nclass RiskAdjustedMarginModel(MarginModel):\n    def __init__(self, config: MarginModelConfig):\n        """Initialize with configuration parameters."""\n        self.risk_multiplier = Decimal(str(config.config.get("risk_multiplier", 1.0)))\n        self.use_leverage = config.config.get("use_leverage", False)\n\n    def calculate_margin_init(self, instrument, quantity, price, leverage, use_quote_for_inverse=False):\n        notional = instrument.notional_value(quantity, price, use_quote_for_inverse)\n        if self.use_leverage:\n            adjusted_notional = notional.as_decimal() / leverage\n        else:\n            adjusted_notional = notional.as_decimal()\n        margin = adjusted_notional * instrument.margin_init * self.risk_multiplier\n        return Money(margin, instrument.quote_currency)\n\n    def calculate_margin_maint(self, instrument, side, quantity, price, leverage, use_quote_for_inverse=False):\n        return self.calculate_margin_init(instrument, quantity, price, leverage, use_quote_for_inverse)\n'})}),"\n",(0,s.jsx)(n.h4,{id:"using-custom-models",children:"Using custom models"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Programmatic:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.backtest.config import MarginModelConfig\nfrom nautilus_trader.backtest.config import MarginModelFactory\n\nconfig = MarginModelConfig(\n    model_type="my_package.my_module:RiskAdjustedMarginModel",\n    config={"risk_multiplier": 1.5, "use_leverage": False}\n)\n\ncustom_model = MarginModelFactory.create(config)\naccount.set_margin_model(custom_model)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"high-level-backtest-api-configuration",children:"High-level backtest API configuration"}),"\n",(0,s.jsxs)(n.p,{children:["When using the high-level backtest API, you can specify margin models in your venue configuration using ",(0,s.jsx)(n.code,{children:"MarginModelConfig"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.backtest.config import MarginModelConfig\nfrom nautilus_trader.backtest.config import BacktestVenueConfig\nfrom nautilus_trader.config import BacktestRunConfig\n\n# Configure venue with specific margin model\nvenue_config = BacktestVenueConfig(\n    name="SIM",\n    oms_type="NETTING",\n    account_type="MARGIN",\n    starting_balances=["1_000_000 USD"],\n    margin_model=MarginModelConfig(\n        model_type="standard"  # Use standard model for traditional broker simulation\n    ),\n)\n\n# Use in backtest configuration\nconfig = BacktestRunConfig(\n    venues=[venue_config],\n    # ... other config\n)\n'})}),"\n",(0,s.jsx)(n.h4,{id:"configuration-examples",children:"Configuration examples"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Standard model (traditional brokers):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'margin_model=MarginModelConfig(model_type="standard")\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Leveraged model (default):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'margin_model=MarginModelConfig(model_type="leveraged")  # Default\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Custom model with configuration:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'margin_model=MarginModelConfig(\n    model_type="my_package.my_module:CustomMarginModel",\n    config={\n        "risk_multiplier": 1.5,\n        "use_leverage": False,\n        "volatility_threshold": 0.02,\n    }\n)\n'})}),"\n",(0,s.jsx)(n.p,{children:"The margin model will be automatically applied to the simulated exchange during backtest execution."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},9087:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var r=i(6363);const s={},t=r.createContext(s);function a(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);