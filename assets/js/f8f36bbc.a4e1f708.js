"use strict";(globalThis.webpackChunknautilus_trader=globalThis.webpackChunknautilus_trader||[]).push([[3649],{6584:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"concepts/execution","title":"Execution","description":"NautilusTrader can handle trade execution and order management for multiple strategies and venues","source":"@site/docs/concepts/execution.md","sourceDirName":"concepts","slug":"/concepts/execution","permalink":"/concepts/execution","draft":false,"unlisted":false,"editUrl":"https://github.com/Aloento/NautilusTraderDoc/tree/main/docs/concepts/execution.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Data","permalink":"/concepts/data"},"next":{"title":"Instruments","permalink":"/concepts/instruments"}}');var t=i(7259),s=i(9087);const o={},d="Execution",l={},a=[{value:"Execution flow",id:"execution-flow",level:2},{value:"Order Management System (OMS)",id:"order-management-system-oms",level:2},{value:"OMS configuration",id:"oms-configuration",level:3},{value:"Risk engine",id:"risk-engine",level:2},{value:"Trading state",id:"trading-state",level:3},{value:"Execution algorithms",id:"execution-algorithms",level:2},{value:"TWAP (Time-Weighted Average Price)",id:"twap-time-weighted-average-price",level:3},{value:"Writing execution algorithms",id:"writing-execution-algorithms",level:3},{value:"Spawned orders",id:"spawned-orders",level:3},{value:"Managing execution algorithm orders",id:"managing-execution-algorithm-orders",level:3},{value:"Own order books",id:"own-order-books",level:2},{value:"Purpose",id:"purpose",level:3},{value:"Lifecycle",id:"lifecycle",level:3},{value:"Safe cancellation queries",id:"safe-cancellation-queries",level:3},{value:"Auditing",id:"auditing",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"execution",children:"Execution"})}),"\n",(0,t.jsx)(n.p,{children:"NautilusTrader can handle trade execution and order management for multiple strategies and venues\nsimultaneously (per instance). Several interacting components are involved in execution, making it\ncrucial to understand the possible flows of execution messages (commands and events)."}),"\n",(0,t.jsx)(n.p,{children:"The main execution-related components include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"Strategy"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ExecAlgorithm"})," (execution algorithms)"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"OrderEmulator"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"RiskEngine"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ExecutionEngine"})," or ",(0,t.jsx)(n.code,{children:"LiveExecutionEngine"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ExecutionClient"})," or ",(0,t.jsx)(n.code,{children:"LiveExecutionClient"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"execution-flow",children:"Execution flow"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Strategy"})," base class inherits from ",(0,t.jsx)(n.code,{children:"Actor"})," and so contains all of the common data related\nmethods. It also provides methods for managing orders and trade execution:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"submit_order(...)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"submit_order_list(...)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"modify_order(...)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cancel_order(...)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cancel_orders(...)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cancel_all_orders(...)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"close_position(...)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"close_all_positions(...)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"query_account(...)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"query_order(...)"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["These methods create the necessary execution commands under the hood and send them on the message\nbus to the relevant components (point-to-point), as well as publishing any events (such as the\ninitialization of new orders i.e. ",(0,t.jsx)(n.code,{children:"OrderInitialized"})," events)."]}),"\n",(0,t.jsx)(n.p,{children:"The general execution flow looks like the following (each arrow indicates movement across the message bus):"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Strategy"})," -> ",(0,t.jsx)(n.code,{children:"OrderEmulator"})," -> ",(0,t.jsx)(n.code,{children:"ExecAlgorithm"})," -> ",(0,t.jsx)(n.code,{children:"RiskEngine"})," -> ",(0,t.jsx)(n.code,{children:"ExecutionEngine"})," -> ",(0,t.jsx)(n.code,{children:"ExecutionClient"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"OrderEmulator"})," and ",(0,t.jsx)(n.code,{children:"ExecAlgorithm"}),"(s) components are optional in the flow, depending on\nindividual order parameters (as explained below)."]}),"\n",(0,t.jsx)(n.p,{children:"This diagram illustrates message flow (commands and events) across the Nautilus execution components."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                  \u2502                   \u2502\n                  \u2502                   \u2502\n                  \u2502                   \u2502\n          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba   OrderEmulator   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2502       \u2502                   \u2502            \u2502\n          \u2502       \u2502                   \u2502            \u2502\n          \u2502       \u2502                   \u2502            \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2510    \u2514\u2500\u2500\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502\n\u2502            \u2502          \u2502      \u2502           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            \u2502          \u2502      \u2502           \u2502                \u2502   \u2502                     \u2502   \u2502                     \u2502\n\u2502            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba                \u251c\u2500\u2500\u2500\u25ba                     \u251c\u2500\u2500\u2500\u25ba                     \u2502\n\u2502  Strategy  \u2502          \u2502      \u2502           \u2502                \u2502   \u2502                     \u2502   \u2502                     \u2502\n\u2502            \u2502          \u2502      \u2502           \u2502   RiskEngine   \u2502   \u2502   ExecutionEngine   \u2502   \u2502   ExecutionClient   \u2502\n\u2502            \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                \u25c4\u2500\u2500\u2500\u2524                     \u25c4\u2500\u2500\u2500\u2524                     \u2502\n\u2502            \u2502          \u2502      \u2502           \u2502                \u2502   \u2502                     \u2502   \u2502                     \u2502\n\u2502            \u2502          \u2502      \u2502           \u2502                \u2502   \u2502                     \u2502   \u2502                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2518    \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502       \u2502                   \u2502            \u2502\n          \u2502       \u2502                   \u2502            \u2502\n          \u2502       \u2502                   \u2502            \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba   ExecAlgorithm   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                  \u2502                   \u2502\n                  \u2502                   \u2502\n                  \u2502                   \u2502\n                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n"})}),"\n",(0,t.jsx)(n.h2,{id:"order-management-system-oms",children:"Order Management System (OMS)"}),"\n",(0,t.jsxs)(n.p,{children:["An order management system (OMS) type refers to the method used for assigning orders to positions and tracking those positions for an instrument.\nOMS types apply to both strategies and venues (simulated and real). Even if a venue doesn't explicitly\nstate the method in use, an OMS type is always in effect. The OMS type for a component can be specified\nusing the ",(0,t.jsx)(n.code,{children:"OmsType"})," enum."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"OmsType"})," enum has three variants:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"UNSPECIFIED"}),": The OMS type defaults based on where it is applied (details below)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"NETTING"}),": Positions are combined into a single position per instrument ID"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"HEDGING"}),": Multiple positions per instrument ID are supported (both long and short)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The table below describes different configuration combinations and their applicable scenarios.\nWhen the strategy and venue OMS types differ, the ",(0,t.jsx)(n.code,{children:"ExecutionEngine"})," handles this by overriding or assigning ",(0,t.jsx)(n.code,{children:"position_id"})," values for received ",(0,t.jsx)(n.code,{children:"OrderFilled"}),' events.\nA "virtual position" refers to a position ID that exists within the Nautilus system but not on the venue in\nreality.']}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Strategy OMS"}),(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Venue OMS"}),(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"NETTING"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"NETTING"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"The strategy uses the venues native OMS type, with a single position ID per instrument ID."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"HEDGING"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"HEDGING"})}),(0,t.jsxs)(n.td,{style:{textAlign:"left"},children:["The strategy uses the venues native OMS type, with multiple position IDs per instrument ID (both ",(0,t.jsx)(n.code,{children:"LONG"})," and ",(0,t.jsx)(n.code,{children:"SHORT"}),")."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"NETTING"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"HEDGING"})}),(0,t.jsxs)(n.td,{style:{textAlign:"left"},children:["The strategy ",(0,t.jsx)(n.strong,{children:"overrides"})," the venues native OMS type. The venue tracks multiple positions per instrument ID, but Nautilus maintains a single position ID."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"HEDGING"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"NETTING"})}),(0,t.jsxs)(n.td,{style:{textAlign:"left"},children:["The strategy ",(0,t.jsx)(n.strong,{children:"overrides"})," the venues native OMS type. The venue tracks a single position per instrument ID, but Nautilus maintains multiple position IDs."]})]})]})]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"Configuring OMS types separately for strategies and venues increases platform complexity but allows\nfor a wide range of trading styles and preferences (see below)."})}),"\n",(0,t.jsx)(n.p,{children:"OMS config examples:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Most cryptocurrency exchanges use a ",(0,t.jsx)(n.code,{children:"NETTING"}),' OMS type, representing a single position per market. It may be desirable for a trader to track multiple "virtual" positions for a strategy.']}),"\n",(0,t.jsxs)(n.li,{children:["Some FX ECNs or brokers use a ",(0,t.jsx)(n.code,{children:"HEDGING"})," OMS type, tracking multiple positions both ",(0,t.jsx)(n.code,{children:"LONG"})," and ",(0,t.jsx)(n.code,{children:"SHORT"}),". The trader may only care about the NET position per currency pair."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Nautilus does not yet support venue-side hedging modes such as Binance ",(0,t.jsx)(n.code,{children:"BOTH"})," vs. ",(0,t.jsx)(n.code,{children:"LONG/SHORT"})," where the venue nets per direction.\nIt is advised to keep Binance account configurations as ",(0,t.jsx)(n.code,{children:"BOTH"})," so that a single position is netted."]})}),"\n",(0,t.jsx)(n.h3,{id:"oms-configuration",children:"OMS configuration"}),"\n",(0,t.jsxs)(n.p,{children:["If a strategy OMS type is not explicitly set using the ",(0,t.jsx)(n.code,{children:"oms_type"})," configuration option,\nit will default to ",(0,t.jsx)(n.code,{children:"UNSPECIFIED"}),". This means the ",(0,t.jsx)(n.code,{children:"ExecutionEngine"})," will not override any venue ",(0,t.jsx)(n.code,{children:"position_id"}),"s,\nand the OMS type will follow the venue's OMS type."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["When configuring a backtest, you can specify the ",(0,t.jsx)(n.code,{children:"oms_type"})," for the venue. To enhance backtest\naccuracy, it is recommended to match this with the actual OMS type used by the venue in practice."]})}),"\n",(0,t.jsx)(n.h2,{id:"risk-engine",children:"Risk engine"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"RiskEngine"})," is a core component of every Nautilus system, including backtest, sandbox, and live environments.\nEvery order command and event passes through the ",(0,t.jsx)(n.code,{children:"RiskEngine"})," unless specifically bypassed in the ",(0,t.jsx)(n.code,{children:"RiskEngineConfig"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"RiskEngine"})," includes several built-in pre-trade risk checks, including:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Price precisions correct for the instrument."}),"\n",(0,t.jsx)(n.li,{children:"Prices are positive (unless an option type instrument)"}),"\n",(0,t.jsx)(n.li,{children:"Quantity precisions correct for the instrument."}),"\n",(0,t.jsx)(n.li,{children:"Below maximum notional for the instrument."}),"\n",(0,t.jsx)(n.li,{children:"Within maximum or minimum quantity for the instrument."}),"\n",(0,t.jsxs)(n.li,{children:["Only reducing position when a ",(0,t.jsx)(n.code,{children:"reduce_only"})," execution instruction is specified for the order."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If any risk check fails, the system generates an ",(0,t.jsx)(n.code,{children:"OrderDenied"})," event, effectively closing the order and\npreventing it from progressing further. This event includes a human-readable reason for the denial."]}),"\n",(0,t.jsx)(n.h3,{id:"trading-state",children:"Trading state"}),"\n",(0,t.jsx)(n.p,{children:"Additionally, the current trading state of a Nautilus system affects order flow."}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"TradingState"})," enum has three variants:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ACTIVE"}),": Operates normally."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"HALTED"}),": Does not process further order commands until state changes."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"REDUCING"}),": Only processes cancels or commands that reduce open positions."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.code,{children:"RiskEngineConfig"})," ",(0,t.jsx)(n.a,{href:"../api_reference/config#risk",children:"API Reference"})," for further details."]})}),"\n",(0,t.jsx)(n.h2,{id:"execution-algorithms",children:"Execution algorithms"}),"\n",(0,t.jsx)(n.p,{children:"The platform supports customized execution algorithm components and provides some built-in\nalgorithms, such as the Time-Weighted Average Price (TWAP) algorithm."}),"\n",(0,t.jsx)(n.h3,{id:"twap-time-weighted-average-price",children:"TWAP (Time-Weighted Average Price)"}),"\n",(0,t.jsx)(n.p,{children:"The TWAP execution algorithm aims to execute orders by evenly spreading them over a specified\ntime horizon. The algorithm receives a primary order representing the total size and direction\nthen splits this by spawning smaller child orders, which are then executed at regular intervals\nthroughout the time horizon."}),"\n",(0,t.jsx)(n.p,{children:"This helps to reduce the impact of the full size of the primary order on the market, by\nminimizing the concentration of trade size at any given time."}),"\n",(0,t.jsx)(n.p,{children:"The algorithm will immediately submit the first order, with the final order submitted being the\nprimary order at the end of the horizon period."}),"\n",(0,t.jsxs)(n.p,{children:["Using the TWAP algorithm as an example (found in ",(0,t.jsx)(n.code,{children:"/examples/algorithms/twap.py"}),"), this example\ndemonstrates how to initialize and register a TWAP execution algorithm directly with a\n",(0,t.jsx)(n.code,{children:"BacktestEngine"})," (assuming an engine is already initialized):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.examples.algorithms.twap import TWAPExecAlgorithm\n\n# `engine` is an initialized BacktestEngine instance\nexec_algorithm = TWAPExecAlgorithm()\nengine.add_exec_algorithm(exec_algorithm)\n"})}),"\n",(0,t.jsx)(n.p,{children:"For this particular algorithm, two parameters must be specified:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"horizon_secs"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"interval_secs"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"horizon_secs"})," parameter determines the time period over which the algorithm will execute, while\nthe ",(0,t.jsx)(n.code,{children:"interval_secs"})," parameter sets the time between individual order executions. These parameters\ndetermine how a primary order is split into a series of spawned orders."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from decimal import Decimal\nfrom nautilus_trader.model.data import BarType\nfrom nautilus_trader.test_kit.providers import TestInstrumentProvider\nfrom nautilus_trader.examples.strategies.ema_cross_twap import EMACrossTWAP, EMACrossTWAPConfig\n\n# Configure your strategy\nconfig = EMACrossTWAPConfig(\n    instrument_id=TestInstrumentProvider.ethusdt_binance().id,\n    bar_type=BarType.from_str("ETHUSDT.BINANCE-250-TICK-LAST-INTERNAL"),\n    trade_size=Decimal("0.05"),\n    fast_ema_period=10,\n    slow_ema_period=20,\n    twap_horizon_secs=10.0,   # execution algorithm parameter (total horizon in seconds)\n    twap_interval_secs=2.5,    # execution algorithm parameter (seconds between orders)\n)\n\n# Instantiate your strategy\nstrategy = EMACrossTWAP(config=config)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Alternatively, you can specify these parameters dynamically per order, determining them based on\nactual market conditions. In this case, the strategy configuration parameters could be provided to\nan execution model which determines the horizon and interval."}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"There is no limit to the number of execution algorithm parameters you can create. The parameters\njust need to be a dictionary with string keys and primitive values (values that can be serialized\nover the wire, such as ints, floats, and strings)."})}),"\n",(0,t.jsx)(n.h3,{id:"writing-execution-algorithms",children:"Writing execution algorithms"}),"\n",(0,t.jsxs)(n.p,{children:["To implement a custom execution algorithm you must define a class which inherits from ",(0,t.jsx)(n.code,{children:"ExecAlgorithm"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["An execution algorithm is a type of ",(0,t.jsx)(n.code,{children:"Actor"}),", so it's capable of the following:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Request and subscribe to data."}),"\n",(0,t.jsxs)(n.li,{children:["Access the ",(0,t.jsx)(n.code,{children:"Cache"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Set time alerts and/or timers using a ",(0,t.jsx)(n.code,{children:"Clock"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Additionally it can:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Access the central ",(0,t.jsx)(n.code,{children:"Portfolio"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Spawn secondary orders from a received primary (original) order."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Once an execution algorithm is registered, and the system is running, it will receive orders off the\nmessages bus which are addressed to its ",(0,t.jsx)(n.code,{children:"ExecAlgorithmId"})," via the ",(0,t.jsx)(n.code,{children:"exec_algorithm_id"})," order parameter.\nThe order may also carry the ",(0,t.jsx)(n.code,{children:"exec_algorithm_params"})," being a ",(0,t.jsx)(n.code,{children:"dict[str, Any]"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["Because of the flexibility of the ",(0,t.jsx)(n.code,{children:"exec_algorithm_params"})," dictionary. It's important to thoroughly\nvalidate all of the key value pairs for correct operation of the algorithm (for starters that the\ndictionary is not ",(0,t.jsx)(n.code,{children:"None"})," and all necessary parameters actually exist)."]})}),"\n",(0,t.jsxs)(n.p,{children:["Received orders will arrive via the following ",(0,t.jsx)(n.code,{children:"on_order(...)"}),' method. These received orders are\nknow as "primary" (original) orders when being handled by an execution algorithm.']}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.model.orders.base import Order\n\ndef on_order(self, order: Order) -> None:\n    # Handle the order here\n"})}),"\n",(0,t.jsx)(n.p,{children:"When the algorithm is ready to spawn a secondary order, it can use one of the following methods:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"spawn_market(...)"})," (spawns a ",(0,t.jsx)(n.code,{children:"MARKET"})," order)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"spawn_market_to_limit(...)"})," (spawns a ",(0,t.jsx)(n.code,{children:"MARKET_TO_LIMIT"})," order)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"spawn_limit(...)"})," (spawns a ",(0,t.jsx)(n.code,{children:"LIMIT"})," order)"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"Additional order types will be implemented in future versions, as the need arises."})}),"\n",(0,t.jsxs)(n.p,{children:["Each of these methods takes the primary (original) ",(0,t.jsx)(n.code,{children:"Order"})," as the first argument. The primary order\nquantity will be reduced by the ",(0,t.jsx)(n.code,{children:"quantity"})," passed in (becoming the spawned orders quantity)."]}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"There must be enough primary order quantity remaining (this is validated)."})}),"\n",(0,t.jsx)(n.p,{children:"Once the desired number of secondary orders have been spawned, and the execution routine is over,\nthe intention is that the algorithm will then finally send the primary (original) order."}),"\n",(0,t.jsx)(n.h3,{id:"spawned-orders",children:"Spawned orders"}),"\n",(0,t.jsxs)(n.p,{children:["All secondary orders spawned from an execution algorithm will carry a ",(0,t.jsx)(n.code,{children:"exec_spawn_id"})," which is\nsimply the ",(0,t.jsx)(n.code,{children:"ClientOrderId"})," of the primary (original) order, and whose ",(0,t.jsx)(n.code,{children:"client_order_id"}),"\nderives from this original identifier with the following convention:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"exec_spawn_id"})," (primary order ",(0,t.jsx)(n.code,{children:"client_order_id"})," value)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"spawn_sequence"})," (the sequence number for the spawned order)"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"{exec_spawn_id}-E{spawn_sequence}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["e.g. ",(0,t.jsx)(n.code,{children:"O-20230404-001-000-E1"})," (for the first spawned order)"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:'The "primary" and "secondary" / "spawn" terminology was specifically chosen to avoid conflict\nor confusion with the "parent" and "child" contingent orders terminology (an execution algorithm may also deal with contingent orders).'})}),"\n",(0,t.jsx)(n.h3,{id:"managing-execution-algorithm-orders",children:"Managing execution algorithm orders"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Cache"})," provides several methods to aid in managing (keeping track of) the activity of\nan execution algorithm. Calling the below method will return all execution algorithm orders\nfor the given query filters."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def orders_for_exec_algorithm(\n    self,\n    exec_algorithm_id: ExecAlgorithmId,\n    venue: Venue | None = None,\n    instrument_id: InstrumentId | None = None,\n    strategy_id: StrategyId | None = None,\n    side: OrderSide = OrderSide.NO_ORDER_SIDE,\n) -> list[Order]:\n"})}),"\n",(0,t.jsxs)(n.p,{children:["As well as more specifically querying the orders for a certain execution series/spawn.\nCalling the below method will return all orders for the given ",(0,t.jsx)(n.code,{children:"exec_spawn_id"})," (if found)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def orders_for_exec_spawn(self, exec_spawn_id: ClientOrderId) -> list[Order]:\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"This also includes the primary (original) order."})}),"\n",(0,t.jsx)(n.h2,{id:"own-order-books",children:"Own order books"}),"\n",(0,t.jsx)(n.p,{children:"Own order books are L3 order books that track only your own (user) orders organized by price level, maintained separately from the venue's public order books."}),"\n",(0,t.jsx)(n.h3,{id:"purpose",children:"Purpose"}),"\n",(0,t.jsx)(n.p,{children:"Own order books serve several purposes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Monitor the state of your orders within the venue's public book in real-time."}),"\n",(0,t.jsx)(n.li,{children:"Validate order placement by checking available liquidity at price levels before submission."}),"\n",(0,t.jsx)(n.li,{children:"Help prevent self-trading by identifying price levels where your own orders already exist."}),"\n",(0,t.jsx)(n.li,{children:"Support advanced order management strategies that depend on queue position."}),"\n",(0,t.jsx)(n.li,{children:"Enable reconciliation between internal state and venue state during live trading."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"lifecycle",children:"Lifecycle"}),"\n",(0,t.jsx)(n.p,{children:"Own order books are maintained per instrument and automatically updated as orders transition through their lifecycle.\nOrders are added when submitted or accepted, updated when modified, and removed when filled, canceled, rejected, or expired."}),"\n",(0,t.jsx)(n.p,{children:"Only orders with prices can be represented in own order books. Market orders and other order types without explicit prices are excluded since they cannot be positioned at specific price levels."}),"\n",(0,t.jsx)(n.h3,{id:"safe-cancellation-queries",children:"Safe cancellation queries"}),"\n",(0,t.jsxs)(n.p,{children:["When querying own order books for orders to cancel, use a ",(0,t.jsx)(n.code,{children:"status"})," filter that ",(0,t.jsx)(n.strong,{children:"excludes"})," ",(0,t.jsx)(n.code,{children:"PENDING_CANCEL"})," to avoid processing orders already being cancelled."]}),"\n",(0,t.jsxs)(n.admonition,{type:"warning",children:[(0,t.jsxs)(n.p,{children:["Including ",(0,t.jsx)(n.code,{children:"PENDING_CANCEL"})," in status filters can cause:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Duplicate cancel attempts on the same order."}),"\n",(0,t.jsxs)(n.li,{children:["Inflated open order counts (orders in ",(0,t.jsx)(n.code,{children:"PENDING_CANCEL"}),' remain "open" until confirmed canceled).']}),"\n",(0,t.jsx)(n.li,{children:"Order state explosion when multiple strategies attempt to cancel the same orders."}),"\n"]})]}),"\n",(0,t.jsxs)(n.p,{children:["The optional ",(0,t.jsx)(n.code,{children:"accepted_buffer_ns"})," many methods expose is a time-based guard that only returns orders whose ",(0,t.jsx)(n.code,{children:"ts_accepted"})," is at least that many nanoseconds in the past. Orders that have not yet been accepted by the venue still have ",(0,t.jsx)(n.code,{children:"ts_accepted = 0"}),", so they are included once the buffer window elapses. To exclude those inflight orders you must pair the buffer with an explicit status filter (for example, restrict to ",(0,t.jsx)(n.code,{children:"ACCEPTED"})," / ",(0,t.jsx)(n.code,{children:"PARTIALLY_FILLED"}),")."]}),"\n",(0,t.jsx)(n.h3,{id:"auditing",children:"Auditing"}),"\n",(0,t.jsx)(n.p,{children:"During live trading, own order books can be periodically audited against the cache's order indexes to ensure consistency.\nThe audit mechanism verifies that closed orders are properly removed and that inflight orders (submitted but not yet accepted) remain tracked during venue latency windows."}),"\n",(0,t.jsxs)(n.p,{children:["The audit interval can be configured using the ",(0,t.jsx)(n.code,{children:"own_books_audit_interval_secs"})," parameter in live trading configurations."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},9087:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>d});var r=i(6363);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);