"use strict";(globalThis.webpackChunknautilus_trader=globalThis.webpackChunknautilus_trader||[]).push([[7458],{4743:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"concepts/live","title":"Live Trading","description":"Live trading in NautilusTrader enables traders to deploy their backtested strategies in a real-time","source":"@site/docs/concepts/live.md","sourceDirName":"concepts","slug":"/concepts/live","permalink":"/concepts/live","draft":false,"unlisted":false,"editUrl":"https://github.com/Aloento/NautilusTraderDoc/tree/main/docs/concepts/live.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Instruments","permalink":"/concepts/instruments"},"next":{"title":"Logging","permalink":"/concepts/logging"}}');var r=i(7259),t=i(9087);const o={},d="Live Trading",c={},l=[{value:"Configuration",id:"configuration",level:2},{value:"<code>TradingNodeConfig</code>",id:"tradingnodeconfig",level:3},{value:"Core configuration parameters",id:"core-configuration-parameters",level:4},{value:"Cache database configuration",id:"cache-database-configuration",level:4},{value:"MessageBus configuration",id:"messagebus-configuration",level:4},{value:"Multi-venue configuration",id:"multi-venue-configuration",level:3},{value:"ExecutionEngine configuration",id:"executionengine-configuration",level:3},{value:"Reconciliation",id:"reconciliation",level:4},{value:"Order filtering",id:"order-filtering",level:4},{value:"Continuous reconciliation",id:"continuous-reconciliation",level:4},{value:"Retry coordination and lookback behavior",id:"retry-coordination-and-lookback-behavior",level:4},{value:"Additional options",id:"additional-options",level:4},{value:"Memory management",id:"memory-management",level:4},{value:"Queue management",id:"queue-management",level:4},{value:"Strategy configuration",id:"strategy-configuration",level:3},{value:"Identification",id:"identification",level:4},{value:"Order management",id:"order-management",level:4},{value:"Windows signal handling",id:"windows-signal-handling",level:3},{value:"Execution reconciliation",id:"execution-reconciliation",level:2},{value:"Reconciliation configuration",id:"reconciliation-configuration",level:3},{value:"Reconciliation procedure",id:"reconciliation-procedure",level:3},{value:"Common reconciliation scenarios",id:"common-reconciliation-scenarios",level:3},{value:"Startup reconciliation",id:"startup-reconciliation",level:4},{value:"Runtime/continuous checks",id:"runtimecontinuous-checks",level:4},{value:"Common reconciliation issues",id:"common-reconciliation-issues",level:3}];function a(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"live-trading",children:"Live Trading"})}),"\n",(0,r.jsx)(n.p,{children:"Live trading in NautilusTrader enables traders to deploy their backtested strategies in a real-time\ntrading environment with no code changes. This seamless transition from backtesting to live trading\nis a core feature of the platform, ensuring consistency and reliability. However, there are\nkey differences to be aware of between backtesting and live trading."}),"\n",(0,r.jsx)(n.p,{children:"This guide provides an overview of the key aspects of live trading."}),"\n",(0,r.jsx)(n.admonition,{title:"Platform differences",type:"info",children:(0,r.jsxs)(n.p,{children:["Windows signal handling differs from Unix-like systems. If you are running on Windows, please read\nthe note on ",(0,r.jsx)(n.a,{href:"#windows-signal-handling",children:"Windows signal handling"})," for guidance on graceful shutdown\nbehavior and Ctrl+C (SIGINT) support."]})}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"When operating a live trading system, configuring your execution engine and strategies properly is\nessential for ensuring reliability, accuracy, and performance. The following is an overview of the\nkey concepts and settings involved for live configuration."}),"\n",(0,r.jsx)(n.h3,{id:"tradingnodeconfig",children:(0,r.jsx)(n.code,{children:"TradingNodeConfig"})}),"\n",(0,r.jsxs)(n.p,{children:["The main configuration class for live trading systems is ",(0,r.jsx)(n.code,{children:"TradingNodeConfig"}),",\nwhich inherits from ",(0,r.jsx)(n.code,{children:"NautilusKernelConfig"})," and provides live-specific config options:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.config import TradingNodeConfig\n\nconfig = TradingNodeConfig(\n    trader_id="MyTrader-001",\n\n    # Component configurations\n    cache: CacheConfig(),\n    message_bus: MessageBusConfig(),\n    data_engine=LiveDataEngineConfig(),\n    risk_engine=LiveRiskEngineConfig(),\n    exec_engine=LiveExecEngineConfig(),\n    portfolio=PortfolioConfig(),\n\n    # Client configurations\n    data_clients={\n        "BINANCE": BinanceDataClientConfig(),\n    },\n    exec_clients={\n        "BINANCE": BinanceExecClientConfig(),\n    },\n)\n'})}),"\n",(0,r.jsx)(n.h4,{id:"core-configuration-parameters",children:"Core configuration parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Setting"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"trader_id"})}),(0,r.jsx)(n.td,{children:'"TRADER-001"'}),(0,r.jsx)(n.td,{children:"Unique trader identifier (name-tag format)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"instance_id"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"None"})}),(0,r.jsx)(n.td,{children:"Optional unique instance identifier."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"timeout_connection"})}),(0,r.jsx)(n.td,{children:"30.0"}),(0,r.jsx)(n.td,{children:"Connection timeout in seconds."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"timeout_reconciliation"})}),(0,r.jsx)(n.td,{children:"10.0"}),(0,r.jsx)(n.td,{children:"Reconciliation timeout in seconds."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"timeout_portfolio"})}),(0,r.jsx)(n.td,{children:"10.0"}),(0,r.jsx)(n.td,{children:"Portfolio initialization timeout."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"timeout_disconnection"})}),(0,r.jsx)(n.td,{children:"10.0"}),(0,r.jsx)(n.td,{children:"Disconnection timeout."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"timeout_post_stop"})}),(0,r.jsx)(n.td,{children:"5.0"}),(0,r.jsx)(n.td,{children:"Post-stop cleanup timeout."})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"cache-database-configuration",children:"Cache database configuration"}),"\n",(0,r.jsx)(n.p,{children:"Configure data persistence with a backing database:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.config import CacheConfig\nfrom nautilus_trader.config import DatabaseConfig\n\ncache_config = CacheConfig(\n    database=DatabaseConfig(\n        host="localhost",\n        port=6379,\n        username="nautilus",\n        password="pass",\n        timeout=2.0,\n    ),\n    encoding="msgpack",  # or "json"\n    timestamps_as_iso8601=True,\n    buffer_interval_ms=100,\n    flush_on_start=False,\n)\n'})}),"\n",(0,r.jsx)(n.h4,{id:"messagebus-configuration",children:"MessageBus configuration"}),"\n",(0,r.jsx)(n.p,{children:"Configure message routing and external streaming:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.config import MessageBusConfig\nfrom nautilus_trader.config import DatabaseConfig\n\nmessage_bus_config = MessageBusConfig(\n    database=DatabaseConfig(timeout=2),\n    timestamps_as_iso8601=True,\n    use_instance_id=False,\n    types_filter=[QuoteTick, TradeTick],  # Filter specific message types\n    stream_per_topic=False,\n    autotrim_mins=30,  # Automatic message trimming\n    heartbeat_interval_secs=1,\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"multi-venue-configuration",children:"Multi-venue configuration"}),"\n",(0,r.jsx)(n.p,{children:"Live trading systems often connect to multiple venues. Here's an example of configuring both spot and futures markets for Binance:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'config = TradingNodeConfig(\n    trader_id="MultiVenue-001",\n\n    # Multiple data clients for different market types\n    data_clients={\n        "BINANCE_SPOT": BinanceDataClientConfig(\n            account_type=BinanceAccountType.SPOT,\n            testnet=False,\n        ),\n        "BINANCE_FUTURES": BinanceDataClientConfig(\n            account_type=BinanceAccountType.USDT_FUTURES,\n            testnet=False,\n        ),\n    },\n\n    # Corresponding execution clients\n    exec_clients={\n        "BINANCE_SPOT": BinanceExecClientConfig(\n            account_type=BinanceAccountType.SPOT,\n            testnet=False,\n        ),\n        "BINANCE_FUTURES": BinanceExecClientConfig(\n            account_type=BinanceAccountType.USDT_FUTURES,\n            testnet=False,\n        ),\n    },\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"executionengine-configuration",children:"ExecutionEngine configuration"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"LiveExecEngineConfig"})," sets up the live execution engine, managing order processing, execution events, and reconciliation with trading venues.\nThe following outlines the main configuration options."]}),"\n",(0,r.jsx)(n.p,{children:"By configuring these parameters thoughtfully, you can ensure that your trading system operates efficiently,\nhandles orders correctly, and remains resilient in the face of potential issues, such as lost events or conflicting data/information."}),"\n",(0,r.jsxs)(n.p,{children:["For full details see the ",(0,r.jsx)(n.code,{children:"LiveExecEngineConfig"})," ",(0,r.jsx)(n.a,{href:"../api_reference/config#class-liveexecengineconfig",children:"API Reference"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"reconciliation",children:"Reconciliation"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Ensures that the system state remains consistent with the trading venue by recovering any missed events, such as order and position status updates."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Setting"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"reconciliation"})}),(0,r.jsx)(n.td,{children:"True"}),(0,r.jsx)(n.td,{children:"Activates reconciliation at startup, aligning the system's internal state with the venue's state."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"reconciliation_lookback_mins"})}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"Specifies how far back (in minutes) the system requests past events to reconcile uncached state."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"reconciliation_instrument_ids"})}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"An include list of specific instrument IDs to consider for reconciliation."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"filtered_client_order_ids"})}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"A list of client order IDs to filter from reconciliation (useful when the venue holds duplicates)."})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"../concepts/execution#execution-reconciliation",children:"Execution reconciliation"})," for additional background."]}),"\n",(0,r.jsx)(n.h4,{id:"order-filtering",children:"Order filtering"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Manages which order events and reports should be processed by the system to avoid conflicts with other trading nodes and unnecessary data handling."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Setting"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"filter_unclaimed_external_orders"})}),(0,r.jsx)(n.td,{children:"False"}),(0,r.jsx)(n.td,{children:"Filters out unclaimed external orders to prevent irrelevant orders from impacting the strategy."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"filter_position_reports"})}),(0,r.jsx)(n.td,{children:"False"}),(0,r.jsx)(n.td,{children:"Filters out position status reports, useful when multiple nodes trade the same account to avoid conflicts."})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"continuous-reconciliation",children:"Continuous reconciliation"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Maintains accurate execution state through a continuous reconciliation loop that runs ",(0,r.jsx)(n.em,{children:"after"})," startup reconciliation completes, this loop:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(1) Monitors in-flight orders for delays exceeding a configured threshold."}),"\n",(0,r.jsx)(n.li,{children:"(2) Reconciles open orders with the venue at configurable intervals."}),"\n",(0,r.jsxs)(n.li,{children:["(3) Audits internal ",(0,r.jsx)(n.em,{children:"own"})," order books against the venue's public books."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Startup sequence"}),": The continuous reconciliation loop waits for startup reconciliation to complete before beginning periodic checks. This prevents race conditions where continuous checks might interfere with the initial state reconciliation. The ",(0,r.jsx)(n.code,{children:"reconciliation_startup_delay_secs"})," parameter applies an additional delay ",(0,r.jsx)(n.em,{children:"after"})," startup reconciliation completes."]}),"\n",(0,r.jsx)(n.p,{children:"If an order's status cannot be reconciled after exhausting all retries, the engine resolves the order as follows:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"In-flight order timeout resolution"})," (when venue doesn't respond after max retries):"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Current status"}),(0,r.jsx)(n.th,{children:"Resolved to"}),(0,r.jsx)(n.th,{children:"Rationale"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"SUBMITTED"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"REJECTED"})}),(0,r.jsx)(n.td,{children:"No confirmation received from venue."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"PENDING_UPDATE"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"CANCELED"})}),(0,r.jsx)(n.td,{children:"Modification remains unacknowledged."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"PENDING_CANCEL"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"CANCELED"})}),(0,r.jsx)(n.td,{children:"Venue never confirmed the cancellation."})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Order consistency checks"})," (when cache state differs from venue state):"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Cache status"}),(0,r.jsx)(n.th,{children:"Venue status"}),(0,r.jsx)(n.th,{children:"Resolution"}),(0,r.jsx)(n.th,{children:"Rationale"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ACCEPTED"})}),(0,r.jsx)(n.td,{children:"Not found"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"REJECTED"})}),(0,r.jsx)(n.td,{children:"Order doesn't exist at venue, likely was never successfully placed."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ACCEPTED"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"CANCELED"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"CANCELED"})}),(0,r.jsx)(n.td,{children:"Venue canceled the order (user action or venue-initiated)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ACCEPTED"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"EXPIRED"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"EXPIRED"})}),(0,r.jsx)(n.td,{children:"Order reached GTD expiration at venue."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ACCEPTED"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"REJECTED"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"REJECTED"})}),(0,r.jsx)(n.td,{children:"Venue rejected after initial acceptance (rare but possible)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"PARTIALLY_FILLED"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"CANCELED"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"CANCELED"})}),(0,r.jsx)(n.td,{children:"Order canceled at venue with fills preserved."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"PARTIALLY_FILLED"})}),(0,r.jsx)(n.td,{children:"Not found"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"CANCELED"})}),(0,r.jsx)(n.td,{children:"Order doesn't exist but had fills (reconciles fill history)."})]})]})]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Important reconciliation caveats:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:'"Not found" resolutions'}),": These are only performed in full-history mode (",(0,r.jsx)(n.code,{children:"open_check_open_only=False"}),"). In open-only mode (",(0,r.jsx)(n.code,{children:"open_check_open_only=True"}),', the default), these checks are intentionally skipped. This is because open-only mode uses venue-specific "open orders" endpoints which exclude closed orders by design, making it impossible to distinguish between genuinely missing orders and recently closed ones.']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recent order protection"}),": The engine skips reconciliation actions for orders with last event timestamp within the ",(0,r.jsx)(n.code,{children:"open_check_threshold_ms"})," window (default 5 seconds). This prevents false positives from race conditions where orders may still be processing at the venue."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Targeted query safeguard"}),": Before marking orders as ",(0,r.jsx)(n.code,{children:"REJECTED"})," or ",(0,r.jsx)(n.code,{children:"CANCELED"}),' when "not found", the engine attempts a targeted single-order query to the venue. This helps prevent false negatives due to bulk query limitations or timing delays.']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"FILLED"})," orders"]}),": When a ",(0,r.jsx)(n.code,{children:"FILLED"}),' order is "not found" at the venue, this is considered normal behavior (venues often don\'t track completed orders) and is ignored without generating warnings.']}),"\n"]})]}),"\n",(0,r.jsx)(n.h4,{id:"retry-coordination-and-lookback-behavior",children:"Retry coordination and lookback behavior"}),"\n",(0,r.jsxs)(n.p,{children:["The execution engine reuses a single retry counter (",(0,r.jsx)(n.code,{children:"_recon_check_retries"}),") for both the inflight loop (bounded by ",(0,r.jsx)(n.code,{children:"inflight_check_retries"}),") and the open-order loop (bounded by ",(0,r.jsx)(n.code,{children:"open_check_missing_retries"}),"). This shared budget ensures the stricter limit wins and prevents duplicate venue queries for the same order state."]}),"\n",(0,r.jsxs)(n.p,{children:["When the open-order loop exhausts its retries, the engine issues one targeted ",(0,r.jsx)(n.code,{children:"GenerateOrderStatusReport"})," probe before applying a terminal state. If the venue returns the order, reconciliation proceeds and the retry counter resets automatically."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Single-order query protection"}),": To prevent rate limit exhaustion when many orders need individual queries, the engine limits single-order queries per reconciliation cycle via ",(0,r.jsx)(n.code,{children:"max_single_order_queries_per_cycle"})," (default: 10). When this limit is reached, remaining orders are deferred to the next cycle. Additionally, the engine adds a configurable delay (",(0,r.jsx)(n.code,{children:"single_order_query_delay_ms"}),", default: 100ms) between single-order queries to further prevent rate limiting. This ensures the system can handle scenarios where bulk queries fail for hundreds of orders without overwhelming the venue API."]}),"\n",(0,r.jsxs)(n.p,{children:["Orders that age beyond ",(0,r.jsx)(n.code,{children:"open_check_lookback_mins"})," rely on this targeted probe. Keep the lookback generous for venues with short history windows, and consider increasing ",(0,r.jsx)(n.code,{children:"open_check_threshold_ms"})," if venue timestamps lag the local clock so recently updated orders are not marked missing prematurely."]}),"\n",(0,r.jsx)(n.p,{children:"This ensures the trading node maintains a consistent execution state even under unreliable conditions."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Setting"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"inflight_check_interval_ms"})}),(0,r.jsx)(n.td,{children:"2,000\xa0ms"}),(0,r.jsx)(n.td,{children:"Determines how frequently the system checks in-flight order status. Set to 0 to disable."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"inflight_check_threshold_ms"})}),(0,r.jsx)(n.td,{children:"5,000\xa0ms"}),(0,r.jsx)(n.td,{children:"Sets the time threshold after which an in-flight order triggers a venue status check. Adjust if colocated to avoid race conditions."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"inflight_check_retries"})}),(0,r.jsx)(n.td,{children:"5\xa0retries"}),(0,r.jsx)(n.td,{children:"Specifies the number of retry attempts the engine will make to verify the status of an in-flight order with the venue, should the initial attempt fail."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"open_check_interval_secs"})}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"Determines how frequently (in seconds) open orders are checked at the venue. Set to None or 0.0 to disable. Recommended: 5-10 seconds, considering API rate limits."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"open_check_open_only"})}),(0,r.jsx)(n.td,{children:"True"}),(0,r.jsx)(n.td,{children:"When enabled, only open orders are requested during checks; if disabled, full order history is fetched (resource-intensive)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"open_check_lookback_mins"})}),(0,r.jsx)(n.td,{children:"60\xa0min"}),(0,r.jsx)(n.td,{children:"Lookback window (minutes) for order status polling during continuous reconciliation. Only orders modified within this window are considered."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"open_check_threshold_ms"})}),(0,r.jsx)(n.td,{children:"5,000\xa0ms"}),(0,r.jsx)(n.td,{children:"Minimum time since the order's last cached event before open-order checks act on venue discrepancies (missing, mismatched status, etc.)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"open_check_missing_retries"})}),(0,r.jsx)(n.td,{children:"5\xa0retries"}),(0,r.jsx)(n.td,{children:"Maximum retries before resolving an order that is open in cache but not found at venue. Prevents false positives from race conditions."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"max_single_order_queries_per_cycle"})}),(0,r.jsx)(n.td,{children:"10"}),(0,r.jsx)(n.td,{children:"Maximum number of single-order queries per reconciliation cycle. Prevents rate limit exhaustion when many orders fail bulk query checks."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"single_order_query_delay_ms"})}),(0,r.jsx)(n.td,{children:"100\xa0ms"}),(0,r.jsx)(n.td,{children:"Delay (milliseconds) between single-order queries to prevent rate limit exhaustion."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"reconciliation_startup_delay_secs"})}),(0,r.jsx)(n.td,{children:"10.0\xa0s"}),(0,r.jsxs)(n.td,{children:["Additional delay (seconds) applied ",(0,r.jsx)(n.em,{children:"after"})," startup reconciliation completes before starting continuous reconciliation loop. Provides time for additional system stabilization."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"own_books_audit_interval_secs"})}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"Sets the interval (in seconds) between audits of own order books against public ones. Verifies synchronization and logs errors for inconsistencies."})]})]})]}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Important configuration guidelines:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"open_check_lookback_mins"})}),": Do not reduce below 60 minutes. This lookback window must be sufficiently generous for your venue's order history retention. Setting it too short can trigger false \"missing order\" resolutions even with built-in safeguards, as orders may appear missing when they're simply outside the query window."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"reconciliation_startup_delay_secs"})}),": Do not reduce below 10 seconds for production systems. This delay is applied ",(0,r.jsx)(n.em,{children:"after"})," startup reconciliation completes, allowing additional time for system stabilization before continuous reconciliation checks begin. This prevents continuous checks from starting immediately after startup reconciliation finishes."]}),"\n"]})]}),"\n",(0,r.jsx)(n.h4,{id:"additional-options",children:"Additional options"}),"\n",(0,r.jsx)(n.p,{children:"The following additional options provide further control over execution behavior:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Setting"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"generate_missing_orders"})}),(0,r.jsx)(n.td,{children:"True"}),(0,r.jsxs)(n.td,{children:["If ",(0,r.jsx)(n.code,{children:"LIMIT"})," order events will be generated during reconciliation to align position discrepancies. These orders use the strategy ID ",(0,r.jsx)(n.code,{children:"INTERNAL-DIFF"})," and calculate precise prices to achieve target average positions."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"snapshot_orders"})}),(0,r.jsx)(n.td,{children:"False"}),(0,r.jsx)(n.td,{children:"If order snapshots should be taken on order events."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"snapshot_positions"})}),(0,r.jsx)(n.td,{children:"False"}),(0,r.jsx)(n.td,{children:"If position snapshots should be taken on position events."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"snapshot_positions_interval_secs"})}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"The interval (seconds) between position snapshots when enabled."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"debug"})}),(0,r.jsx)(n.td,{children:"False"}),(0,r.jsx)(n.td,{children:"Enable debug mode for additional execution logging."})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"memory-management",children:"Memory management"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Periodically purges closed orders, closed positions, and account events from the in-memory cache to optimize resource usage and performance during extended / HFT operations."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Setting"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"purge_closed_orders_interval_mins"})}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"Sets how frequently (in minutes) closed orders are purged from memory. Recommended: 10-15 minutes. Does not affect database records."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"purge_closed_orders_buffer_mins"})}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"Specifies how long (in minutes) an order must have been closed before purging. Recommended: 60 minutes to ensure processes complete."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"purge_closed_positions_interval_mins"})}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"Sets how frequently (in minutes) closed positions are purged from memory. Recommended: 10-15 minutes. Does not affect database records."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"purge_closed_positions_buffer_mins"})}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"Specifies how long (in minutes) a position must have been closed before purging. Recommended: 60 minutes to ensure processes complete."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"purge_account_events_interval_mins"})}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"Sets how frequently (in minutes) account events are purged from memory. Recommended: 10-15 minutes. Does not affect database records."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"purge_account_events_lookback_mins"})}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"Specifies how long (in minutes) an account event must have occurred before purging. Recommended: 60 minutes."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"purge_from_database"})}),(0,r.jsx)(n.td,{children:"False"}),(0,r.jsxs)(n.td,{children:["If enabled, purge operations will also delete data from the backing database (Redis/PostgreSQL), not just memory. ",(0,r.jsx)(n.strong,{children:"Use with caution"}),"."]})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"By configuring these memory management settings appropriately, you can prevent memory usage from growing\nindefinitely during long-running / HFT sessions while ensuring that recently closed orders, closed positions, and account events\nremain available in memory for any ongoing operations that might require them."}),"\n",(0,r.jsx)(n.h4,{id:"queue-management",children:"Queue management"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Handles the internal buffering of order events to ensure smooth processing and to prevent system resource overloads."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Setting"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"qsize"})}),(0,r.jsx)(n.td,{children:"100,000"}),(0,r.jsx)(n.td,{children:"Sets the size of internal queue buffers, managing the flow of data within the engine."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"graceful_shutdown_on_exception"})}),(0,r.jsx)(n.td,{children:"False"}),(0,r.jsx)(n.td,{children:"If the system should perform a graceful shutdown when an unexpected exception occurs during message queue processing (does not include user actor/strategy exceptions)."})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"strategy-configuration",children:"Strategy configuration"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"StrategyConfig"})," class outlines the configuration for trading strategies, ensuring that each strategy operates with the correct parameters and manages orders effectively.\nFor a complete parameter list see the ",(0,r.jsx)(n.code,{children:"StrategyConfig"})," ",(0,r.jsx)(n.a,{href:"../api_reference/config#class-strategyconfig",children:"API Reference"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"identification",children:"Identification"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Provides unique identifiers for each strategy to prevent conflicts and ensure proper tracking of orders."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Setting"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"strategy_id"})}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"A unique ID for the strategy, ensuring it can be distinctly identified."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"order_id_tag"})}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"A unique tag for the strategy's orders, differentiating them from multiple strategies."})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"order-management",children:"Order management"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Controls strategy-level order handling including position-ID processing, claiming relevant external orders, automating contingent order logic (OUO/OCO), and tracking GTD expirations."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Setting"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"oms_type"})}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsxs)(n.td,{children:["Specifies the ",(0,r.jsx)(n.a,{href:"../concepts/execution#oms-configuration",children:"OMS type"}),", for position ID handling and order processing flow."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"use_uuid_client_order_ids"})}),(0,r.jsx)(n.td,{children:"False"}),(0,r.jsx)(n.td,{children:"If UUID4's should be used for client order ID values (required for some venues such as Coinbase Intx)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"external_order_claims"})}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"Lists instrument IDs for external orders the strategy should claim, aiding accurate order management."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"manage_contingent_orders"})}),(0,r.jsx)(n.td,{children:"False"}),(0,r.jsx)(n.td,{children:"If enabled, the strategy automatically manages contingent orders, reducing manual intervention."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"manage_gtd_expiry"})}),(0,r.jsx)(n.td,{children:"False"}),(0,r.jsx)(n.td,{children:"If enabled, the strategy manages GTD expirations, ensuring orders remain active as intended."})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"windows-signal-handling",children:"Windows signal handling"}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["Windows: asyncio event loops do not implement ",(0,r.jsx)(n.code,{children:"loop.add_signal_handler"}),". As a result, the legacy\n",(0,r.jsx)(n.code,{children:"TradingNode"})," does not receive OS signals via asyncio on Windows. Use Ctrl+C (SIGINT) handling or\nprogrammatic shutdown; SIGTERM parity is not expected on Windows."]})}),"\n",(0,r.jsxs)(n.p,{children:["On Windows, asyncio event loops do not implement ",(0,r.jsx)(n.code,{children:"loop.add_signal_handler"}),", so Unix-style signal\nintegration is unavailable. As a result, ",(0,r.jsx)(n.code,{children:"TradingNode"})," does not receive OS signals via asyncio on\nWindows and will not gracefully stop unless you intervene."]}),"\n",(0,r.jsx)(n.p,{children:"Recommended approaches on Windows:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Wrap ",(0,r.jsx)(n.code,{children:"run"})," with a ",(0,r.jsx)(n.code,{children:"try/except KeyboardInterrupt"})," and call ",(0,r.jsx)(n.code,{children:"node.stop()"})," then ",(0,r.jsx)(n.code,{children:"node.dispose()"}),".\nCtrl+C on Windows raises ",(0,r.jsx)(n.code,{children:"KeyboardInterrupt"})," in the main thread, providing a clean teardown path."]}),"\n",(0,r.jsxs)(n.li,{children:["Alternatively, publish a ",(0,r.jsx)(n.code,{children:"ShutdownSystem"})," command programmatically (or call ",(0,r.jsx)(n.code,{children:"shutdown_system(...)"}),"\nfrom an actor/component) to trigger the same shutdown path."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The \u201cinflight check loop task still pending\u201d message is consistent with the lack of asyncio signal\nhandling on Windows, i.e., the normal graceful shutdown path isn\u2019t being triggered."}),"\n",(0,r.jsxs)(n.p,{children:["This is tracked as an enhancement request to support Ctrl+C (SIGINT) for Windows in the legacy path.\n",(0,r.jsx)(n.a,{href:"https://github.com/nautechsystems/nautilus_trader/issues/2785",children:"https://github.com/nautechsystems/nautilus_trader/issues/2785"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["For the new v2 system, ",(0,r.jsx)(n.code,{children:"LiveNode"})," already supports Ctrl+C cleanly via ",(0,r.jsx)(n.code,{children:"tokio::signal::ctrl_c()"})," and a\nPython SIGINT bridge, so the runner stops and tasks are shut down cleanly."]}),"\n",(0,r.jsx)(n.p,{children:"Example pattern for Windows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"try:\n    node.run()\nexcept KeyboardInterrupt:\n    pass\nfinally:\n    try:\n        node.stop()\n    finally:\n        node.dispose()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"execution-reconciliation",children:"Execution reconciliation"}),"\n",(0,r.jsxs)(n.p,{children:["Execution reconciliation is the process of aligning the external state of reality for orders and positions\n(both closed and open) with the systems internal state built from events.\nThis process is primarily applicable to live trading, which is why only the ",(0,r.jsx)(n.code,{children:"LiveExecutionEngine"})," has reconciliation capability."]}),"\n",(0,r.jsx)(n.p,{children:"There are two main scenarios for reconciliation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Previous cached execution state"}),": Where cached execution state exists, information from reports is used to generate missing events to align the state."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"No previous cached execution state"}),": Where there is no cached state, all orders and positions that exist externally are generated from scratch."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Best practice"}),": Persist all execution events to the cache database to minimize reliance on venue history, ensuring full recovery even with short lookback windows."]})}),"\n",(0,r.jsx)(n.h3,{id:"reconciliation-configuration",children:"Reconciliation configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Unless reconciliation is disabled by setting the ",(0,r.jsx)(n.code,{children:"reconciliation"})," configuration parameter to false,\nthe execution engine will perform the execution reconciliation procedure for each venue.\nAdditionally, you can specify the lookback window for reconciliation by setting the ",(0,r.jsx)(n.code,{children:"reconciliation_lookback_mins"})," configuration parameter."]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["We recommend not setting a specific ",(0,r.jsx)(n.code,{children:"reconciliation_lookback_mins"}),". This allows the requests made\nto the venues to utilize the maximum execution history available for reconciliation."]})}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsx)(n.p,{children:"If executions have occurred prior to the lookback window, any necessary events will be generated to align\ninternal and external states. This may result in some information loss that could have been avoided with a longer lookback window."}),(0,r.jsx)(n.p,{children:"Additionally, some venues may filter or drop execution information under certain conditions, resulting\nin further information loss. This would not occur if all events were persisted in the cache database."})]}),"\n",(0,r.jsxs)(n.p,{children:["Each strategy can also be configured to claim any external orders for an instrument ID generated during\nreconciliation using the ",(0,r.jsx)(n.code,{children:"external_order_claims"})," configuration parameter.\nThis is useful in situations where, at system start, there is no cached state or it is desirable for\na strategy to resume its operations and continue managing existing open orders for a specific instrument."]}),"\n",(0,r.jsxs)(n.p,{children:["Orders generated with strategy ID ",(0,r.jsx)(n.code,{children:"INTERNAL-DIFF"})," during position reconciliation are internal to the engine and cannot be claimed via ",(0,r.jsx)(n.code,{children:"external_order_claims"}),".\nThey exist solely to align position discrepancies and should not be managed by user strategies."]}),"\n",(0,r.jsxs)(n.p,{children:["For a full list of live trading options see the ",(0,r.jsx)(n.code,{children:"LiveExecEngineConfig"})," ",(0,r.jsx)(n.a,{href:"../api_reference/config#class-liveexecengineconfig",children:"API Reference"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"reconciliation-procedure",children:"Reconciliation procedure"}),"\n",(0,r.jsx)(n.p,{children:"The reconciliation procedure is standardized for all adapter execution clients and uses the following\nmethods to produce an execution mass status:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"generate_order_status_reports"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"generate_fill_reports"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"generate_position_status_reports"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:'The system state is then reconciled with the reports, which represent external "reality":'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Duplicate Check"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check for duplicate client order IDs and trade IDs."}),"\n",(0,r.jsx)(n.li,{children:"Duplicate client order IDs cause reconciliation failure to prevent state corruption."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Order Reconciliation"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generate and apply events necessary to update orders from any cached state to the current state."}),"\n",(0,r.jsxs)(n.li,{children:["If any trade reports are missing, inferred ",(0,r.jsx)(n.code,{children:"OrderFilled"})," events are generated."]}),"\n",(0,r.jsx)(n.li,{children:"If any client order ID is not recognized or an order report lacks a client order ID, external order events are generated."}),"\n",(0,r.jsx)(n.li,{children:"Fill report data consistency is verified using tolerance-based comparisons for price and commission differences."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Position Reconciliation"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ensure the net position per instrument matches the position reports returned from the venue using instrument precision handling."}),"\n",(0,r.jsx)(n.li,{children:"If the position state resulting from order reconciliation does not match the external state, external order events will be generated to resolve discrepancies."}),"\n",(0,r.jsxs)(n.li,{children:["When ",(0,r.jsx)(n.code,{children:"generate_missing_orders"})," is enabled (default: True), orders are generated with strategy ID ",(0,r.jsx)(n.code,{children:"INTERNAL-DIFF"})," to align position discrepancies discovered during reconciliation."]}),"\n",(0,r.jsxs)(n.li,{children:["A hierarchical price determination strategy ensures reconciliation can proceed even with limited data:","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Calculated reconciliation price"})," (preferred): Uses the reconciliation price function to achieve target average positions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Market mid-price"}),": Falls back to current bid-ask midpoint if reconciliation price cannot be calculated"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Current position average"}),": Uses existing position average price if no market data is available"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"MARKET order"})," (last resort): When no price information exists (no positions, no market data), a MARKET order is generated"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"LIMIT orders are used when a price can be determined (cases 1-3), ensuring accurate PnL calculations"}),"\n",(0,r.jsx)(n.li,{children:"MARKET orders are only used as a last resort when starting fresh with no available pricing data"}),"\n",(0,r.jsx)(n.li,{children:"Zero quantity differences after precision rounding are handled gracefully."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Exception Handling"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Individual adapter failures do not abort the entire reconciliation process."}),"\n",(0,r.jsx)(n.li,{children:"Missing order status reports are handled gracefully when fill reports arrive first."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"If reconciliation fails, the system will not continue to start, and an error will be logged."}),"\n",(0,r.jsx)(n.h3,{id:"common-reconciliation-scenarios",children:"Common reconciliation scenarios"}),"\n",(0,r.jsx)(n.p,{children:"The scenarios below are split between startup reconciliation (mass status) and runtime/continuous checks (in-flight order checks, open-order polls, and own-books audits)."}),"\n",(0,r.jsx)(n.h4,{id:"startup-reconciliation",children:"Startup reconciliation"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Scenario"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"System behavior"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Order state discrepancy"})}),(0,r.jsxs)(n.td,{children:["Local order state differs from venue (e.g., local shows ",(0,r.jsx)(n.code,{children:"SUBMITTED"}),", venue shows ",(0,r.jsx)(n.code,{children:"REJECTED"}),")."]}),(0,r.jsx)(n.td,{children:"Updates local order to match venue state and emits missing events."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Missed fills"})}),(0,r.jsx)(n.td,{children:"Venue fills an order but the engine misses the fill event."}),(0,r.jsxs)(n.td,{children:["Generates missing ",(0,r.jsx)(n.code,{children:"OrderFilled"})," events."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Multiple fills"})}),(0,r.jsx)(n.td,{children:"Order has multiple partial fills, some missed by the engine."}),(0,r.jsx)(n.td,{children:"Reconstructs complete fill history from venue reports."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"External orders"})}),(0,r.jsx)(n.td,{children:"Orders exist on venue but not in local cache (placed externally or from another system)."}),(0,r.jsxs)(n.td,{children:["Creates orders from venue reports; tags them ",(0,r.jsx)(n.code,{children:"EXTERNAL"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Partially filled then canceled"})}),(0,r.jsx)(n.td,{children:"Order partially filled then canceled by venue."}),(0,r.jsxs)(n.td,{children:["Updates order state to ",(0,r.jsx)(n.code,{children:"CANCELED"})," while preserving fill history."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Different fill data"})}),(0,r.jsx)(n.td,{children:"Venue reports different fill price/commission than cached."}),(0,r.jsx)(n.td,{children:"Preserves cached fill data; logs discrepancies from reports."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Filtered orders"})}),(0,r.jsx)(n.td,{children:"Orders marked for filtering via configuration."}),(0,r.jsxs)(n.td,{children:["Skips reconciliation based on ",(0,r.jsx)(n.code,{children:"filtered_client_order_ids"})," or instrument filters."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Duplicate client order IDs"})}),(0,r.jsx)(n.td,{children:"Multiple orders with same client order ID in venue reports."}),(0,r.jsx)(n.td,{children:"Reconciliation fails to prevent state corruption."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Position quantity mismatch (long)"})}),(0,r.jsx)(n.td,{children:"Internal long position differs from external (e.g., internal: 100, external: 150)."}),(0,r.jsxs)(n.td,{children:["Generates BUY LIMIT order with calculated price when ",(0,r.jsx)(n.code,{children:"generate_missing_orders=True"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Position quantity mismatch (short)"})}),(0,r.jsx)(n.td,{children:"Internal short position differs from external (e.g., internal: -100, external: -150)."}),(0,r.jsxs)(n.td,{children:["Generates SELL LIMIT order with calculated price when ",(0,r.jsx)(n.code,{children:"generate_missing_orders=True"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Position reduction"})}),(0,r.jsx)(n.td,{children:"External position smaller than internal (e.g., internal: 150 long, external: 100 long)."}),(0,r.jsx)(n.td,{children:"Generates opposite side LIMIT order with calculated price to reduce position."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Position side flip"})}),(0,r.jsx)(n.td,{children:"Internal position opposite of external (e.g., internal: 100 long, external: 50 short)."}),(0,r.jsx)(n.td,{children:"Generates LIMIT order with calculated price to close internal and open external position."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"INTERNAL-DIFF orders"})}),(0,r.jsx)(n.td,{children:'Position reconciliation orders with strategy ID "INTERNAL-DIFF".'}),(0,r.jsxs)(n.td,{children:["Never filtered, regardless of ",(0,r.jsx)(n.code,{children:"filter_unclaimed_external_orders"}),"."]})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"runtimecontinuous-checks",children:"Runtime/continuous checks"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Scenario"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"System behavior"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"In-flight order timeout"})}),(0,r.jsx)(n.td,{children:"In-flight order remains unconfirmed beyond threshold."}),(0,r.jsxs)(n.td,{children:["After ",(0,r.jsx)(n.code,{children:"inflight_check_retries"}),", resolves to ",(0,r.jsx)(n.code,{children:"REJECTED"})," to maintain consistent state."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Open orders check discrepancy"})}),(0,r.jsx)(n.td,{children:"Periodic open-orders poll detects a state change at the venue."}),(0,r.jsxs)(n.td,{children:["At ",(0,r.jsx)(n.code,{children:"open_check_interval_secs"}),", confirms status (respecting ",(0,r.jsx)(n.code,{children:"open_check_open_only"}),") and applies transitions if changed."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Own books audit mismatch"})}),(0,r.jsx)(n.td,{children:"Own order books diverge from venue public books."}),(0,r.jsxs)(n.td,{children:["At ",(0,r.jsx)(n.code,{children:"own_books_audit_interval_secs"}),", audits and logs inconsistencies for investigation."]})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"common-reconciliation-issues",children:"Common reconciliation issues"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Missing trade reports"}),": Some venues filter out older trades, causing incomplete reconciliation. Increase ",(0,r.jsx)(n.code,{children:"reconciliation_lookback_mins"})," or ensure all events are cached locally."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Position mismatches"}),": If external orders predate the lookback window, positions may not align. Flatten the account before restarting the system to reset state."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Duplicate order IDs"}),": Duplicate client order IDs in mass status reports will cause reconciliation failure. Ensure venue data integrity or contact support."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Precision differences"}),": Small decimal differences in position quantities are handled automatically using instrument precision, but large discrepancies may indicate missing orders."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Out-of-order reports"}),": Fill reports arriving before order status reports are deferred until order state is available."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"For persistent reconciliation issues, consider dropping cached state or flattening accounts before system restart."})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},9087:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>d});var s=i(6363);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);