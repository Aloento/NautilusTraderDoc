"use strict";(globalThis.webpackChunknautilus_trader=globalThis.webpackChunknautilus_trader||[]).push([[6152],{2633:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"tutorials/backtest_binance_orderbook","title":"Backtest: Binance OrderBook data","description":"Tutorial for NautilusTrader a high-performance algorithmic trading platform and event driven backtester.","source":"@site/docs/tutorials/backtest_binance_orderbook.md","sourceDirName":"tutorials","slug":"/tutorials/backtest_binance_orderbook","permalink":"/tutorials/backtest_binance_orderbook","draft":false,"unlisted":false,"editUrl":"https://github.com/Aloento/NautilusTraderDoc/tree/main/docs/tutorials/backtest_binance_orderbook.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Tutorials","permalink":"/tutorials/"},"next":{"title":"Backtest: Bybit OrderBook data","permalink":"/tutorials/backtest_bybit_orderbook"}}');var r=n(7259),s=n(9087);const o={},i="Backtest: Binance OrderBook data",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Imports",id:"imports",level:2},{value:"Loading data",id:"loading-data",level:2},{value:"Process deltas using a wrangler",id:"process-deltas-using-a-wrangler",level:3},{value:"Set up data catalog",id:"set-up-data-catalog",level:3},{value:"Configure backtest",id:"configure-backtest",level:2},{value:"Run the backtest",id:"run-the-backtest",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"backtest-binance-orderbook-data",children:"Backtest: Binance OrderBook data"})}),"\n",(0,r.jsxs)(t.p,{children:["Tutorial for ",(0,r.jsx)(t.a,{href:"https://nautilustrader.io/docs/",children:"NautilusTrader"})," a high-performance algorithmic trading platform and event driven backtester."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://github.com/nautechsystems/nautilus_trader/blob/develop/docs/tutorials/backtest_binance_orderbook.ipynb",children:"View source on GitHub"}),"."]}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsx)(t.p,{children:"We are currently working on this tutorial."})}),"\n",(0,r.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(t.p,{children:["This tutorial runs through how to set up the data catalog and a ",(0,r.jsx)(t.code,{children:"BacktestNode"})," to backtest an ",(0,r.jsx)(t.code,{children:"OrderBookImbalance"})," strategy or order book data. This example requires you bring your own Binance order book data."]}),"\n",(0,r.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Python 3.11+ installed"}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://jupyter.org/",children:"JupyterLab"})," or similar installed (",(0,r.jsx)(t.code,{children:"pip install -U jupyterlab"}),")"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://pypi.org/project/nautilus_trader/",children:"NautilusTrader"})," latest release installed (",(0,r.jsx)(t.code,{children:"pip install -U nautilus_trader"}),")"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"imports",children:"Imports"}),"\n",(0,r.jsx)(t.p,{children:"We'll start with all of our imports for the remainder of this guide:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"import os\nimport shutil\nfrom decimal import Decimal\nfrom pathlib import Path\n\nimport pandas as pd\n\nfrom nautilus_trader.adapters.binance.loaders import BinanceOrderBookDeltaDataLoader\nfrom nautilus_trader.backtest.node import BacktestDataConfig\nfrom nautilus_trader.backtest.node import BacktestEngineConfig\nfrom nautilus_trader.backtest.node import BacktestNode\nfrom nautilus_trader.backtest.node import BacktestRunConfig\nfrom nautilus_trader.backtest.node import BacktestVenueConfig\nfrom nautilus_trader.config import ImportableStrategyConfig\nfrom nautilus_trader.config import LoggingConfig\nfrom nautilus_trader.core.datetime import dt_to_unix_nanos\nfrom nautilus_trader.model import OrderBookDelta\nfrom nautilus_trader.persistence.catalog import ParquetDataCatalog\nfrom nautilus_trader.persistence.wranglers import OrderBookDeltaDataWrangler\nfrom nautilus_trader.test_kit.providers import TestInstrumentProvider\n"})}),"\n",(0,r.jsx)(t.h2,{id:"loading-data",children:"Loading data"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# Path to your data directory, using user /Downloads as an example\nDATA_DIR = "~/Downloads"\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'data_path = Path(DATA_DIR).expanduser() / "Data" / "Binance"\nraw_files = list(data_path.iterdir())\nassert raw_files, f"Unable to find any histdata files in directory {data_path}"\nraw_files\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# First we\'ll load the initial order book snapshot\npath_snap = data_path / "BTCUSDT_T_DEPTH_2022-11-01_depth_snap.csv"\ndf_snap = BinanceOrderBookDeltaDataLoader.load(path_snap)\ndf_snap.head()\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"# Then we'll load the order book updates, to save time here we're limiting to 1 million rows\npath_update = data_path / \"BTCUSDT_T_DEPTH_2022-11-01_depth_update.csv\"\nnrows = 1_000_000\ndf_update = BinanceOrderBookDeltaDataLoader.load(path_update, nrows=nrows)\ndf_update.head()\n"})}),"\n",(0,r.jsx)(t.h3,{id:"process-deltas-using-a-wrangler",children:"Process deltas using a wrangler"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"BTCUSDT_BINANCE = TestInstrumentProvider.btcusdt_binance()\nwrangler = OrderBookDeltaDataWrangler(BTCUSDT_BINANCE)\n\ndeltas = wrangler.process(df_snap)\ndeltas += wrangler.process(df_update)\ndeltas.sort(key=lambda x: x.ts_init)  # Ensure data is non-decreasing by `ts_init`\ndeltas[:10]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"set-up-data-catalog",children:"Set up data catalog"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'CATALOG_PATH = os.getcwd() + "/catalog"\n\n# Clear if it already exists, then create fresh\nif os.path.exists(CATALOG_PATH):\n    shutil.rmtree(CATALOG_PATH)\nos.mkdir(CATALOG_PATH)\n\n# Create a catalog instance\ncatalog = ParquetDataCatalog(CATALOG_PATH)\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"# Write instrument and ticks to catalog\ncatalog.write_data([BTCUSDT_BINANCE])\ncatalog.write_data(deltas)\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"# Confirm the instrument was written\ncatalog.instruments()\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# Explore the available data in the catalog\nstart = dt_to_unix_nanos(pd.Timestamp("2022-11-01", tz="UTC"))\nend =  dt_to_unix_nanos(pd.Timestamp("2022-11-04", tz="UTC"))\n\ndeltas = catalog.order_book_deltas(start=start, end=end)\nprint(len(deltas))\ndeltas[:10]\n'})}),"\n",(0,r.jsx)(t.h2,{id:"configure-backtest",children:"Configure backtest"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'instrument = catalog.instruments()[0]\nbook_type = "L2_MBP"  # Ensure data book type matches venue book type\n\ndata_configs = [BacktestDataConfig(\n        catalog_path=CATALOG_PATH,\n        data_cls=OrderBookDelta,\n        instrument_id=instrument.id,\n        # start_time=start,  # Run across all data\n        # end_time=end,  # Run across all data\n    )\n]\n\nvenues_configs = [\n    BacktestVenueConfig(\n        name="BINANCE",\n        oms_type="NETTING",\n        account_type="CASH",\n        base_currency=None,\n        starting_balances=["20 BTC", "100000 USDT"],\n        book_type=book_type,  # <-- Venues book type\n    )\n]\n\nstrategies = [\n    ImportableStrategyConfig(\n        strategy_path="nautilus_trader.examples.strategies.orderbook_imbalance:OrderBookImbalance",\n        config_path="nautilus_trader.examples.strategies.orderbook_imbalance:OrderBookImbalanceConfig",\n        config={\n            "instrument_id": instrument.id,\n            "book_type": book_type,\n            "max_trade_size": Decimal("1.000"),\n            "min_seconds_between_triggers": 1.0,\n        },\n    ),\n]\n\n# NautilusTrader currently exceeds the rate limit for Jupyter notebook logging (stdout output),\n# this is why the `log_level` is set to "ERROR". If you lower this level to see\n# more logging then the notebook will hang during cell execution. A fix is currently\n# being investigated which involves either raising the configured rate limits for\n# Jupyter, or throttling the log flushing from Nautilus.\n# https://github.com/jupyterlab/jupyterlab/issues/12845\n# https://github.com/deshaw/jupyterlab-limit-output\nconfig = BacktestRunConfig(\n    engine=BacktestEngineConfig(\n        strategies=strategies,\n        logging=LoggingConfig(log_level="ERROR"),\n    ),\n    data=data_configs,\n    venues=venues_configs,\n)\n\nconfig\n'})}),"\n",(0,r.jsx)(t.h2,{id:"run-the-backtest",children:"Run the backtest"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"node = BacktestNode(configs=[config])\n\nresult = node.run()\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"result\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"from nautilus_trader.backtest.engine import BacktestEngine\nfrom nautilus_trader.model import Venue\n\n\nengine: BacktestEngine = node.get_engine(config.id)\n\nengine.trader.generate_order_fills_report()\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"engine.trader.generate_positions_report()\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'engine.trader.generate_account_report(Venue("BINANCE"))\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},9087:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var a=n(6363);const r={},s=a.createContext(r);function o(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);