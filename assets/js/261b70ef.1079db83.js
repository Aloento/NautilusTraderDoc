"use strict";(globalThis.webpackChunknautilus_trader=globalThis.webpackChunknautilus_trader||[]).push([[8042],{7527:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"developer_guide/coding_standards","title":"Coding Standards","description":"Code Style","source":"@site/docs/developer_guide/coding_standards.md","sourceDirName":"developer_guide","slug":"/developer_guide/coding_standards","permalink":"/developer_guide/coding_standards","draft":false,"unlisted":false,"editUrl":"https://github.com/Aloento/NautilusTraderDoc/tree/main/docs/developer_guide/coding_standards.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Benchmarking","permalink":"/developer_guide/benchmarking"},"next":{"title":"Cython","permalink":"/developer_guide/cython"}}');var t=s(7259),r=s(9087);const o={},l="Coding Standards",d={},a=[{value:"Code Style",id:"code-style",level:2},{value:"Universal formatting rules",id:"universal-formatting-rules",level:3},{value:"Comment conventions",id:"comment-conventions",level:3},{value:"Doc comment / docstring mood",id:"doc-comment--docstring-mood",level:3},{value:"Terminology and phrasing",id:"terminology-and-phrasing",level:3},{value:"Formatting",id:"formatting",level:3},{value:"PEP-8",id:"pep-8",level:3},{value:"Python style guide",id:"python-style-guide",level:2},{value:"Type hints",id:"type-hints",level:3},{value:"Docstrings",id:"docstrings",level:3},{value:"Ruff",id:"ruff",level:3},{value:"Commit messages",id:"commit-messages",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"coding-standards",children:"Coding Standards"})}),"\n",(0,t.jsx)(n.h2,{id:"code-style",children:"Code Style"}),"\n",(0,t.jsx)(n.p,{children:"The current codebase can be used as a guide for formatting conventions.\nAdditional guidelines are provided below."}),"\n",(0,t.jsx)(n.h3,{id:"universal-formatting-rules",children:"Universal formatting rules"}),"\n",(0,t.jsxs)(n.p,{children:["The following applies to ",(0,t.jsx)(n.strong,{children:"all"})," source files (Rust, Python, Cython, shell, etc.):"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.strong,{children:"spaces only"}),", never hard tab characters."]}),"\n",(0,t.jsxs)(n.li,{children:["Lines should generally stay below ",(0,t.jsx)(n.strong,{children:"100 characters"}),"; wrap thoughtfully when necessary."]}),"\n",(0,t.jsxs)(n.li,{children:["Prefer American English spelling (",(0,t.jsx)(n.code,{children:"color"}),", ",(0,t.jsx)(n.code,{children:"serialize"}),", ",(0,t.jsx)(n.code,{children:"behavior"}),")."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"comment-conventions",children:"Comment conventions"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Generally leave ",(0,t.jsx)(n.strong,{children:"one blank line above"})," every comment block or docstring so it is visually separated from code."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.em,{children:"sentence case"})," \u2013 capitalize the first letter, keep the rest lowercase unless proper nouns or acronyms."]}),"\n",(0,t.jsx)(n.li,{children:"Do not use double spaces after periods."}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Single-line comments"})," ",(0,t.jsx)(n.em,{children:"must not"})," end with a period ",(0,t.jsx)(n.em,{children:"unless"})," the line ends with a URL or inline Markdown link \u2013 in those cases leave the punctuation exactly as the link requires."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multi-line comments"})," should separate sentences with commas (not period-per-line). The final line ",(0,t.jsx)(n.em,{children:"should"})," end with a period."]}),"\n",(0,t.jsxs)(n.li,{children:["Keep comments concise; favor clarity and only explain the non-obvious \u2013 ",(0,t.jsx)(n.em,{children:"less is more"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Avoid emoji symbols in text."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"doc-comment--docstring-mood",children:"Doc comment / docstring mood"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Python"})," docstrings should be written in the ",(0,t.jsx)(n.strong,{children:"imperative mood"})," \u2013 e.g. ",(0,t.jsx)(n.em,{children:'"Return a cached client."'})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rust"})," doc comments should be written in the ",(0,t.jsx)(n.strong,{children:"indicative mood"})," \u2013 e.g. ",(0,t.jsx)(n.em,{children:'"Returns a cached client."'})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"These conventions align with the prevailing styles of each language ecosystem and make generated\ndocumentation feel natural to end-users."}),"\n",(0,t.jsx)(n.h3,{id:"terminology-and-phrasing",children:"Terminology and phrasing"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Error messages"}),': Avoid using ", got" in error messages. Use more descriptive alternatives like ", was", ", received", or ", found" depending on context.']}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u274c ",(0,t.jsx)(n.code,{children:'"Expected string, got {type(value)}"'})]}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 ",(0,t.jsx)(n.code,{children:'"Expected string, was {type(value)}"'})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Spelling"}),': Use "hardcoded" (single word) rather than "hard-coded" or "hard coded" \u2013 this is the more modern and accepted spelling.']}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"formatting",children:"Formatting"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"For longer lines of code, and when passing more than a couple of arguments, you should take a new line which aligns at the next logical indent (rather than attempting a hanging 'vanity' alignment off an opening parenthesis). This practice conserves space to the right, ensures important code is more central in view, and is also robust to function/method name changes."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The closing parenthesis should be located on a new line, aligned at the logical indent."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Also ensure multiple hanging parameters or arguments end with a trailing comma:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"long_method_with_many_params(\n    some_arg1,\n    some_arg2,\n    some_arg3,  # <-- trailing comma\n)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"pep-8",children:"PEP-8"}),"\n",(0,t.jsxs)(n.p,{children:["The codebase generally follows the PEP-8 style guide. Even though C typing is taken advantage of in the Cython parts of the codebase, we still aim to be idiomatic of Python where possible.\nOne notable departure is that Python truthiness is not always taken advantage of to check if an argument is ",(0,t.jsx)(n.code,{children:"None"})," for everything other than collections."]}),"\n",(0,t.jsx)(n.p,{children:"There are two reasons for this;"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Cython can generate more efficient C code from ",(0,t.jsx)(n.code,{children:"is None"})," and ",(0,t.jsx)(n.code,{children:"is not None"}),", rather than entering the Python runtime to check the ",(0,t.jsx)(n.code,{children:"PyObject"})," truthiness."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["As per the ",(0,t.jsx)(n.a,{href:"https://google.github.io/styleguide/pyguide.html",children:"Google Python Style Guide"})," - it\u2019s discouraged to use truthiness to check if an argument is/is not ",(0,t.jsx)(n.code,{children:"None"}),", when there is a chance an unexpected object could be passed into the function or method which will yield an unexpected truthiness evaluation (which could result in a logical error type bug)."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"\u201cAlways use if foo is None: (or is not None) to check for a None value. E.g., when testing whether a variable or argument that defaults to None was set to some other value. The other value might be a value that\u2019s false in a boolean context!\u201d"})}),"\n",(0,t.jsxs)(n.p,{children:["There are still areas that aren\u2019t performance-critical where truthiness checks for ",(0,t.jsx)(n.code,{children:"None"})," (",(0,t.jsx)(n.code,{children:"if foo is None:"})," vs ",(0,t.jsx)(n.code,{children:"if not foo:"}),") will be acceptable for clarity."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Use truthiness to check for empty collections (e.g., ",(0,t.jsx)(n.code,{children:"if not my_list:"}),") rather than comparing explicitly to ",(0,t.jsx)(n.code,{children:"None"})," or empty."]})}),"\n",(0,t.jsx)(n.p,{children:"We welcome all feedback on where the codebase departs from PEP-8 for no apparent reason."}),"\n",(0,t.jsx)(n.h2,{id:"python-style-guide",children:"Python style guide"}),"\n",(0,t.jsx)(n.h3,{id:"type-hints",children:"Type hints"}),"\n",(0,t.jsxs)(n.p,{children:["All function and method signatures ",(0,t.jsx)(n.em,{children:"must"})," include comprehensive type annotations:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def __init__(self, config: EMACrossConfig) -> None:\ndef on_bar(self, bar: Bar) -> None:\ndef on_save(self) -> dict[str, bytes]:\ndef on_load(self, state: dict[str, bytes]) -> None:\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Generic Types"}),": Use ",(0,t.jsx)(n.code,{children:"TypeVar"})," for reusable components"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'T = TypeVar("T")\nclass ThrottledEnqueuer(Generic[T]):\n'})}),"\n",(0,t.jsx)(n.h3,{id:"docstrings",children:"Docstrings"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://numpydoc.readthedocs.io/en/latest/format.html",children:"NumPy docstring spec"})," is used throughout the codebase.\nThis needs to be adhered to consistently to ensure the docs build correctly."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Test method naming"}),": Descriptive names explaining the scenario:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def test_currency_with_negative_precision_raises_overflow_error(self):\ndef test_sma_with_no_inputs_returns_zero_count(self):\ndef test_sma_with_single_input_returns_expected_value(self):\n"})}),"\n",(0,t.jsx)(n.h3,{id:"ruff",children:"Ruff"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://astral.sh/ruff",children:"ruff"})," is utilized to lint the codebase. Ruff rules can be found in the top-level ",(0,t.jsx)(n.code,{children:"pyproject.toml"}),", with ignore justifications typically commented."]}),"\n",(0,t.jsx)(n.h3,{id:"commit-messages",children:"Commit messages"}),"\n",(0,t.jsx)(n.p,{children:"Here are some guidelines for the style of your commit messages:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Limit subject titles to 60 characters or fewer. Capitalize subject line and do not end with period."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Use 'imperative voice', i.e. the message should describe what the commit will do if applied."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Optional: Use the body to explain change. Separate from subject with a blank line. Keep under 100 character width. You can use bullet points with or without terminating periods."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Optional: Provide # references to relevant issues or tickets."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Optional: Provide any hyperlinks which are informative."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},9087:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(6363);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);