"use strict";(globalThis.webpackChunknautilus_trader=globalThis.webpackChunknautilus_trader||[]).push([[9300],{5779:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"concepts/cache","title":"Cache","description":"The Cache is a central in-memory database that automatically stores and manages all trading-related data.","source":"@site/docs/concepts/cache.md","sourceDirName":"concepts","slug":"/concepts/cache","permalink":"/concepts/cache","draft":false,"unlisted":false,"editUrl":"https://github.com/Aloento/NautilusTraderDoc/tree/main/docs/concepts/cache.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Backtesting","permalink":"/concepts/backtesting"},"next":{"title":"Data","permalink":"/concepts/data"}}');var i=s(7259),r=s(9087);const a={},o="Cache",c={},d=[{value:"How caching works",id:"how-caching-works",level:2},{value:"Basic example",id:"basic-example",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Configuration Options",id:"configuration-options",level:3},{value:"Database Configuration",id:"database-configuration",level:3},{value:"Using the cache",id:"using-the-cache",level:2},{value:"Accessing Market data",id:"accessing-market-data",level:3},{value:"Bar(s) access",id:"bars-access",level:4},{value:"Quote ticks",id:"quote-ticks",level:4},{value:"Trade ticks",id:"trade-ticks",level:4},{value:"Order Book",id:"order-book",level:4},{value:"Price access",id:"price-access",level:4},{value:"Bar types",id:"bar-types",level:4},{value:"Simple example",id:"simple-example",level:4},{value:"Trading Objects",id:"trading-objects",level:3},{value:"Orders",id:"orders",level:4},{value:"Basic Order Access",id:"basic-order-access",level:5},{value:"Order State Queries",id:"order-state-queries",level:5},{value:"Order Statistics",id:"order-statistics",level:5},{value:"Positions",id:"positions",level:4},{value:"Position Access",id:"position-access",level:5},{value:"Position State Queries",id:"position-state-queries",level:5},{value:"Position Statistics",id:"position-statistics",level:5},{value:"Accounts",id:"accounts",level:4},{value:"Instruments and Currencies",id:"instruments-and-currencies",level:4},{value:"Instruments",id:"instruments",level:5},{value:"Currencies",id:"currencies",level:5},{value:"Custom Data",id:"custom-data",level:3},{value:"Basic Storage and Retrieval",id:"basic-storage-and-retrieval",level:4},{value:"Best practices and common questions",id:"best-practices-and-common-questions",level:2},{value:"Cache vs. Portfolio Usage",id:"cache-vs-portfolio-usage",level:3},{value:"Cache vs. Strategy variables",id:"cache-vs-strategy-variables",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"cache",children:"Cache"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Cache"})," is a central in-memory database that automatically stores and manages all trading-related data.\nThink of it as your trading system\u2019s memory \u2013 storing everything from market data to order history to custom calculations."]}),"\n",(0,i.jsx)(n.p,{children:"The Cache serves multiple key purposes:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Stores market data"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Stores recent market history (e.g., order books, quotes, trades, bars)."}),"\n",(0,i.jsx)(n.li,{children:"Gives you access to both current and historical market data for your strategy."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Tracks trading data"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Maintains complete ",(0,i.jsx)(n.code,{children:"Order"})," history and current execution state."]}),"\n",(0,i.jsxs)(n.li,{children:["Tracks all ",(0,i.jsx)(n.code,{children:"Position"}),"s and ",(0,i.jsx)(n.code,{children:"Account"})," information."]}),"\n",(0,i.jsxs)(n.li,{children:["Stores ",(0,i.jsx)(n.code,{children:"Instrument"})," definitions and ",(0,i.jsx)(n.code,{children:"Currency"})," information."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Stores custom data"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Any user-defined objects or data can be stored in the ",(0,i.jsx)(n.code,{children:"Cache"})," for later use."]}),"\n",(0,i.jsx)(n.li,{children:"Enables data sharing between different strategies."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"how-caching-works",children:"How caching works"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Built-in types"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Data is automatically added to the ",(0,i.jsx)(n.code,{children:"Cache"})," as it flows through the system."]}),"\n",(0,i.jsxs)(n.li,{children:["In live contexts, updates happen asynchronously - which means there might be a small delay between an event occurring and it appearing in the ",(0,i.jsx)(n.code,{children:"Cache"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["All data flows through the ",(0,i.jsx)(n.code,{children:"Cache"})," before reaching your strategy\u2019s callbacks \u2013 see the diagram below:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 \u2502     \u2502                 \u2502     \u2502                 \u2502     \u2502                       \u2502\n\u2502                 \u2502     \u2502                 \u2502     \u2502                 \u2502     \u2502   Strategy callback:  \u2502\n\u2502      Data       \u251c\u2500\u2500\u2500\u2500\u2500\u25ba   DataEngine    \u251c\u2500\u2500\u2500\u2500\u2500\u25ba     Cache       \u251c\u2500\u2500\u2500\u2500\u2500\u25ba                       \u2502\n\u2502                 \u2502     \u2502                 \u2502     \u2502                 \u2502     \u2502   on_data(...)        \u2502\n\u2502                 \u2502     \u2502                 \u2502     \u2502                 \u2502     \u2502                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"basic-example",children:"Basic example"}),"\n",(0,i.jsxs)(n.p,{children:["Within a strategy, you can access the ",(0,i.jsx)(n.code,{children:"Cache"})," through ",(0,i.jsx)(n.code,{children:"self.cache"}),". Here\u2019s a typical example:"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Anywhere you find ",(0,i.jsx)(n.code,{children:"self"}),", it refers mostly to the ",(0,i.jsx)(n.code,{children:"Strategy"})," itself."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def on_bar(self, bar: Bar) -> None:\n    # Current bar is provided in the parameter 'bar'\n\n    # Get historical bars from Cache\n    last_bar = self.cache.bar(self.bar_type, index=0)        # Last bar (practically the same as the 'bar' parameter)\n    previous_bar = self.cache.bar(self.bar_type, index=1)    # Previous bar\n    third_last_bar = self.cache.bar(self.bar_type, index=2)  # Third last bar\n\n    # Get current position information\n    if self.last_position_opened_id is not None:\n        position = self.cache.position(self.last_position_opened_id)\n        if position.is_open:\n            # Check position details\n            current_pnl = position.unrealized_pnl\n\n    # Get all open orders for our instrument\n    open_orders = self.cache.orders_open(instrument_id=self.instrument_id)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Cache"}),"\u2019s behavior and capacity can be configured through the ",(0,i.jsx)(n.code,{children:"CacheConfig"})," class.\nYou can provide this configuration either to a ",(0,i.jsx)(n.code,{children:"BacktestEngine"})," or a ",(0,i.jsx)(n.code,{children:"TradingNode"}),", depending on your ",(0,i.jsx)(n.a,{href:"/concepts/architecture#environment-contexts",children:"environment context"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Here's a basic example of configuring the ",(0,i.jsx)(n.code,{children:"Cache"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.config import CacheConfig, BacktestEngineConfig, TradingNodeConfig\n\n# For backtesting\nengine_config = BacktestEngineConfig(\n    cache=CacheConfig(\n        tick_capacity=10_000,  # Store last 10,000 ticks per instrument\n        bar_capacity=5_000,    # Store last 5,000 bars per bar type\n    ),\n)\n\n# For live trading\nnode_config = TradingNodeConfig(\n    cache=CacheConfig(\n        tick_capacity=10_000,\n        bar_capacity=5_000,\n    ),\n)\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["By default, the ",(0,i.jsx)(n.code,{children:"Cache"})," keeps the last 10,000 bars for each bar type and 10,000 trade ticks per instrument.\nThese limits provide a good balance between memory usage and data availability. Increase them if your strategy needs more historical data."]})}),"\n",(0,i.jsx)(n.h3,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"CacheConfig"})," class supports these parameters:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.config import CacheConfig\n\ncache_config = CacheConfig(\n    database: DatabaseConfig | None = None,  # Database configuration for persistence\n    encoding: str = \"msgpack\",               # Data encoding format ('msgpack' or 'json')\n    timestamps_as_iso8601: bool = False,     # Store timestamps as ISO8601 strings\n    buffer_interval_ms: int | None = None,   # Buffer interval for batch operations\n    use_trader_prefix: bool = True,          # Use trader prefix in keys\n    use_instance_id: bool = False,           # Include instance ID in keys\n    flush_on_start: bool = False,            # Clear database on startup\n    drop_instruments_on_reset: bool = True,  # Clear instruments on reset\n    tick_capacity: int = 10_000,             # Maximum ticks stored per instrument\n    bar_capacity: int = 10_000,              # Maximum bars stored per each bar-type\n)\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Each bar type maintains its own separate capacity. For example, if you're using both 1-minute and 5-minute bars, each will store up to ",(0,i.jsx)(n.code,{children:"bar_capacity"})," bars.\nWhen ",(0,i.jsx)(n.code,{children:"bar_capacity"})," is reached, the oldest data is automatically removed from the ",(0,i.jsx)(n.code,{children:"Cache"}),"."]})}),"\n",(0,i.jsx)(n.h3,{id:"database-configuration",children:"Database Configuration"}),"\n",(0,i.jsx)(n.p,{children:"For persistence between system restarts, you can configure a database backend."}),"\n",(0,i.jsx)(n.p,{children:"When is it useful to use persistence?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Long-running systems"}),": If you want your data to survive system restarts, upgrading, or unexpected failures, having a database configuration helps to pick up exactly where you left off."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Historical insights"}),": When you need to preserve past trading data for detailed post-analysis or audits."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-node or distributed setups"}),": If multiple services or nodes need to access the same state, a persistent store helps ensure shared and consistent data."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.config import DatabaseConfig\n\nconfig = CacheConfig(\n    database=DatabaseConfig(\n        type="redis",      # Database type\n        host="localhost",  # Database host\n        port=6379,         # Database port\n        timeout=2,         # Connection timeout (seconds)\n    ),\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"using-the-cache",children:"Using the cache"}),"\n",(0,i.jsx)(n.h3,{id:"accessing-market-data",children:"Accessing Market data"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Cache"})," provides a comprehensive interface for accessing different types of market data, including order books, quotes, trades, bars.\nAll market data in the cache are stored with reverse indexing \u2014 meaning the most recent data is at index 0."]}),"\n",(0,i.jsx)(n.h4,{id:"bars-access",children:"Bar(s) access"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Get a list of all cached bars for a bar type\nbars = self.cache.bars(bar_type)  # Returns List[Bar] or an empty list if no bars found\n\n# Get the most recent bar\nlatest_bar = self.cache.bar(bar_type)  # Returns Bar or None if no such object exists\n\n# Get a specific historical bar by index (0 = most recent)\nsecond_last_bar = self.cache.bar(bar_type, index=1)  # Returns Bar or None if no such object exists\n\n# Check if bars exist and get count\nbar_count = self.cache.bar_count(bar_type)  # Returns number of bars in cache for the specified bar type\nhas_bars = self.cache.has_bars(bar_type)    # Returns bool indicating if any bars exist for the specified bar type\n"})}),"\n",(0,i.jsx)(n.h4,{id:"quote-ticks",children:"Quote ticks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Get quotes\nquotes = self.cache.quote_ticks(instrument_id)                     # Returns List[QuoteTick] or an empty list if no quotes found\nlatest_quote = self.cache.quote_tick(instrument_id)                # Returns QuoteTick or None if no such object exists\nsecond_last_quote = self.cache.quote_tick(instrument_id, index=1)  # Returns QuoteTick or None if no such object exists\n\n# Check quote availability\nquote_count = self.cache.quote_tick_count(instrument_id)  # Returns the number of quotes in cache for this instrument\nhas_quotes = self.cache.has_quote_ticks(instrument_id)    # Returns bool indicating if any quotes exist for this instrument\n"})}),"\n",(0,i.jsx)(n.h4,{id:"trade-ticks",children:"Trade ticks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Get trades\ntrades = self.cache.trade_ticks(instrument_id)         # Returns List[TradeTick] or an empty list if no trades found\nlatest_trade = self.cache.trade_tick(instrument_id)    # Returns TradeTick or None if no such object exists\nsecond_last_trade = self.cache.trade_tick(instrument_id, index=1)  # Returns TradeTick or None if no such object exists\n\n# Check trade availability\ntrade_count = self.cache.trade_tick_count(instrument_id)  # Returns the number of trades in cache for this instrument\nhas_trades = self.cache.has_trade_ticks(instrument_id)    # Returns bool indicating if any trades exist\n"})}),"\n",(0,i.jsx)(n.h4,{id:"order-book",children:"Order Book"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Get current order book\nbook = self.cache.order_book(instrument_id)  # Returns OrderBook or None if no such object exists\n\n# Check if order book exists\nhas_book = self.cache.has_order_book(instrument_id)  # Returns bool indicating if an order book exists\n\n# Get count of order book updates\nupdate_count = self.cache.book_update_count(instrument_id)  # Returns the number of updates received\n"})}),"\n",(0,i.jsx)(n.h4,{id:"price-access",children:"Price access"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.core.rust.model import PriceType\n\n# Get current price by type; Returns Price or None.\nprice = self.cache.price(\n    instrument_id=instrument_id,\n    price_type=PriceType.MID,  # Options: BID, ASK, MID, LAST\n)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"bar-types",children:"Bar types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.core.rust.model import PriceType, AggregationSource\n\n# Get all available bar types for an instrument; Returns List[BarType].\nbar_types = self.cache.bar_types(\n    instrument_id=instrument_id,\n    price_type=PriceType.LAST,  # Options: BID, ASK, MID, LAST\n    aggregation_source=AggregationSource.EXTERNAL,\n)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"simple-example",children:"Simple example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class MarketDataStrategy(Strategy):\n    def on_start(self):\n        # Subscribe to 1-minute bars\n        self.bar_type = BarType.from_str(f"{self.instrument_id}-1-MINUTE-LAST-EXTERNAL")  # example of instrument_id = "EUR/USD.FXCM"\n        self.subscribe_bars(self.bar_type)\n\n    def on_bar(self, bar: Bar) -> None:\n        bars = self.cache.bars(self.bar_type)[:3]\n        if len(bars) < 3:   # Wait until we have at least 3 bars\n            return\n\n        # Access last 3 bars for analysis\n        current_bar = bars[0]    # Most recent bar\n        prev_bar = bars[1]       # Second to last bar\n        prev_prev_bar = bars[2]  # Third to last bar\n\n        # Get latest quote and trade\n        latest_quote = self.cache.quote_tick(self.instrument_id)\n        latest_trade = self.cache.trade_tick(self.instrument_id)\n\n        if latest_quote is not None:\n            current_spread = latest_quote.ask_price - latest_quote.bid_price\n            self.log.info(f"Current spread: {current_spread}")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"trading-objects",children:"Trading Objects"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Cache"})," provides comprehensive access to all trading objects within the system, including:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Orders"}),"\n",(0,i.jsx)(n.li,{children:"Positions"}),"\n",(0,i.jsx)(n.li,{children:"Accounts"}),"\n",(0,i.jsx)(n.li,{children:"Instruments"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"orders",children:"Orders"}),"\n",(0,i.jsx)(n.p,{children:"Orders can be accessed and queried through multiple methods, with flexible filtering options by venue, strategy, instrument, and order side."}),"\n",(0,i.jsx)(n.h5,{id:"basic-order-access",children:"Basic Order Access"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Get a specific order by its client order ID\norder = self.cache.order(ClientOrderId("O-123"))\n\n# Get all orders in the system\norders = self.cache.orders()\n\n# Get orders filtered by specific criteria\norders_for_venue = self.cache.orders(venue=venue)                       # All orders for a specific venue\norders_for_strategy = self.cache.orders(strategy_id=strategy_id)        # All orders for a specific strategy\norders_for_instrument = self.cache.orders(instrument_id=instrument_id)  # All orders for an instrument\n'})}),"\n",(0,i.jsx)(n.h5,{id:"order-state-queries",children:"Order State Queries"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Get orders by their current state\nopen_orders = self.cache.orders_open()          # Orders currently active at the venue\nclosed_orders = self.cache.orders_closed()      # Orders that have completed their lifecycle\nemulated_orders = self.cache.orders_emulated()  # Orders being simulated locally by the system\ninflight_orders = self.cache.orders_inflight()  # Orders submitted (or modified) to venue, but not yet confirmed\n\n# Check specific order states\nexists = self.cache.order_exists(client_order_id)            # Checks if an order with the given ID exists in the cache\nis_open = self.cache.is_order_open(client_order_id)          # Checks if an order is currently open\nis_closed = self.cache.is_order_closed(client_order_id)      # Checks if an order is closed\nis_emulated = self.cache.is_order_emulated(client_order_id)  # Checks if an order is being simulated locally\nis_inflight = self.cache.is_order_inflight(client_order_id)  # Checks if an order is submitted or modified, but not yet confirmed\n"})}),"\n",(0,i.jsx)(n.h5,{id:"order-statistics",children:"Order Statistics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Get counts of orders in different states\nopen_count = self.cache.orders_open_count()          # Number of open orders\nclosed_count = self.cache.orders_closed_count()      # Number of closed orders\nemulated_count = self.cache.orders_emulated_count()  # Number of emulated orders\ninflight_count = self.cache.orders_inflight_count()  # Number of inflight orders\ntotal_count = self.cache.orders_total_count()        # Total number of orders in the system\n\n# Get filtered order counts\nbuy_orders_count = self.cache.orders_open_count(side=OrderSide.BUY)  # Number of currently open BUY orders\nvenue_orders_count = self.cache.orders_total_count(venue=venue)      # Total number of orders for a given venue\n"})}),"\n",(0,i.jsx)(n.h4,{id:"positions",children:"Positions"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Cache"})," maintains a record of all positions and offers several ways to query them."]}),"\n",(0,i.jsx)(n.h5,{id:"position-access",children:"Position Access"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Get a specific position by its ID\nposition = self.cache.position(PositionId("P-123"))\n\n# Get positions by their state\nall_positions = self.cache.positions()            # All positions in the system\nopen_positions = self.cache.positions_open()      # All currently open positions\nclosed_positions = self.cache.positions_closed()  # All closed positions\n\n# Get positions filtered by various criteria\nvenue_positions = self.cache.positions(venue=venue)                       # Positions for a specific venue\ninstrument_positions = self.cache.positions(instrument_id=instrument_id)  # Positions for a specific instrument\nstrategy_positions = self.cache.positions(strategy_id=strategy_id)        # Positions for a specific strategy\nlong_positions = self.cache.positions(side=PositionSide.LONG)             # All long positions\n'})}),"\n",(0,i.jsx)(n.h5,{id:"position-state-queries",children:"Position State Queries"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Check position states\nexists = self.cache.position_exists(position_id)        # Checks if a position with the given ID exists\nis_open = self.cache.is_position_open(position_id)      # Checks if a position is open\nis_closed = self.cache.is_position_closed(position_id)  # Checks if a position is closed\n\n# Get position and order relationships\norders = self.cache.orders_for_position(position_id)       # All orders related to a specific position\nposition = self.cache.position_for_order(client_order_id)  # Find the position associated with a specific order\n"})}),"\n",(0,i.jsx)(n.h5,{id:"position-statistics",children:"Position Statistics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Get position counts in different states\nopen_count = self.cache.positions_open_count()      # Number of currently open positions\nclosed_count = self.cache.positions_closed_count()  # Number of closed positions\ntotal_count = self.cache.positions_total_count()    # Total number of positions in the system\n\n# Get filtered position counts\nlong_positions_count = self.cache.positions_open_count(side=PositionSide.LONG)              # Number of open long positions\ninstrument_positions_count = self.cache.positions_total_count(instrument_id=instrument_id)  # Number of positions for a given instrument\n"})}),"\n",(0,i.jsx)(n.h4,{id:"accounts",children:"Accounts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Access account information\naccount = self.cache.account(account_id)       # Retrieve account by ID\naccount = self.cache.account_for_venue(venue)  # Retrieve account for a specific venue\naccount_id = self.cache.account_id(venue)      # Retrieve account ID for a venue\naccounts = self.cache.accounts()               # Retrieve all accounts in the cache\n"})}),"\n",(0,i.jsx)(n.h4,{id:"instruments-and-currencies",children:"Instruments and Currencies"}),"\n",(0,i.jsx)(n.h5,{id:"instruments",children:"Instruments"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Get instrument information\ninstrument = self.cache.instrument(instrument_id) # Retrieve a specific instrument by its ID\nall_instruments = self.cache.instruments()        # Retrieve all instruments in the cache\n\n# Get filtered instruments\nvenue_instruments = self.cache.instruments(venue=venue)              # Instruments for a specific venue\ninstruments_by_underlying = self.cache.instruments(underlying="ES")  # Instruments by underlying\n\n# Get instrument identifiers\ninstrument_ids = self.cache.instrument_ids()                   # Get all instrument IDs\nvenue_instrument_ids = self.cache.instrument_ids(venue=venue)  # Get instrument IDs for a specific venue\n'})}),"\n",(0,i.jsx)(n.h5,{id:"currencies",children:"Currencies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Get currency information\ncurrency = self.cache.load_currency("USD")  # Loads currency data for USD\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"custom-data",children:"Custom Data"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Cache"})," can also store and retrieve custom data types in addition to built-in market data and trading objects.\nYou can keep any user-defined data you want to share between system components (mostly Actors / Strategies)."]}),"\n",(0,i.jsx)(n.h4,{id:"basic-storage-and-retrieval",children:"Basic Storage and Retrieval"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Call this code inside Strategy methods (`self` refers to Strategy)\n\n# Store data\nself.cache.add(key="my_key", value=b"some binary data")\n\n# Retrieve data\nstored_data = self.cache.get("my_key")  # Returns bytes or None\n'})}),"\n",(0,i.jsxs)(n.p,{children:["For more complex use cases, the ",(0,i.jsx)(n.code,{children:"Cache"})," can store custom data objects that inherit from the ",(0,i.jsx)(n.code,{children:"nautilus_trader.core.Data"})," base class."]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Cache"})," is not designed to be a full database replacement. For large datasets or complex querying needs, consider using a dedicated database system."]})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-and-common-questions",children:"Best practices and common questions"}),"\n",(0,i.jsx)(n.h3,{id:"cache-vs-portfolio-usage",children:"Cache vs. Portfolio Usage"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Cache"})," and ",(0,i.jsx)(n.code,{children:"Portfolio"})," components serve different but complementary purposes in NautilusTrader:"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cache"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Maintains the historical knowledge and current state of the trading system."}),"\n",(0,i.jsx)(n.li,{children:"Updates immediately for local state changes (initializing an order to be submitted)"}),"\n",(0,i.jsx)(n.li,{children:"Updates asynchronously as external events occur (order is filled)."}),"\n",(0,i.jsx)(n.li,{children:"Provides complete history of trading activity and market data."}),"\n",(0,i.jsx)(n.li,{children:"All data a strategy has received (events/updates) is stored in Cache."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Portfolio"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Aggregated position/exposure and account information."}),"\n",(0,i.jsx)(n.li,{children:"Provides current state without history."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class MyStrategy(Strategy):\n    def on_position_changed(self, event: PositionEvent) -> None:\n        # Use Cache when you need historical perspective\n        position_history = self.cache.position_snapshots(event.position_id)\n\n        # Use Portfolio when you need current real-time state\n        current_exposure = self.portfolio.net_exposure(event.instrument_id)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"cache-vs-strategy-variables",children:"Cache vs. Strategy variables"}),"\n",(0,i.jsxs)(n.p,{children:["Choosing between storing data in the ",(0,i.jsx)(n.code,{children:"Cache"})," versus strategy variables depends on your specific needs:"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cache Storage"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use for data that needs to be shared between strategies."}),"\n",(0,i.jsx)(n.li,{children:"Best for data that needs to persist between system restarts."}),"\n",(0,i.jsx)(n.li,{children:"Acts as a central database accessible to all components."}),"\n",(0,i.jsx)(n.li,{children:"Ideal for state that needs to survive strategy resets."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Strategy Variables"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use for strategy-specific calculations."}),"\n",(0,i.jsx)(n.li,{children:"Better for temporary values and intermediate results."}),"\n",(0,i.jsx)(n.li,{children:"Provides faster access and better encapsulation."}),"\n",(0,i.jsx)(n.li,{children:"Best for data that only your strategy needs."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsxs)(n.p,{children:["Example that clarifies how you might store data in the ",(0,i.jsx)(n.code,{children:"Cache"})," so multiple strategies can access the same information."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import pickle\n\nclass MyStrategy(Strategy):\n    def on_start(self):\n        # Prepare data you want to share with other strategies\n        shared_data = {\n            "last_reset": self.clock.timestamp_ns(),\n            "trading_enabled": True,\n            # Include any other fields that you want other strategies to read\n        }\n\n        # Store it in the cache with a descriptive key\n        # This way, multiple strategies can call self.cache.get("shared_strategy_info")\n        # to retrieve the same data\n        self.cache.add("shared_strategy_info", pickle.dumps(shared_data))\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"How another strategy (running in parallel) can retrieve cached data above:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import pickle\n\nclass AnotherStrategy(Strategy):\n    def on_start(self):\n        # Load the shared data from the same key\n        data_bytes = self.cache.get("shared_strategy_info")\n        if data_bytes is not None:\n            shared_data = pickle.loads(data_bytes)\n            self.log.info(f"Shared data retrieved: {shared_data}")\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},9087:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(6363);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);