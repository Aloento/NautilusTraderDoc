"use strict";(globalThis.webpackChunknautilus_trader=globalThis.webpackChunknautilus_trader||[]).push([[685],{7548:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"tutorials/backtest_fx_bars","title":"Backtest: FX bar data","description":"Tutorial for NautilusTrader a high-performance algorithmic trading platform and event driven backtester.","source":"@site/docs/tutorials/backtest_fx_bars.md","sourceDirName":"tutorials","slug":"/tutorials/backtest_fx_bars","permalink":"/tutorials/backtest_fx_bars","draft":false,"unlisted":false,"editUrl":"https://github.com/Aloento/NautilusTraderDoc/tree/main/docs/tutorials/backtest_fx_bars.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Backtest: Bybit OrderBook data","permalink":"/tutorials/backtest_bybit_orderbook"},"next":{"title":"Databento data catalog","permalink":"/tutorials/databento_data_catalog"}}');var a=n(7259),i=n(9087);const s={},l="Backtest: FX bar data",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Imports",id:"imports",level:2},{value:"Set up backtest engine",id:"set-up-backtest-engine",level:2},{value:"Add simulation module",id:"add-simulation-module",level:2},{value:"Add fill model",id:"add-fill-model",level:2},{value:"Add venue",id:"add-venue",level:2},{value:"Add instruments and data",id:"add-instruments-and-data",level:2},{value:"Configure strategy",id:"configure-strategy",level:2},{value:"Run backtest",id:"run-backtest",level:2},{value:"Generating reports",id:"generating-reports",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"backtest-fx-bar-data",children:"Backtest: FX bar data"})}),"\n",(0,a.jsxs)(t.p,{children:["Tutorial for ",(0,a.jsx)(t.a,{href:"https://nautilustrader.io/docs/",children:"NautilusTrader"})," a high-performance algorithmic trading platform and event driven backtester."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://github.com/nautechsystems/nautilus_trader/blob/develop/docs/tutorials/backtest_fx_bars.ipynb",children:"View source on GitHub"}),"."]}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsx)(t.p,{children:"We are currently working on this tutorial."})}),"\n",(0,a.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(t.p,{children:["This tutorial runs through how to set up a ",(0,a.jsx)(t.code,{children:"BacktestEngine"})," (low-level API) for a single 'one-shot' backtest run using FX bar data."]}),"\n",(0,a.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Python 3.11+ installed"}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"https://jupyter.org/",children:"JupyterLab"})," or similar installed (",(0,a.jsx)(t.code,{children:"pip install -U jupyterlab"}),")"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"https://pypi.org/project/nautilus_trader/",children:"NautilusTrader"})," latest release installed (",(0,a.jsx)(t.code,{children:"pip install -U nautilus_trader"}),")"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"imports",children:"Imports"}),"\n",(0,a.jsx)(t.p,{children:"We'll start with all of our imports for the remainder of this tutorial."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"from decimal import Decimal\n\nfrom nautilus_trader.backtest.config import BacktestEngineConfig\nfrom nautilus_trader.backtest.engine import BacktestEngine\nfrom nautilus_trader.backtest.models import FillModel\nfrom nautilus_trader.backtest.modules import FXRolloverInterestConfig\nfrom nautilus_trader.backtest.modules import FXRolloverInterestModule\nfrom nautilus_trader.config import LoggingConfig\nfrom nautilus_trader.config import RiskEngineConfig\nfrom nautilus_trader.examples.strategies.ema_cross import EMACross\nfrom nautilus_trader.examples.strategies.ema_cross import EMACrossConfig\nfrom nautilus_trader.model import BarType\nfrom nautilus_trader.model import Money\nfrom nautilus_trader.model import Venue\nfrom nautilus_trader.model.currencies import JPY\nfrom nautilus_trader.model.currencies import USD\nfrom nautilus_trader.model.enums import AccountType\nfrom nautilus_trader.model.enums import OmsType\nfrom nautilus_trader.persistence.wranglers import QuoteTickDataWrangler\nfrom nautilus_trader.test_kit.providers import TestDataProvider\nfrom nautilus_trader.test_kit.providers import TestInstrumentProvider\n"})}),"\n",(0,a.jsx)(t.h2,{id:"set-up-backtest-engine",children:"Set up backtest engine"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# Initialize a backtest configuration\nconfig = BacktestEngineConfig(\n    trader_id="BACKTESTER-001",\n    logging=LoggingConfig(log_level="ERROR"),\n    risk_engine=RiskEngineConfig(\n        bypass=True,  # Example of bypassing pre-trade risk checks for backtests\n    ),\n)\n\n# Build backtest engine\nengine = BacktestEngine(config=config)\n'})}),"\n",(0,a.jsx)(t.h2,{id:"add-simulation-module",children:"Add simulation module"}),"\n",(0,a.jsx)(t.p,{children:"We can optionally plug in a module to simulate rollover interest. The data is available from pre-packaged test data."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'provider = TestDataProvider()\ninterest_rate_data = provider.read_csv("short-term-interest.csv")\nconfig = FXRolloverInterestConfig(interest_rate_data)\nfx_rollover_interest = FXRolloverInterestModule(config=config)\n'})}),"\n",(0,a.jsx)(t.h2,{id:"add-fill-model",children:"Add fill model"}),"\n",(0,a.jsx)(t.p,{children:"For this backtest we'll use a simple probabilistic fill model."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"fill_model = FillModel(\n    prob_fill_on_limit=0.2,\n    prob_fill_on_stop=0.95,\n    prob_slippage=0.5,\n    random_seed=42,\n)\n"})}),"\n",(0,a.jsx)(t.h2,{id:"add-venue",children:"Add venue"}),"\n",(0,a.jsx)(t.p,{children:"For this backtest we just need a single trading venue which will be a similated FX ECN."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'SIM = Venue("SIM")\nengine.add_venue(\n    venue=SIM,\n    oms_type=OmsType.HEDGING,  # Venue will generate position IDs\n    account_type=AccountType.MARGIN,\n    base_currency=None,  # Multi-currency account\n    starting_balances=[Money(1_000_000, USD), Money(10_000_000, JPY)],\n    fill_model=fill_model,\n    modules=[fx_rollover_interest],\n)\n'})}),"\n",(0,a.jsx)(t.h2,{id:"add-instruments-and-data",children:"Add instruments and data"}),"\n",(0,a.jsxs)(t.p,{children:["Now we can add instruments and data. For this backtest we'll pre-process bid and ask side bar data into quotes using a ",(0,a.jsx)(t.code,{children:"QuoteTickDataWrangler"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# Add instruments\nUSDJPY_SIM = TestInstrumentProvider.default_fx_ccy("USD/JPY", SIM)\nengine.add_instrument(USDJPY_SIM)\n\n# Add data\nwrangler = QuoteTickDataWrangler(instrument=USDJPY_SIM)\nticks = wrangler.process_bar_data(\n    bid_data=provider.read_csv_bars("fxcm/usdjpy-m1-bid-2013.csv"),\n    ask_data=provider.read_csv_bars("fxcm/usdjpy-m1-ask-2013.csv"),\n)\nengine.add_data(ticks)\n'})}),"\n",(0,a.jsx)(t.h2,{id:"configure-strategy",children:"Configure strategy"}),"\n",(0,a.jsxs)(t.p,{children:["Next we'll configure and initialize a simple ",(0,a.jsx)(t.code,{children:"EMACross"})," strategy we'll use for the backtest."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# Configure your strategy\nconfig = EMACrossConfig(\n    instrument_id=USDJPY_SIM.id,\n    bar_type=BarType.from_str("USD/JPY.SIM-5-MINUTE-BID-INTERNAL"),\n    fast_ema_period=10,\n    slow_ema_period=20,\n    trade_size=Decimal(1_000_000),\n)\n\n# Instantiate and add your strategy\nstrategy = EMACross(config=config)\nengine.add_strategy(strategy=strategy)\n'})}),"\n",(0,a.jsx)(t.h2,{id:"run-backtest",children:"Run backtest"}),"\n",(0,a.jsx)(t.p,{children:"We now have everything required to run the backtest. Once the engine has completed running through all the data, a post-analysis report will be logged."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"engine.run()\n"})}),"\n",(0,a.jsx)(t.h2,{id:"generating-reports",children:"Generating reports"}),"\n",(0,a.jsx)(t.p,{children:"Additionally, we can produce various reports to further analyze the backtest result."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"engine.trader.generate_account_report(SIM)\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"engine.trader.generate_order_fills_report()\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"engine.trader.generate_positions_report()\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},9087:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var r=n(6363);const a={},i=r.createContext(a);function s(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);