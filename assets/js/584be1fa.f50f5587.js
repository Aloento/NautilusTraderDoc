"use strict";(globalThis.webpackChunknautilus_trader=globalThis.webpackChunknautilus_trader||[]).push([[8551],{7491:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"integrations/ib","title":"Interactive Brokers","description":"Interactive Brokers (IB) is a trading platform providing market access across a wide range of financial instruments, including stocks, options, futures, currencies, bonds, funds, and cryptocurrencies. NautilusTrader offers an adapter to integrate with IB using their Trader Workstation (TWS) API through their Python library, ibapi.","source":"@site/docs/integrations/ib.md","sourceDirName":"integrations","slug":"/integrations/ib","permalink":"/integrations/ib","draft":false,"unlisted":false,"editUrl":"https://github.com/Aloento/NautilusTraderDoc/tree/main/docs/integrations/ib.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Hyperliquid","permalink":"/integrations/hyperliquid"},"next":{"title":"OKX","permalink":"/integrations/okx"}}');var t=i(7259),s=i(9087);const o={},c="Interactive Brokers",a={},d=[{value:"Installation",id:"installation",level:2},{value:"Examples",id:"examples",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Connection methods",id:"connection-methods",level:3},{value:"Default ports",id:"default-ports",level:3},{value:"Establish connection to an existing gateway or TWS",id:"establish-connection-to-an-existing-gateway-or-tws",level:3},{value:"Establish connection to Dockerized IB Gateway",id:"establish-connection-to-dockerized-ib-gateway",level:3},{value:"Environment variables",id:"environment-variables",level:3},{value:"Connection management",id:"connection-management",level:3},{value:"Overview",id:"overview",level:2},{value:"Core components",id:"core-components",level:3},{value:"Supporting components",id:"supporting-components",level:3},{value:"Supported asset classes",id:"supported-asset-classes",level:3},{value:"The Interactive Brokers client",id:"the-interactive-brokers-client",level:2},{value:"Client architecture",id:"client-architecture",level:3},{value:"Connection management (<code>InteractiveBrokersClientConnectionMixin</code>)",id:"connection-management-interactivebrokersclientconnectionmixin",level:4},{value:"Error handling (<code>InteractiveBrokersClientErrorMixin</code>)",id:"error-handling-interactivebrokersclienterrormixin",level:4},{value:"Account management (<code>InteractiveBrokersClientAccountMixin</code>)",id:"account-management-interactivebrokersclientaccountmixin",level:4},{value:"Contract/instrument management (<code>InteractiveBrokersClientContractMixin</code>)",id:"contractinstrument-management-interactivebrokersclientcontractmixin",level:4},{value:"Market data management (<code>InteractiveBrokersClientMarketDataMixin</code>)",id:"market-data-management-interactivebrokersclientmarketdatamixin",level:4},{value:"Order management (<code>InteractiveBrokersClientOrderMixin</code>)",id:"order-management-interactivebrokersclientordermixin",level:4},{value:"Key features",id:"key-features",level:3},{value:"Symbology",id:"symbology",level:2},{value:"Symbology methods",id:"symbology-methods",level:3},{value:"1. Simplified symbology (<code>IB_SIMPLIFIED</code>) - default",id:"1-simplified-symbology-ib_simplified---default",level:4},{value:"2. Raw symbology (<code>IB_RAW</code>)",id:"2-raw-symbology-ib_raw",level:4},{value:"MIC venue conversion",id:"mic-venue-conversion",level:3},{value:"<code>convert_exchange_to_mic_venue</code>",id:"convert_exchange_to_mic_venue",level:4},{value:"<code>symbol_to_mic_venue</code>",id:"symbol_to_mic_venue",level:4},{value:"Supported instrument formats",id:"supported-instrument-formats",level:3},{value:"Futures month codes",id:"futures-month-codes",level:4},{value:"Supported exchanges by asset class",id:"supported-exchanges-by-asset-class",level:4},{value:"Choosing the right symbology method",id:"choosing-the-right-symbology-method",level:3},{value:"Instruments and contracts",id:"instruments-and-contracts",level:2},{value:"Contract types",id:"contract-types",level:3},{value:"Basic contract (<code>IBContract</code>)",id:"basic-contract-ibcontract",level:4},{value:"Contract details (<code>IBContractDetails</code>)",id:"contract-details-ibcontractdetails",level:4},{value:"Contract discovery",id:"contract-discovery",level:3},{value:"Loading instruments",id:"loading-instruments",level:3},{value:"1. Using <code>load_ids</code> (recommended)",id:"1-using-load_ids-recommended",level:4},{value:"2. Using <code>load_contracts</code> (for complex instruments)",id:"2-using-load_contracts-for-complex-instruments",level:4},{value:"IBContract examples by asset class",id:"ibcontract-examples-by-asset-class",level:3},{value:"Advanced configuration options",id:"advanced-configuration-options",level:3},{value:"Continuous futures",id:"continuous-futures",level:3},{value:"Option spreads",id:"option-spreads",level:2},{value:"Creating option spread instrument IDs",id:"creating-option-spread-instrument-ids",level:3},{value:"Dynamic spread loading",id:"dynamic-spread-loading",level:3},{value:"Spread trading requirements",id:"spread-trading-requirements",level:3},{value:"Historical data and backtesting",id:"historical-data-and-backtesting",level:2},{value:"Supported data types",id:"supported-data-types",level:3},{value:"Historical data client",id:"historical-data-client",level:3},{value:"Retrieving instruments",id:"retrieving-instruments",level:3},{value:"Basic instrument retrieval",id:"basic-instrument-retrieval",level:4},{value:"Option chain retrieval with catalog storage",id:"option-chain-retrieval-with-catalog-storage",level:4},{value:"Retrieving historical bars",id:"retrieving-historical-bars",level:3},{value:"Retrieving historical ticks",id:"retrieving-historical-ticks",level:3},{value:"Bar specifications",id:"bar-specifications",level:3},{value:"Time-based bars",id:"time-based-bars",level:4},{value:"Price types",id:"price-types",level:4},{value:"Complete example",id:"complete-example",level:3},{value:"Data limitations",id:"data-limitations",level:3},{value:"Best practices",id:"best-practices",level:3},{value:"Live trading",id:"live-trading",level:2},{value:"Architecture overview",id:"architecture-overview",level:3},{value:"InstrumentProvider configuration",id:"instrumentprovider-configuration",level:3},{value:"Basic configuration",id:"basic-configuration",level:4},{value:"Advanced configuration for derivatives",id:"advanced-configuration-for-derivatives",level:4},{value:"Integration with external data providers",id:"integration-with-external-data-providers",level:3},{value:"Data client configuration",id:"data-client-configuration",level:3},{value:"Supported data types",id:"supported-data-types-1",level:4},{value:"Market data types",id:"market-data-types",level:4},{value:"Basic data client configuration",id:"basic-data-client-configuration",level:4},{value:"Advanced data client configuration",id:"advanced-data-client-configuration",level:4},{value:"Data client configuration options",id:"data-client-configuration-options",level:3},{value:"Notes",id:"notes",level:4},{value:"Execution client configuration options",id:"execution-client-configuration-options",level:3},{value:"Execution client configuration",id:"execution-client-configuration",level:3},{value:"Supported functionality",id:"supported-functionality",level:4},{value:"Supported order types",id:"supported-order-types",level:4},{value:"Time in force options",id:"time-in-force-options",level:4},{value:"Batch operations",id:"batch-operations",level:4},{value:"Position management",id:"position-management",level:4},{value:"Order querying",id:"order-querying",level:4},{value:"Contingent orders",id:"contingent-orders",level:4},{value:"Basic execution client configuration",id:"basic-execution-client-configuration",level:4},{value:"Advanced execution client configuration",id:"advanced-execution-client-configuration",level:4},{value:"Account ID configuration",id:"account-id-configuration",level:4},{value:"Order tags and advanced features",id:"order-tags-and-advanced-features",level:4},{value:"OCA (one-cancels-all) orders",id:"oca-one-cancels-all-orders",level:4},{value:"Basic OCA configuration",id:"basic-oca-configuration",level:3},{value:"Advanced OCA configuration",id:"advanced-oca-configuration",level:3},{value:"OCA types",id:"oca-types",level:3},{value:"Multiple orders in same OCA group",id:"multiple-orders-in-same-oca-group",level:4},{value:"OCA configuration requirements",id:"oca-configuration-requirements",level:3},{value:"Conditional orders",id:"conditional-orders",level:3},{value:"Supported condition types",id:"supported-condition-types",level:4},{value:"Basic conditional order example",id:"basic-conditional-order-example",level:4},{value:"Multiple conditions with logic",id:"multiple-conditions-with-logic",level:4},{value:"Condition parameters",id:"condition-parameters",level:4},{value:"Complete example: all condition types",id:"complete-example-all-condition-types",level:4},{value:"Order behavior",id:"order-behavior",level:4},{value:"Implementation notes",id:"implementation-notes",level:4},{value:"Complete trading node configuration",id:"complete-trading-node-configuration",level:3},{value:"Paper trading configuration",id:"paper-trading-configuration",level:4},{value:"Live trading with Dockerized gateway",id:"live-trading-with-dockerized-gateway",level:2},{value:"Multi-client configuration",id:"multi-client-configuration",level:3},{value:"Running the trading node",id:"running-the-trading-node",level:3},{value:"Additional configuration options",id:"additional-configuration-options",level:3},{value:"Environment variables",id:"environment-variables-1",level:4},{value:"Logging configuration",id:"logging-configuration",level:4},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common connection issues",id:"common-connection-issues",level:3},{value:"Connection refused",id:"connection-refused",level:4},{value:"Authentication errors",id:"authentication-errors",level:4},{value:"Client ID conflicts",id:"client-id-conflicts",level:4},{value:"Market data permissions",id:"market-data-permissions",level:4},{value:"Error codes",id:"error-codes",level:3},{value:"Performance optimization",id:"performance-optimization",level:3},{value:"Reduce data volume",id:"reduce-data-volume",level:4},{value:"Connection management",id:"connection-management-1",level:4},{value:"Memory management",id:"memory-management",level:4},{value:"Best practices",id:"best-practices-1",level:3},{value:"Security",id:"security",level:4},{value:"Development workflow",id:"development-workflow",level:4},{value:"Production deployment",id:"production-deployment",level:4},{value:"Order management",id:"order-management",level:4},{value:"Debugging tips",id:"debugging-tips",level:3},{value:"Enable debug logging",id:"enable-debug-logging",level:4},{value:"Monitor connection status",id:"monitor-connection-status",level:4},{value:"Validate instruments",id:"validate-instruments",level:4},{value:"Support and resources",id:"support-and-resources",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"interactive-brokers",children:"Interactive Brokers"})}),"\n",(0,t.jsxs)(n.p,{children:["Interactive Brokers (IB) is a trading platform providing market access across a wide range of financial instruments, including stocks, options, futures, currencies, bonds, funds, and cryptocurrencies. NautilusTrader offers an adapter to integrate with IB using their ",(0,t.jsx)(n.a,{href:"https://ibkrcampus.com/ibkr-api-page/trader-workstation-api/",children:"Trader Workstation (TWS) API"})," through their Python library, ",(0,t.jsx)(n.a,{href:"https://github.com/nautechsystems/ibapi",children:"ibapi"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The TWS API serves as an interface to IB's standalone trading applications: TWS and IB Gateway. Both can be downloaded from the IB website. If you haven't installed TWS or IB Gateway yet, refer to the ",(0,t.jsx)(n.a,{href:"https://ibkrcampus.com/ibkr-api-page/trader-workstation-api/#tws-download",children:"Initial Setup"})," guide. In NautilusTrader, you'll establish a connection to one of these applications via the ",(0,t.jsx)(n.code,{children:"InteractiveBrokersClient"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Alternatively, you can start with a ",(0,t.jsx)(n.a,{href:"https://github.com/gnzsnz/ib-gateway-docker",children:"dockerized version"})," of the IB Gateway, which is particularly useful when deploying trading strategies on a hosted cloud platform. This requires having ",(0,t.jsx)(n.a,{href:"https://www.docker.com/",children:"Docker"})," installed on your machine, along with the ",(0,t.jsx)(n.a,{href:"https://pypi.org/project/docker/",children:"docker"})," Python package, which NautilusTrader conveniently includes as an extra package."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"The standalone TWS and IB Gateway applications require manually inputting username, password, and trading mode (live or paper) at startup. The dockerized version of the IB Gateway handles these steps programmatically."})}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"To install NautilusTrader with Interactive Brokers (and Docker) support:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'pip install --upgrade "nautilus_trader[ib,docker]"\n'})}),"\n",(0,t.jsx)(n.p,{children:"To build from source with all extras (including IB and Docker):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"uv sync --all-extras\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Because IB does not provide wheels for ",(0,t.jsx)(n.code,{children:"ibapi"}),", NautilusTrader ",(0,t.jsx)(n.a,{href:"https://pypi.org/project/nautilus-ibapi/",children:"repackages"})," it for release on PyPI."]})}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(n.p,{children:["You can find live example scripts ",(0,t.jsx)(n.a,{href:"https://github.com/nautechsystems/nautilus_trader/tree/develop/examples/live/interactive_brokers/",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,t.jsxs)(n.p,{children:["Before implementing your trading strategies, make sure that either TWS (Trader Workstation) or IB Gateway is running. You can log in to one of these standalone applications with your credentials, or connect programmatically via ",(0,t.jsx)(n.code,{children:"DockerizedIBGateway"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"connection-methods",children:"Connection methods"}),"\n",(0,t.jsx)(n.p,{children:"There are two primary ways to connect to Interactive Brokers:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Connect to an existing TWS or IB Gateway instance"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Use the dockerized IB Gateway (recommended for automated deployments)"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"default-ports",children:"Default ports"}),"\n",(0,t.jsx)(n.p,{children:"Interactive Brokers uses different default ports depending on the application and trading mode:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Application"}),(0,t.jsx)(n.th,{children:"Paper Trading"}),(0,t.jsx)(n.th,{children:"Live Trading"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"TWS"}),(0,t.jsx)(n.td,{children:"7497"}),(0,t.jsx)(n.td,{children:"7496"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"IB Gateway"}),(0,t.jsx)(n.td,{children:"4002"}),(0,t.jsx)(n.td,{children:"4001"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"establish-connection-to-an-existing-gateway-or-tws",children:"Establish connection to an existing gateway or TWS"}),"\n",(0,t.jsxs)(n.p,{children:["When connecting to a pre-existing gateway or TWS, specify the ",(0,t.jsx)(n.code,{children:"ibg_host"})," and ",(0,t.jsx)(n.code,{children:"ibg_port"})," parameters in both the ",(0,t.jsx)(n.code,{children:"InteractiveBrokersDataClientConfig"})," and ",(0,t.jsx)(n.code,{children:"InteractiveBrokersExecClientConfig"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.adapters.interactive_brokers.config import InteractiveBrokersDataClientConfig\nfrom nautilus_trader.adapters.interactive_brokers.config import InteractiveBrokersExecClientConfig\n\n# Example for TWS paper trading (default port 7497)\ndata_config = InteractiveBrokersDataClientConfig(\n    ibg_host="127.0.0.1",\n    ibg_port=7497,\n    ibg_client_id=1,\n)\n\nexec_config = InteractiveBrokersExecClientConfig(\n    ibg_host="127.0.0.1",\n    ibg_port=7497,\n    ibg_client_id=1,\n    account_id="DU123456",  # Your paper trading account ID\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"establish-connection-to-dockerized-ib-gateway",children:"Establish connection to Dockerized IB Gateway"}),"\n",(0,t.jsxs)(n.p,{children:["For automated deployments, the dockerized gateway is recommended. Supply ",(0,t.jsx)(n.code,{children:"dockerized_gateway"})," with an instance of ",(0,t.jsx)(n.code,{children:"DockerizedIBGatewayConfig"})," in both client configurations. The ",(0,t.jsx)(n.code,{children:"ibg_host"})," and ",(0,t.jsx)(n.code,{children:"ibg_port"})," parameters are not needed as they're managed automatically."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.adapters.interactive_brokers.config import DockerizedIBGatewayConfig\nfrom nautilus_trader.adapters.interactive_brokers.gateway import DockerizedIBGateway\n\ngateway_config = DockerizedIBGatewayConfig(\n    username="your_username",  # Or set TWS_USERNAME env var\n    password="your_password",  # Or set TWS_PASSWORD env var\n    trading_mode="paper",      # "paper" or "live"\n    read_only_api=True,        # Set to False to allow order execution\n    timeout=300,               # Startup timeout in seconds\n)\n\n# This may take a short while to start up, especially the first time\ngateway = DockerizedIBGateway(config=gateway_config)\ngateway.start()\n\n# Confirm you are logged in\nprint(gateway.is_logged_in(gateway.container))\n\n# Inspect the logs\nprint(gateway.container.logs())\n'})}),"\n",(0,t.jsx)(n.h3,{id:"environment-variables",children:"Environment variables"}),"\n",(0,t.jsxs)(n.p,{children:["To supply credentials to the Interactive Brokers Gateway, either pass the ",(0,t.jsx)(n.code,{children:"username"})," and ",(0,t.jsx)(n.code,{children:"password"})," to the ",(0,t.jsx)(n.code,{children:"DockerizedIBGatewayConfig"}),", or set the following environment variables:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TWS_USERNAME"}),": Your IB account username."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TWS_PASSWORD"}),": Your IB account password."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TWS_ACCOUNT"}),": Your IB account ID (used as the fallback for ",(0,t.jsx)(n.code,{children:"account_id"}),")."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"connection-management",children:"Connection management"}),"\n",(0,t.jsx)(n.p,{children:"The adapter includes robust connection management features:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automatic reconnection"}),": Configure retries with the ",(0,t.jsx)(n.code,{children:"IB_MAX_CONNECTION_ATTEMPTS"})," environment variable."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Connection timeout"}),": Adjust the timeout with the ",(0,t.jsx)(n.code,{children:"connection_timeout"})," parameter (default: 300 seconds)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Connection watchdog"}),": Monitor connection health and trigger reconnection automatically when required."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Graceful error handling"}),": Handle diverse connection scenarios with comprehensive error classification."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The Interactive Brokers adapter provides a comprehensive integration with IB's TWS API. The adapter includes several major components:"}),"\n",(0,t.jsx)(n.h3,{id:"core-components",children:"Core components"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"InteractiveBrokersClient"})}),": The central client that executes TWS API requests using ",(0,t.jsx)(n.code,{children:"ibapi"}),". Manages connections, handles errors, and coordinates all API interactions."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"InteractiveBrokersDataClient"})}),": Connects to the Gateway for streaming market data including quotes, trades, and bars."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"InteractiveBrokersExecutionClient"})}),": Handles account information, order management, and trade execution."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"InteractiveBrokersInstrumentProvider"})}),": Retrieves and manages instrument definitions, including support for options and futures chains."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"HistoricInteractiveBrokersClient"})}),": Provides methods for retrieving instruments and historical data, useful for backtesting and research."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"supporting-components",children:"Supporting components"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"DockerizedIBGateway"})}),": Manages dockerized IB Gateway instances for automated deployments."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Configuration classes"}),": Provide comprehensive configuration options for all components."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Factory classes"}),": Create and configure client instances with the necessary dependencies."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"supported-asset-classes",children:"Supported asset classes"}),"\n",(0,t.jsx)(n.p,{children:"The adapter supports trading across all major asset classes available through Interactive Brokers:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Equities"}),": Stocks, ETFs, and equity options."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fixed income"}),": Bonds and bond funds."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Derivatives"}),": Futures, options, and warrants."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Foreign exchange"}),": Spot FX and FX forwards."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cryptocurrencies"}),": Bitcoin, Ethereum, and other digital assets."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Commodities"}),": Physical commodities and commodity futures."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Indices"}),": Index products and index options."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"the-interactive-brokers-client",children:"The Interactive Brokers client"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"InteractiveBrokersClient"})," serves as the central component of the IB adapter, overseeing a range of critical functions. These include establishing and maintaining connections, handling API errors, executing trades, and gathering various types of data such as market data, contract/instrument data, and account details."]}),"\n",(0,t.jsxs)(n.p,{children:["To ensure efficient management of these diverse responsibilities, the ",(0,t.jsx)(n.code,{children:"InteractiveBrokersClient"})," is divided into several specialized mixin classes. This modular approach enhances manageability and clarity."]}),"\n",(0,t.jsx)(n.h3,{id:"client-architecture",children:"Client architecture"}),"\n",(0,t.jsx)(n.p,{children:"The client uses a mixin-based architecture where each mixin handles a specific aspect of the IB API:"}),"\n",(0,t.jsxs)(n.h4,{id:"connection-management-interactivebrokersclientconnectionmixin",children:["Connection management (",(0,t.jsx)(n.code,{children:"InteractiveBrokersClientConnectionMixin"}),")"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Establishes and maintains socket connections to TWS/Gateway."}),"\n",(0,t.jsx)(n.li,{children:"Handles connection timeouts and reconnection logic."}),"\n",(0,t.jsx)(n.li,{children:"Manages connection state and health monitoring."}),"\n",(0,t.jsxs)(n.li,{children:["Supports configurable reconnection attempts via ",(0,t.jsx)(n.code,{children:"IB_MAX_CONNECTION_ATTEMPTS"})," environment variable."]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"error-handling-interactivebrokersclienterrormixin",children:["Error handling (",(0,t.jsx)(n.code,{children:"InteractiveBrokersClientErrorMixin"}),")"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Processes all API errors and warnings."}),"\n",(0,t.jsx)(n.li,{children:"Categorizes errors by type (client errors, connectivity issues, request errors)."}),"\n",(0,t.jsx)(n.li,{children:"Handles subscription and request-specific error scenarios."}),"\n",(0,t.jsx)(n.li,{children:"Provides comprehensive error logging and debugging information."}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"account-management-interactivebrokersclientaccountmixin",children:["Account management (",(0,t.jsx)(n.code,{children:"InteractiveBrokersClientAccountMixin"}),")"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Retrieves account information and balances."}),"\n",(0,t.jsx)(n.li,{children:"Manages position data and portfolio updates."}),"\n",(0,t.jsx)(n.li,{children:"Handles multi-account scenarios."}),"\n",(0,t.jsx)(n.li,{children:"Processes account-related notifications."}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"contractinstrument-management-interactivebrokersclientcontractmixin",children:["Contract/instrument management (",(0,t.jsx)(n.code,{children:"InteractiveBrokersClientContractMixin"}),")"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Retrieves contract details and specifications."}),"\n",(0,t.jsx)(n.li,{children:"Handles instrument searches and lookups."}),"\n",(0,t.jsx)(n.li,{children:"Manages contract validation and verification."}),"\n",(0,t.jsx)(n.li,{children:"Supports complex instrument types (options chains, futures chains)."}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"market-data-management-interactivebrokersclientmarketdatamixin",children:["Market data management (",(0,t.jsx)(n.code,{children:"InteractiveBrokersClientMarketDataMixin"}),")"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Handles real-time and historical market data subscriptions."}),"\n",(0,t.jsx)(n.li,{children:"Processes quotes, trades, and bar data."}),"\n",(0,t.jsx)(n.li,{children:"Manages market data type settings (real-time, delayed, frozen)."}),"\n",(0,t.jsx)(n.li,{children:"Handles tick-by-tick data and market depth."}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"order-management-interactivebrokersclientordermixin",children:["Order management (",(0,t.jsx)(n.code,{children:"InteractiveBrokersClientOrderMixin"}),")"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Processes order placement, modification, and cancellation."}),"\n",(0,t.jsx)(n.li,{children:"Handles order status updates and execution reports."}),"\n",(0,t.jsx)(n.li,{children:"Manages order validation and error handling."}),"\n",(0,t.jsx)(n.li,{children:"Supports complex order types and conditions."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"key-features",children:"Key features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Asynchronous operation"}),": All operations are fully asynchronous using Python's asyncio."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Robust error handling"}),": Comprehensive error categorization and handling."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Connection resilience"}),": Automatic reconnection with configurable retry logic."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Message processing"}),": Efficient message queue processing for high-throughput scenarios."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"State management"}),": Proper state tracking for connections, subscriptions, and requests."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["To troubleshoot TWS API incoming message issues, consider starting at the ",(0,t.jsx)(n.code,{children:"InteractiveBrokersClient._process_message"})," method, which acts as the primary gateway for processing all messages received from the API."]})}),"\n",(0,t.jsx)(n.h2,{id:"symbology",children:"Symbology"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"InteractiveBrokersInstrumentProvider"})," supports three methods for constructing ",(0,t.jsx)(n.code,{children:"InstrumentId"})," instances, which can be configured via the ",(0,t.jsx)(n.code,{children:"symbology_method"})," enum in ",(0,t.jsx)(n.code,{children:"InteractiveBrokersInstrumentProviderConfig"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"symbology-methods",children:"Symbology methods"}),"\n",(0,t.jsxs)(n.h4,{id:"1-simplified-symbology-ib_simplified---default",children:["1. Simplified symbology (",(0,t.jsx)(n.code,{children:"IB_SIMPLIFIED"}),") - default"]}),"\n",(0,t.jsxs)(n.p,{children:["When ",(0,t.jsx)(n.code,{children:"symbology_method"})," is set to ",(0,t.jsx)(n.code,{children:"IB_SIMPLIFIED"})," (the default setting), the system uses intuitive, human-readable symbology rules:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Format Rules by Asset Class:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Forex"}),": ",(0,t.jsx)(n.code,{children:"{symbol}/{currency}.{exchange}"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"EUR/USD.IDEALPRO"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Stocks"}),": ",(0,t.jsx)(n.code,{children:"{localSymbol}.{primaryExchange}"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Spaces in localSymbol are replaced with hyphens"}),"\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"BF-B.NYSE"}),", ",(0,t.jsx)(n.code,{children:"SPY.ARCA"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Futures"}),": ",(0,t.jsx)(n.code,{children:"{localSymbol}.{exchange}"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Individual contracts use single digit years"}),"\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"ESM4.CME"}),", ",(0,t.jsx)(n.code,{children:"CLZ7.NYMEX"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Continuous Futures"}),": ",(0,t.jsx)(n.code,{children:"{symbol}.{exchange}"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Represents front month, automatically rolling"}),"\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"ES.CME"}),", ",(0,t.jsx)(n.code,{children:"CL.NYMEX"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Options on Futures (FOP)"}),": ",(0,t.jsx)(n.code,{children:"{localSymbol}.{exchange}"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Format: ",(0,t.jsx)(n.code,{children:"{symbol}{month}{year} {right}{strike}"})]}),"\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"ESM4 C4200.CME"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Options"}),": ",(0,t.jsx)(n.code,{children:"{localSymbol}.{exchange}"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"All spaces removed from localSymbol"}),"\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"AAPL230217P00155000.SMART"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Indices"}),": ",(0,t.jsx)(n.code,{children:"^{localSymbol}.{exchange}"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"^SPX.CBOE"}),", ",(0,t.jsx)(n.code,{children:"^NDX.NASDAQ"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bonds"}),": ",(0,t.jsx)(n.code,{children:"{localSymbol}.{exchange}"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"912828XE8.SMART"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cryptocurrencies"}),": ",(0,t.jsx)(n.code,{children:"{symbol}/{currency}.{exchange}"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"BTC/USD.PAXOS"}),", ",(0,t.jsx)(n.code,{children:"ETH/USD.PAXOS"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"2-raw-symbology-ib_raw",children:["2. Raw symbology (",(0,t.jsx)(n.code,{children:"IB_RAW"}),")"]}),"\n",(0,t.jsxs)(n.p,{children:["Setting ",(0,t.jsx)(n.code,{children:"symbology_method"})," to ",(0,t.jsx)(n.code,{children:"IB_RAW"})," enforces stricter parsing rules that align directly with the fields defined in the IB API. This method provides maximum compatibility across all regions and instrument types:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Format Rules:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CFDs"}),": ",(0,t.jsx)(n.code,{children:"{localSymbol}={secType}.IBCFD"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Commodities"}),": ",(0,t.jsx)(n.code,{children:"{localSymbol}={secType}.IBCMDTY"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Default for Other Types"}),": ",(0,t.jsx)(n.code,{children:"{localSymbol}={secType}.{exchange}"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"IBUS30=CFD.IBCFD"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"XAUUSD=CMDTY.IBCMDTY"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"AAPL=STK.SMART"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This configuration ensures explicit instrument identification and supports instruments from any region, especially those with non-standard symbology where simplified parsing may fail."}),"\n",(0,t.jsx)(n.h3,{id:"mic-venue-conversion",children:"MIC venue conversion"}),"\n",(0,t.jsx)(n.p,{children:"The adapter supports converting Interactive Brokers exchange codes to Market Identifier Codes (MIC) for standardized venue identification:"}),"\n",(0,t.jsx)(n.h4,{id:"convert_exchange_to_mic_venue",children:(0,t.jsx)(n.code,{children:"convert_exchange_to_mic_venue"})}),"\n",(0,t.jsxs)(n.p,{children:["When set to ",(0,t.jsx)(n.code,{children:"True"}),", the adapter automatically converts IB exchange codes to their corresponding MIC codes:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"instrument_provider_config = InteractiveBrokersInstrumentProviderConfig(\n    convert_exchange_to_mic_venue=True,  # Enable MIC conversion\n    symbology_method=SymbologyMethod.IB_SIMPLIFIED,\n)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples of MIC Conversion:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CME"})," \u2192 ",(0,t.jsx)(n.code,{children:"XCME"})," (Chicago Mercantile Exchange)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"NASDAQ"})," \u2192 ",(0,t.jsx)(n.code,{children:"XNAS"})," (Nasdaq Stock Market)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"NYSE"})," \u2192 ",(0,t.jsx)(n.code,{children:"XNYS"})," (New York Stock Exchange)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"LSE"})," \u2192 ",(0,t.jsx)(n.code,{children:"XLON"})," (London Stock Exchange)"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"symbol_to_mic_venue",children:(0,t.jsx)(n.code,{children:"symbol_to_mic_venue"})}),"\n",(0,t.jsxs)(n.p,{children:["For custom venue mapping, use the ",(0,t.jsx)(n.code,{children:"symbol_to_mic_venue"})," dictionary to override default conversions:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'instrument_provider_config = InteractiveBrokersInstrumentProviderConfig(\n    convert_exchange_to_mic_venue=True,\n    symbol_to_mic_venue={\n        "ES": "XCME",  # All ES futures/options use CME MIC\n        "SPY": "ARCX", # SPY specifically uses ARCA\n    },\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"supported-instrument-formats",children:"Supported instrument formats"}),"\n",(0,t.jsx)(n.p,{children:"The adapter supports various instrument formats based on Interactive Brokers' contract specifications:"}),"\n",(0,t.jsx)(n.h4,{id:"futures-month-codes",children:"Futures month codes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"F"})," = January, ",(0,t.jsx)(n.strong,{children:"G"})," = February, ",(0,t.jsx)(n.strong,{children:"H"})," = March, ",(0,t.jsx)(n.strong,{children:"J"})," = April"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"K"})," = May, ",(0,t.jsx)(n.strong,{children:"M"})," = June, ",(0,t.jsx)(n.strong,{children:"N"})," = July, ",(0,t.jsx)(n.strong,{children:"Q"})," = August"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"U"})," = September, ",(0,t.jsx)(n.strong,{children:"V"})," = October, ",(0,t.jsx)(n.strong,{children:"X"})," = November, ",(0,t.jsx)(n.strong,{children:"Z"})," = December"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"supported-exchanges-by-asset-class",children:"Supported exchanges by asset class"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Futures Exchanges:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CME"}),", ",(0,t.jsx)(n.code,{children:"CBOT"}),", ",(0,t.jsx)(n.code,{children:"NYMEX"}),", ",(0,t.jsx)(n.code,{children:"COMEX"}),", ",(0,t.jsx)(n.code,{children:"KCBT"}),", ",(0,t.jsx)(n.code,{children:"MGE"}),", ",(0,t.jsx)(n.code,{children:"NYBOT"}),", ",(0,t.jsx)(n.code,{children:"SNFE"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Options Exchanges:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"SMART"})," (IB's smart routing)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Forex Exchanges:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"IDEALPRO"})," (IB's forex platform)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Cryptocurrency Exchanges:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"PAXOS"})," (IB's crypto platform)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"CFD/Commodity Exchanges:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"IBCFD"}),", ",(0,t.jsx)(n.code,{children:"IBCMDTY"})," (IB's internal routing)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"choosing-the-right-symbology-method",children:"Choosing the right symbology method"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Use ",(0,t.jsx)(n.code,{children:"IB_SIMPLIFIED"})]})," (default) for most use cases - provides clean, readable instrument IDs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Use ",(0,t.jsx)(n.code,{children:"IB_RAW"})]})," when dealing with complex international instruments or when simplified parsing fails"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Enable ",(0,t.jsx)(n.code,{children:"convert_exchange_to_mic_venue"})]})," when you need standardized MIC venue codes for compliance or data consistency"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"instruments-and-contracts",children:"Instruments and contracts"}),"\n",(0,t.jsxs)(n.p,{children:["In Interactive Brokers, a NautilusTrader ",(0,t.jsx)(n.code,{children:"Instrument"})," corresponds to an IB ",(0,t.jsx)(n.a,{href:"https://ibkrcampus.com/ibkr-api-page/trader-workstation-api/#contracts",children:"Contract"}),". The adapter handles two types of contract representations:"]}),"\n",(0,t.jsx)(n.h3,{id:"contract-types",children:"Contract types"}),"\n",(0,t.jsxs)(n.h4,{id:"basic-contract-ibcontract",children:["Basic contract (",(0,t.jsx)(n.code,{children:"IBContract"}),")"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Contains essential contract identification fields"}),"\n",(0,t.jsx)(n.li,{children:"Used for contract searches and basic operations"}),"\n",(0,t.jsxs)(n.li,{children:["Cannot be directly converted to a NautilusTrader ",(0,t.jsx)(n.code,{children:"Instrument"})]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"contract-details-ibcontractdetails",children:["Contract details (",(0,t.jsx)(n.code,{children:"IBContractDetails"}),")"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Contains comprehensive contract information including:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Order types supported"}),"\n",(0,t.jsx)(n.li,{children:"Trading hours and calendar"}),"\n",(0,t.jsx)(n.li,{children:"Margin requirements"}),"\n",(0,t.jsx)(n.li,{children:"Price increments and multipliers"}),"\n",(0,t.jsx)(n.li,{children:"Market data permissions"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Can be converted to a NautilusTrader ",(0,t.jsx)(n.code,{children:"Instrument"})]}),"\n",(0,t.jsx)(n.li,{children:"Required for trading operations"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"contract-discovery",children:"Contract discovery"}),"\n",(0,t.jsxs)(n.p,{children:["To search for contract information, use the ",(0,t.jsx)(n.a,{href:"https://pennies.interactivebrokers.com/cstools/contract_info/",children:"IB Contract Information Center"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"loading-instruments",children:"Loading instruments"}),"\n",(0,t.jsx)(n.p,{children:"There are two primary methods for loading instruments:"}),"\n",(0,t.jsxs)(n.h4,{id:"1-using-load_ids-recommended",children:["1. Using ",(0,t.jsx)(n.code,{children:"load_ids"})," (recommended)"]}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"symbology_method=SymbologyMethod.IB_SIMPLIFIED"})," (default) with ",(0,t.jsx)(n.code,{children:"load_ids"})," for clean, intuitive instrument identification:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.adapters.interactive_brokers.config import InteractiveBrokersInstrumentProviderConfig\nfrom nautilus_trader.adapters.interactive_brokers.config import SymbologyMethod\n\ninstrument_provider_config = InteractiveBrokersInstrumentProviderConfig(\n    symbology_method=SymbologyMethod.IB_SIMPLIFIED,\n    load_ids=frozenset([\n        "EUR/USD.IDEALPRO",    # Forex\n        "SPY.ARCA",            # Stock\n        "ESM24.CME",           # Future\n        "BTC/USD.PAXOS",       # Crypto\n        "^SPX.CBOE",           # Index\n    ]),\n)\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"2-using-load_contracts-for-complex-instruments",children:["2. Using ",(0,t.jsx)(n.code,{children:"load_contracts"})," (for complex instruments)"]}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"load_contracts"})," with ",(0,t.jsx)(n.code,{children:"IBContract"})," instances for complex scenarios like options/futures chains:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.adapters.interactive_brokers.common import IBContract\n\n# Load options chain for specific expiry\noptions_chain_expiry = IBContract(\n    secType="IND",\n    symbol="SPX",\n    exchange="CBOE",\n    build_options_chain=True,\n    lastTradeDateOrContractMonth=\'20240718\',\n)\n\n# Load options chain for date range\noptions_chain_range = IBContract(\n    secType="IND",\n    symbol="SPX",\n    exchange="CBOE",\n    build_options_chain=True,\n    min_expiry_days=0,\n    max_expiry_days=30,\n)\n\n# Load futures chain\nfutures_chain = IBContract(\n    secType="CONTFUT",\n    exchange="CME",\n    symbol="ES",\n    build_futures_chain=True,\n)\n\ninstrument_provider_config = InteractiveBrokersInstrumentProviderConfig(\n    load_contracts=frozenset([\n        options_chain_expiry,\n        options_chain_range,\n        futures_chain,\n    ]),\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"ibcontract-examples-by-asset-class",children:"IBContract examples by asset class"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.adapters.interactive_brokers.common import IBContract\n\n# Stocks\nIBContract(secType='STK', exchange='SMART', primaryExchange='ARCA', symbol='SPY')\nIBContract(secType='STK', exchange='SMART', primaryExchange='NASDAQ', symbol='AAPL')\n\n# Bonds\nIBContract(secType='BOND', secIdType='ISIN', secId='US03076KAA60')\nIBContract(secType='BOND', secIdType='CUSIP', secId='912828XE8')\n\n# Individual Options\nIBContract(secType='OPT', exchange='SMART', symbol='SPY',\n           lastTradeDateOrContractMonth='20251219', strike=500, right='C')\n\n# Options Chain (loads all strikes/expirations)\nIBContract(secType='STK', exchange='SMART', primaryExchange='ARCA', symbol='SPY',\n           build_options_chain=True, min_expiry_days=10, max_expiry_days=60)\n\n# CFDs\nIBContract(secType='CFD', symbol='IBUS30')\nIBContract(secType='CFD', symbol='DE40EUR', exchange='SMART')\n\n# Individual Futures\nIBContract(secType='FUT', exchange='CME', symbol='ES',\n           lastTradeDateOrContractMonth='20240315')\n\n# Futures Chain (loads all expirations)\nIBContract(secType='CONTFUT', exchange='CME', symbol='ES', build_futures_chain=True)\n\n# Options on Futures (FOP) - Individual\nIBContract(secType='FOP', exchange='CME', symbol='ES',\n           lastTradeDateOrContractMonth='20240315', strike=4200, right='C')\n\n# Options on Futures Chain (loads all strikes/expirations)\nIBContract(secType='CONTFUT', exchange='CME', symbol='ES',\n           build_options_chain=True, min_expiry_days=7, max_expiry_days=60)\n\n# Forex\nIBContract(secType='CASH', exchange='IDEALPRO', symbol='EUR', currency='USD')\nIBContract(secType='CASH', exchange='IDEALPRO', symbol='GBP', currency='JPY')\n\n# Cryptocurrencies\nIBContract(secType='CRYPTO', symbol='BTC', exchange='PAXOS', currency='USD')\nIBContract(secType='CRYPTO', symbol='ETH', exchange='PAXOS', currency='USD')\n\n# Indices\nIBContract(secType='IND', symbol='SPX', exchange='CBOE')\nIBContract(secType='IND', symbol='NDX', exchange='NASDAQ')\n\n# Commodities\nIBContract(secType='CMDTY', symbol='XAUUSD', exchange='SMART')\n"})}),"\n",(0,t.jsx)(n.h3,{id:"advanced-configuration-options",children:"Advanced configuration options"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Options chain with custom exchange\nIBContract(\n    secType="STK",\n    symbol="AAPL",\n    exchange="SMART",\n    primaryExchange="NASDAQ",\n    build_options_chain=True,\n    options_chain_exchange="CBOE",  # Use CBOE for options instead of SMART\n    min_expiry_days=7,\n    max_expiry_days=45,\n)\n\n# Futures chain with specific months\nIBContract(\n    secType="CONTFUT",\n    exchange="NYMEX",\n    symbol="CL",  # Crude Oil\n    build_futures_chain=True,\n    min_expiry_days=30,\n    max_expiry_days=180,\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"continuous-futures",children:"Continuous futures"}),"\n",(0,t.jsxs)(n.p,{children:["For continuous futures contracts (using ",(0,t.jsx)(n.code,{children:"secType='CONTFUT'"}),"), the adapter creates instrument IDs using just the symbol and venue:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Continuous futures examples\nIBContract(secType='CONTFUT', exchange='CME', symbol='ES')  # \u2192 ES.CME\nIBContract(secType='CONTFUT', exchange='NYMEX', symbol='CL') # \u2192 CL.NYMEX\n\n# With MIC venue conversion enabled\ninstrument_provider_config = InteractiveBrokersInstrumentProviderConfig(\n    convert_exchange_to_mic_venue=True,\n)\n# Results in:\n# ES.XCME (instead of ES.CME)\n# CL.XNYM (instead of CL.NYMEX)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Continuous Futures vs Individual Futures:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Continuous"}),": ",(0,t.jsx)(n.code,{children:"ES.CME"})," - Represents the front month contract, automatically rolls"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Individual"}),": ",(0,t.jsx)(n.code,{children:"ESM4.CME"})," - Specific March 2024 contract"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["When using ",(0,t.jsx)(n.code,{children:"build_options_chain=True"})," or ",(0,t.jsx)(n.code,{children:"build_futures_chain=True"}),", the ",(0,t.jsx)(n.code,{children:"secType"})," and ",(0,t.jsx)(n.code,{children:"symbol"})," should be specified for the underlying contract. The adapter will automatically discover and load all related derivative contracts within the specified expiry range."]})}),"\n",(0,t.jsx)(n.h2,{id:"option-spreads",children:"Option spreads"}),"\n",(0,t.jsx)(n.p,{children:"Interactive Brokers supports option spreads through BAG contracts, which combine multiple option legs into a single tradeable instrument. NautilusTrader provides comprehensive support for creating, loading, and trading option spreads."}),"\n",(0,t.jsx)(n.h3,{id:"creating-option-spread-instrument-ids",children:"Creating option spread instrument IDs"}),"\n",(0,t.jsxs)(n.p,{children:["Option spreads are created using the ",(0,t.jsx)(n.code,{children:"InstrumentId.new_spread()"})," method, which combines individual option legs with their respective ratios:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.model.identifiers import InstrumentId\n\n# Create individual option instrument IDs\ncall_leg = InstrumentId.from_str("SPY C400.SMART")\nput_leg = InstrumentId.from_str("SPY P390.SMART")\n\n# Create a 1:1 call spread (long call, short call)\ncall_spread_id = InstrumentId.new_spread([\n    (call_leg, 1),   # Long 1 contract\n    (put_leg, -1),   # Short 1 contract\n])\n\n# Create a 1:2 ratio spread\nratio_spread_id = InstrumentId.new_spread([\n    (call_leg, 1),   # Long 1 contract\n    (put_leg, 2),    # Long 2 contracts\n])\n'})}),"\n",(0,t.jsx)(n.h3,{id:"dynamic-spread-loading",children:"Dynamic spread loading"}),"\n",(0,t.jsxs)(n.p,{children:["Option spreads must be requested before they can be traded or subscribed to for market data. Use the ",(0,t.jsx)(n.code,{children:"request_instrument()"})," method to dynamically load spread instruments:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# In your strategy\'s on_start method\ndef on_start(self):\n    # Request the spread instrument\n    self.request_instrument(spread_id)\n\ndef on_instrument(self, instrument):\n    # Handle the loaded spread instrument\n    self.log.info(f"Loaded spread: {instrument.id}")\n\n    # Now you can subscribe to market data\n    self.subscribe_quote_ticks(instrument.id)\n\n    # And place orders\n    order = self.order_factory.market(\n        instrument_id=instrument.id,\n        order_side=OrderSide.BUY,\n        quantity=instrument.make_qty(1),\n        time_in_force=TimeInForce.DAY,\n    )\n    self.submit_order(order)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"spread-trading-requirements",children:"Spread trading requirements"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Load individual legs first"}),": Ensure the individual option legs are available before creating spreads."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Request the spread instrument"}),": Use ",(0,t.jsx)(n.code,{children:"request_instrument()"})," to load the spread before trading."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Subscribe to market data"}),": Request quote ticks after the spread is loaded."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Place orders"}),": Any order type can be used once the spread is available."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"historical-data-and-backtesting",children:"Historical data and backtesting"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"HistoricInteractiveBrokersClient"})," provides comprehensive methods for retrieving historical data from Interactive Brokers for backtesting and research purposes."]}),"\n",(0,t.jsx)(n.h3,{id:"supported-data-types",children:"Supported data types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bar data"}),": OHLCV bars with time, tick, and volume aggregations."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Tick data"}),": Trade ticks and quote ticks with microsecond precision."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Instrument data"}),": Complete contract specifications and trading rules."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"historical-data-client",children:"Historical data client"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.adapters.interactive_brokers.historical.client import HistoricInteractiveBrokersClient\nfrom ibapi.common import MarketDataTypeEnum\n\n# Initialize the client\nclient = HistoricInteractiveBrokersClient(\n    host="127.0.0.1",\n    port=7497,\n    client_id=1,\n    market_data_type=MarketDataTypeEnum.DELAYED_FROZEN,  # Use delayed data if no subscription\n    log_level="INFO"\n)\n\n# Connect to TWS/Gateway\nawait client.connect()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"retrieving-instruments",children:"Retrieving instruments"}),"\n",(0,t.jsx)(n.h4,{id:"basic-instrument-retrieval",children:"Basic instrument retrieval"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.adapters.interactive_brokers.common import IBContract\n\n# Define contracts\ncontracts = [\n    IBContract(secType="STK", symbol="AAPL", exchange="SMART", primaryExchange="NASDAQ"),\n    IBContract(secType="STK", symbol="MSFT", exchange="SMART", primaryExchange="NASDAQ"),\n    IBContract(secType="CASH", symbol="EUR", currency="USD", exchange="IDEALPRO"),\n]\n\n# Request instrument definitions\ninstruments = await client.request_instruments(contracts=contracts)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"option-chain-retrieval-with-catalog-storage",children:"Option chain retrieval with catalog storage"}),"\n",(0,t.jsxs)(n.p,{children:["You can download entire option chains using ",(0,t.jsx)(n.code,{children:"request_instruments"})," in your strategy, with the added benefit of saving the data to the catalog using ",(0,t.jsx)(n.code,{children:"update_catalog=True"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# In your strategy\'s on_start method\ndef on_start(self):\n    self.request_instruments(\n        venue=IB_VENUE,\n        update_catalog=True,\n        params={\n            "update_catalog": True,\n            "ib_contracts": (\n                # SPY options\n                {\n                    "secType": "STK",\n                    "symbol": "SPY",\n                    "exchange": "SMART",\n                    "primaryExchange": "ARCA",\n                    "build_options_chain": True,\n                    "min_expiry_days": 7,\n                    "max_expiry_days": 30,\n                },\n                # QQQ options\n                {\n                    "secType": "STK",\n                    "symbol": "QQQ",\n                    "exchange": "SMART",\n                    "primaryExchange": "NASDAQ",\n                    "build_options_chain": True,\n                    "min_expiry_days": 7,\n                    "max_expiry_days": 30,\n                },\n                # ES futures options\n                {\n                    "secType": "CONTFUT",\n                    "exchange": "CME",\n                    "symbol": "ES",\n                    "build_options_chain": True,\n                    "min_expiry_days": 0,\n                    "max_expiry_days": 60,\n                },\n            ),\n        },\n    )\n'})}),"\n",(0,t.jsx)(n.h3,{id:"retrieving-historical-bars",children:"Retrieving historical bars"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import datetime\n\n# Request historical bars\nbars = await client.request_bars(\n    bar_specifications=[\n        "1-MINUTE-LAST",    # 1-minute bars using last price\n        "5-MINUTE-MID",     # 5-minute bars using midpoint\n        "1-HOUR-LAST",      # 1-hour bars using last price\n        "1-DAY-LAST",       # Daily bars using last price\n    ],\n    start_date_time=datetime.datetime(2023, 11, 1, 9, 30),\n    end_date_time=datetime.datetime(2023, 11, 6, 16, 30),\n    tz_name="America/New_York",\n    contracts=contracts,\n    use_rth=True,  # Regular Trading Hours only\n    timeout=120,   # Request timeout in seconds\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"retrieving-historical-ticks",children:"Retrieving historical ticks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Request historical tick data\nticks = await client.request_ticks(\n    tick_types=["TRADES", "BID_ASK"],  # Trade ticks and quote ticks\n    start_date_time=datetime.datetime(2023, 11, 6, 9, 30),\n    end_date_time=datetime.datetime(2023, 11, 6, 16, 30),\n    tz_name="America/New_York",\n    contracts=contracts,\n    use_rth=True,\n    timeout=120,\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"bar-specifications",children:"Bar specifications"}),"\n",(0,t.jsx)(n.p,{children:"The adapter supports various bar specifications:"}),"\n",(0,t.jsx)(n.h4,{id:"time-based-bars",children:"Time-based bars"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"1-SECOND-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"5-SECOND-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"10-SECOND-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"15-SECOND-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"30-SECOND-LAST"'})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"1-MINUTE-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"2-MINUTE-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"3-MINUTE-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"5-MINUTE-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"10-MINUTE-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"15-MINUTE-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"20-MINUTE-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"30-MINUTE-LAST"'})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"1-HOUR-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"2-HOUR-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"3-HOUR-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"4-HOUR-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"8-HOUR-LAST"'})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"1-DAY-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"1-WEEK-LAST"'}),", ",(0,t.jsx)(n.code,{children:'"1-MONTH-LAST"'})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"price-types",children:"Price types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"LAST"})," - Last traded price"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"MID"})," - Midpoint of bid/ask"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"BID"})," - Bid price"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ASK"})," - Ask price"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"complete-example",children:"Complete example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import asyncio\nimport datetime\nfrom nautilus_trader.adapters.interactive_brokers.common import IBContract\nfrom nautilus_trader.adapters.interactive_brokers.historical.client import HistoricInteractiveBrokersClient\nfrom nautilus_trader.persistence.catalog import ParquetDataCatalog\n\n\nasync def download_historical_data():\n    # Initialize client\n    client = HistoricInteractiveBrokersClient(\n        host="127.0.0.1",\n        port=7497,\n        client_id=5,\n    )\n\n    # Connect\n    await client.connect()\n    await asyncio.sleep(2)  # Allow connection to stabilize\n\n    # Define contracts\n    contracts = [\n        IBContract(secType="STK", symbol="AAPL", exchange="SMART", primaryExchange="NASDAQ"),\n        IBContract(secType="CASH", symbol="EUR", currency="USD", exchange="IDEALPRO"),\n    ]\n\n    # Request instruments\n    instruments = await client.request_instruments(contracts=contracts)\n\n    # Request historical bars\n    bars = await client.request_bars(\n        bar_specifications=["1-HOUR-LAST", "1-DAY-LAST"],\n        start_date_time=datetime.datetime(2023, 11, 1, 9, 30),\n        end_date_time=datetime.datetime(2023, 11, 6, 16, 30),\n        tz_name="America/New_York",\n        contracts=contracts,\n        use_rth=True,\n    )\n\n    # Request tick data\n    ticks = await client.request_ticks(\n        tick_types=["TRADES"],\n        start_date_time=datetime.datetime(2023, 11, 6, 14, 0),\n        end_date_time=datetime.datetime(2023, 11, 6, 15, 0),\n        tz_name="America/New_York",\n        contracts=contracts,\n    )\n\n    # Save to catalog\n    catalog = ParquetDataCatalog("./catalog")\n    catalog.write_data(instruments)\n    catalog.write_data(bars)\n    catalog.write_data(ticks)\n\n    print(f"Downloaded {len(instruments)} instruments")\n    print(f"Downloaded {len(bars)} bars")\n    print(f"Downloaded {len(ticks)} ticks")\n\n    # Disconnect\n    await client.disconnect()\n\n# Run the example\nif __name__ == "__main__":\n    asyncio.run(download_historical_data())\n'})}),"\n",(0,t.jsx)(n.h3,{id:"data-limitations",children:"Data limitations"}),"\n",(0,t.jsx)(n.p,{children:"Be aware of Interactive Brokers' historical data limitations:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rate Limits"}),": IB enforces rate limits on historical data requests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data Availability"}),": Historical data availability varies by instrument and subscription level"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Market Data Permissions"}),": Some data requires specific market data subscriptions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Time Ranges"}),": Maximum lookback periods vary by bar size and instrument type"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"best-practices",children:"Best practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Delayed Data"}),": For backtesting, ",(0,t.jsx)(n.code,{children:"MarketDataTypeEnum.DELAYED_FROZEN"})," is often sufficient"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Batch Requests"}),": Group multiple instruments in single requests when possible"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handle Timeouts"}),": Set appropriate timeout values for large data requests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Respect Rate Limits"}),": Add delays between requests to avoid hitting rate limits"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validate Data"}),": Always check data quality and completeness before backtesting"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"Interactive Brokers enforces pacing limits; excessive historical-data or order requests trigger pacing violations and IB can disable the API session for several minutes."})}),"\n",(0,t.jsx)(n.h2,{id:"live-trading",children:"Live trading"}),"\n",(0,t.jsxs)(n.p,{children:["Live trading with Interactive Brokers requires setting up a ",(0,t.jsx)(n.code,{children:"TradingNode"})," that incorporates both ",(0,t.jsx)(n.code,{children:"InteractiveBrokersDataClient"})," and ",(0,t.jsx)(n.code,{children:"InteractiveBrokersExecutionClient"}),". These clients depend on the ",(0,t.jsx)(n.code,{children:"InteractiveBrokersInstrumentProvider"})," for instrument management."]}),"\n",(0,t.jsx)(n.h3,{id:"architecture-overview",children:"Architecture overview"}),"\n",(0,t.jsx)(n.p,{children:"The live trading setup consists of three main components:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"InstrumentProvider"}),": Manages instrument definitions and contract details"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"DataClient"}),": Handles real-time market data subscriptions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ExecutionClient"}),": Manages orders, positions, and account information"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"instrumentprovider-configuration",children:"InstrumentProvider configuration"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"InteractiveBrokersInstrumentProvider"})," serves as the bridge for accessing financial instrument data from IB. It supports loading individual instruments, options chains, and futures chains."]}),"\n",(0,t.jsx)(n.h4,{id:"basic-configuration",children:"Basic configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.adapters.interactive_brokers.config import InteractiveBrokersInstrumentProviderConfig\nfrom nautilus_trader.adapters.interactive_brokers.config import SymbologyMethod\nfrom nautilus_trader.adapters.interactive_brokers.common import IBContract\n\ninstrument_provider_config = InteractiveBrokersInstrumentProviderConfig(\n    symbology_method=SymbologyMethod.IB_SIMPLIFIED,\n    build_futures_chain=False,  # Set to True if fetching futures chains\n    build_options_chain=False,  # Set to True if fetching options chains\n    min_expiry_days=10,         # Minimum days to expiry for derivatives\n    max_expiry_days=60,         # Maximum days to expiry for derivatives\n    convert_exchange_to_mic_venue=False,  # Use MIC codes for venue mapping\n    cache_validity_days=1,      # Cache instrument data for 1 day\n    load_ids=frozenset([\n        # Individual instruments using simplified symbology\n        \"EUR/USD.IDEALPRO\",     # Forex\n        \"BTC/USD.PAXOS\",        # Cryptocurrency\n        \"SPY.ARCA\",             # Stock ETF\n        \"V.NYSE\",               # Individual stock\n        \"ESM4.CME\",             # Future contract (single digit year)\n        \"^SPX.CBOE\",            # Index\n    ]),\n    load_contracts=frozenset([\n        # Complex instruments using IBContract\n        IBContract(secType='STK', symbol='AAPL', exchange='SMART', primaryExchange='NASDAQ'),\n        IBContract(secType='CASH', symbol='GBP', currency='USD', exchange='IDEALPRO'),\n    ]),\n)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"advanced-configuration-for-derivatives",children:"Advanced configuration for derivatives"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Configuration for options and futures chains\nadvanced_config = InteractiveBrokersInstrumentProviderConfig(\n    symbology_method=SymbologyMethod.IB_SIMPLIFIED,\n    build_futures_chain=True,   # Enable futures chain loading\n    build_options_chain=True,   # Enable options chain loading\n    min_expiry_days=7,          # Load contracts expiring in 7+ days\n    max_expiry_days=90,         # Load contracts expiring within 90 days\n    load_contracts=frozenset([\n        # Load SPY options chain\n        IBContract(\n            secType='STK',\n            symbol='SPY',\n            exchange='SMART',\n            primaryExchange='ARCA',\n            build_options_chain=True,\n        ),\n        # Load ES futures chain\n        IBContract(\n            secType='CONTFUT',\n            exchange='CME',\n            symbol='ES',\n            build_futures_chain=True,\n        ),\n    ]),\n)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"integration-with-external-data-providers",children:"Integration with external data providers"}),"\n",(0,t.jsx)(n.p,{children:"The Interactive Brokers adapter can be used alongside other data providers for enhanced market data coverage. When using multiple data sources:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use consistent symbology methods across providers"}),"\n",(0,t.jsxs)(n.li,{children:["Consider using ",(0,t.jsx)(n.code,{children:"convert_exchange_to_mic_venue=True"})," for standardized venue identification"]}),"\n",(0,t.jsx)(n.li,{children:"Ensure instrument cache management is handled properly to avoid conflicts"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"data-client-configuration",children:"Data client configuration"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"InteractiveBrokersDataClient"})," interfaces with IB for streaming and retrieving real-time market data. Upon connection, it configures the ",(0,t.jsx)(n.a,{href:"https://ibkrcampus.com/ibkr-api-page/trader-workstation-api/#delayed-market-data",children:"market data type"})," and loads instruments based on the ",(0,t.jsx)(n.code,{children:"InteractiveBrokersInstrumentProviderConfig"})," settings."]}),"\n",(0,t.jsx)(n.h4,{id:"supported-data-types-1",children:"Supported data types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Quote Ticks"}),": Real-time bid/ask prices and sizes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Trade Ticks"}),": Real-time trade prices and volumes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bar Data"}),": Real-time OHLCV bars (1-second to 1-day intervals)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Market Depth"}),": Level 2 order book data (where available)"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"market-data-types",children:"Market data types"}),"\n",(0,t.jsx)(n.p,{children:"Interactive Brokers supports several market data types:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"REALTIME"}),": Live market data (requires market data subscriptions)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DELAYED"}),": 15-20 minute delayed data (free for most markets)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DELAYED_FROZEN"}),": Delayed data that doesn't update (useful for testing)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"FROZEN"}),": Last known real-time data (when market is closed)"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"basic-data-client-configuration",children:"Basic data client configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.adapters.interactive_brokers.config import IBMarketDataTypeEnum\nfrom nautilus_trader.adapters.interactive_brokers.config import InteractiveBrokersDataClientConfig\n\ndata_client_config = InteractiveBrokersDataClientConfig(\n    ibg_host="127.0.0.1",\n    ibg_port=7497,  # TWS paper trading port\n    ibg_client_id=1,\n    use_regular_trading_hours=True,  # RTH only for stocks\n    market_data_type=IBMarketDataTypeEnum.DELAYED_FROZEN,  # Use delayed data\n    ignore_quote_tick_size_updates=False,  # Include size-only updates\n    instrument_provider=instrument_provider_config,\n    connection_timeout=300,  # 5 minutes\n    request_timeout=60,      # 1 minute\n)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"advanced-data-client-configuration",children:"Advanced data client configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Configuration for production with real-time data\nproduction_data_config = InteractiveBrokersDataClientConfig(\n    ibg_host="127.0.0.1",\n    ibg_port=4001,  # IB Gateway live trading port\n    ibg_client_id=1,\n    use_regular_trading_hours=False,  # Include extended hours\n    market_data_type=IBMarketDataTypeEnum.REALTIME,  # Real-time data\n    ignore_quote_tick_size_updates=True,  # Reduce tick volume\n    handle_revised_bars=True,  # Handle bar revisions\n    instrument_provider=instrument_provider_config,\n    dockerized_gateway=dockerized_gateway_config,  # If using Docker\n    connection_timeout=300,\n    request_timeout=60,\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"data-client-configuration-options",children:"Data client configuration options"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Option"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"instrument_provider"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"InteractiveBrokersInstrumentProviderConfig()"})}),(0,t.jsx)(n.td,{children:"Instrument provider settings controlling which contracts load at startup."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ibg_host"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"127.0.0.1"})}),(0,t.jsx)(n.td,{children:"Hostname or IP for TWS/IB Gateway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ibg_port"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"None"})}),(0,t.jsxs)(n.td,{children:["Port for TWS/IB Gateway (",(0,t.jsx)(n.code,{children:"7497"}),"/",(0,t.jsx)(n.code,{children:"7496"})," for TWS, ",(0,t.jsx)(n.code,{children:"4002"}),"/",(0,t.jsx)(n.code,{children:"4001"})," for IBG)."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ibg_client_id"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"1"})}),(0,t.jsx)(n.td,{children:"Unique client identifier used when connecting to TWS/IB Gateway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"use_regular_trading_hours"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"True"})}),(0,t.jsxs)(n.td,{children:["Request bars limited to regular trading hours when ",(0,t.jsx)(n.code,{children:"True"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"market_data_type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"REALTIME"})}),(0,t.jsxs)(n.td,{children:["Market data feed type (",(0,t.jsx)(n.code,{children:"REALTIME"}),", ",(0,t.jsx)(n.code,{children:"DELAYED"}),", ",(0,t.jsx)(n.code,{children:"DELAYED_FROZEN"}),", etc.)."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ignore_quote_tick_size_updates"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"False"})}),(0,t.jsxs)(n.td,{children:["Suppress quote ticks where only size changes when ",(0,t.jsx)(n.code,{children:"True"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"dockerized_gateway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"None"})}),(0,t.jsxs)(n.td,{children:["Optional ",(0,t.jsx)(n.code,{children:"DockerizedIBGatewayConfig"})," for containerized setups."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"connection_timeout"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"300"})}),(0,t.jsx)(n.td,{children:"Seconds to wait for the initial API connection."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"request_timeout"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"60"})}),(0,t.jsx)(n.td,{children:"Seconds to wait for historical data requests before timing out."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"notes",children:"Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"use_regular_trading_hours"})}),": When ",(0,t.jsx)(n.code,{children:"True"}),", only requests data during regular trading hours. Primarily affects bar data for stocks."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"ignore_quote_tick_size_updates"})}),": When ",(0,t.jsx)(n.code,{children:"True"}),", filters out quote ticks where only the size changed (not price), reducing data volume."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"handle_revised_bars"})}),": When ",(0,t.jsx)(n.code,{children:"True"}),", processes bar revisions from IB (bars can be updated after initial publication)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"connection_timeout"})}),": Maximum time to wait for initial connection establishment."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"request_timeout"})}),": Maximum time to wait for historical data requests."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"execution-client-configuration-options",children:"Execution client configuration options"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Option"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"instrument_provider"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"InteractiveBrokersInstrumentProviderConfig()"})}),(0,t.jsx)(n.td,{children:"Instrument provider settings controlling which contracts load at startup."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ibg_host"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"127.0.0.1"})}),(0,t.jsx)(n.td,{children:"Hostname or IP for TWS/IB Gateway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ibg_port"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"None"})}),(0,t.jsxs)(n.td,{children:["Port for TWS/IB Gateway (",(0,t.jsx)(n.code,{children:"7497"}),"/",(0,t.jsx)(n.code,{children:"7496"})," for TWS, ",(0,t.jsx)(n.code,{children:"4002"}),"/",(0,t.jsx)(n.code,{children:"4001"})," for IBG)."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ibg_client_id"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"1"})}),(0,t.jsx)(n.td,{children:"Unique client identifier used when connecting to TWS/IB Gateway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"account_id"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"None"})}),(0,t.jsxs)(n.td,{children:["Interactive Brokers account identifier (falls back to ",(0,t.jsx)(n.code,{children:"TWS_ACCOUNT"})," env var)."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"dockerized_gateway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"None"})}),(0,t.jsxs)(n.td,{children:["Optional ",(0,t.jsx)(n.code,{children:"DockerizedIBGatewayConfig"})," for containerized setups."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"connection_timeout"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"300"})}),(0,t.jsx)(n.td,{children:"Seconds to wait for the initial API connection."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"fetch_all_open_orders"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"False"})}),(0,t.jsxs)(n.td,{children:["When ",(0,t.jsx)(n.code,{children:"True"}),", pulls open orders for every API client ID (not just this session)."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"track_option_exercise_from_position_update"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"False"})}),(0,t.jsxs)(n.td,{children:["Subscribe to real-time position updates to detect option exercises when ",(0,t.jsx)(n.code,{children:"True"}),"."]})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"execution-client-configuration",children:"Execution client configuration"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"InteractiveBrokersExecutionClient"})," handles trade execution, order management, account information, and position tracking. It provides comprehensive order lifecycle management and real-time account updates."]}),"\n",(0,t.jsx)(n.h4,{id:"supported-functionality",children:"Supported functionality"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Order Management"}),": Place, modify, and cancel orders"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Order Types"}),": Market, limit, stop, stop-limit, trailing stop, and more"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Account Information"}),": Real-time balance and margin updates"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Position Tracking"}),": Real-time position updates and P&L"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Trade Reporting"}),": Execution reports and fill notifications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Risk Management"}),": Pre-trade risk checks and position limits"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"supported-order-types",children:"Supported order types"}),"\n",(0,t.jsx)(n.p,{children:"The adapter supports most Interactive Brokers order types:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Market Orders"}),": ",(0,t.jsx)(n.code,{children:"OrderType.MARKET"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Limit Orders"}),": ",(0,t.jsx)(n.code,{children:"OrderType.LIMIT"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Stop Orders"}),": ",(0,t.jsx)(n.code,{children:"OrderType.STOP_MARKET"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Stop-Limit Orders"}),": ",(0,t.jsx)(n.code,{children:"OrderType.STOP_LIMIT"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Market-If-Touched"}),": ",(0,t.jsx)(n.code,{children:"OrderType.MARKET_IF_TOUCHED"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Limit-If-Touched"}),": ",(0,t.jsx)(n.code,{children:"OrderType.LIMIT_IF_TOUCHED"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Trailing Stop Market"}),": ",(0,t.jsx)(n.code,{children:"OrderType.TRAILING_STOP_MARKET"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Trailing Stop Limit"}),": ",(0,t.jsx)(n.code,{children:"OrderType.TRAILING_STOP_LIMIT"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Market-on-Close"}),": ",(0,t.jsx)(n.code,{children:"OrderType.MARKET"})," with ",(0,t.jsx)(n.code,{children:"TimeInForce.AT_THE_CLOSE"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Limit-on-Close"}),": ",(0,t.jsx)(n.code,{children:"OrderType.LIMIT"})," with ",(0,t.jsx)(n.code,{children:"TimeInForce.AT_THE_CLOSE"})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"time-in-force-options",children:"Time in force options"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Day Orders"}),": ",(0,t.jsx)(n.code,{children:"TimeInForce.DAY"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Good-Till-Canceled"}),": ",(0,t.jsx)(n.code,{children:"TimeInForce.GTC"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Immediate-or-Cancel"}),": ",(0,t.jsx)(n.code,{children:"TimeInForce.IOC"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fill-or-Kill"}),": ",(0,t.jsx)(n.code,{children:"TimeInForce.FOK"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Good-Till-Date"}),": ",(0,t.jsx)(n.code,{children:"TimeInForce.GTD"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"At-the-Open"}),": ",(0,t.jsx)(n.code,{children:"TimeInForce.AT_THE_OPEN"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"At-the-Close"}),": ",(0,t.jsx)(n.code,{children:"TimeInForce.AT_THE_CLOSE"})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"batch-operations",children:"Batch operations"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Operation"}),(0,t.jsx)(n.th,{children:"Supported"}),(0,t.jsx)(n.th,{children:"Notes"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Batch Submit"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"Submit multiple orders in single request."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Batch Modify"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"Modify multiple orders in single request."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Batch Cancel"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"Cancel multiple orders in single request."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"position-management",children:"Position management"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"Supported"}),(0,t.jsx)(n.th,{children:"Notes"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Query positions"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"Real-time position updates."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Position mode"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"Net vs separate long/short positions."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Leverage control"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"Account-level margin requirements."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Margin mode"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"Portfolio vs individual margin."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"order-querying",children:"Order querying"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"Supported"}),(0,t.jsx)(n.th,{children:"Notes"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Query open orders"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"List all active orders."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Query order history"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"Historical order data."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Order status updates"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"Real-time order state changes."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Trade history"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"Execution and fill reports."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"contingent-orders",children:"Contingent orders"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"Supported"}),(0,t.jsx)(n.th,{children:"Notes"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Order lists"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"Atomic multi-order submission."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"OCO orders"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"One-Cancels-Other with customizable OCA types (1, 2, 3)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Bracket orders"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"Parent-child order relationships."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Conditional orders"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"Advanced order conditions and triggers."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"basic-execution-client-configuration",children:"Basic execution client configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.adapters.interactive_brokers.config import InteractiveBrokersExecClientConfig\nfrom nautilus_trader.config import RoutingConfig\n\nexec_client_config = InteractiveBrokersExecClientConfig(\n    ibg_host="127.0.0.1",\n    ibg_port=7497,  # TWS paper trading port\n    ibg_client_id=1,\n    account_id="DU123456",  # Your IB account ID (paper or live)\n    instrument_provider=instrument_provider_config,\n    connection_timeout=300,\n    routing=RoutingConfig(default=True),  # Route all orders through this client\n)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"advanced-execution-client-configuration",children:"Advanced execution client configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Production configuration with dockerized gateway\nproduction_exec_config = InteractiveBrokersExecClientConfig(\n    ibg_host="127.0.0.1",\n    ibg_port=4001,  # IB Gateway live trading port\n    ibg_client_id=1,\n    account_id=None,  # Will use TWS_ACCOUNT environment variable\n    instrument_provider=instrument_provider_config,\n    dockerized_gateway=dockerized_gateway_config,\n    connection_timeout=300,\n    routing=RoutingConfig(default=True),\n)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"account-id-configuration",children:"Account ID configuration"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"account_id"})," parameter is crucial and must match the account logged into TWS/Gateway:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Option 1: Specify directly in config\nexec_config = InteractiveBrokersExecClientConfig(\n    account_id="DU123456",  # Paper trading account\n    # ... other parameters\n)\n\n# Option 2: Use environment variable\nimport os\nos.environ["TWS_ACCOUNT"] = "DU123456"\nexec_config = InteractiveBrokersExecClientConfig(\n    account_id=None,  # Will use TWS_ACCOUNT env var\n    # ... other parameters\n)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"order-tags-and-advanced-features",children:"Order tags and advanced features"}),"\n",(0,t.jsx)(n.p,{children:"The adapter supports IB-specific order parameters through order tags:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.adapters.interactive_brokers.common import IBOrderTags\n\n# Create order with IB-specific parameters\norder_tags = IBOrderTags(\n    allOrNone=True,           # All-or-none order\n    ocaGroup="MyGroup1",      # One-cancels-all group\n    ocaType=1,                # Cancel with block\n    activeStartTime="20240315 09:30:00 EST",  # GTC activation time\n    activeStopTime="20240315 16:00:00 EST",   # GTC deactivation time\n    goodAfterTime="20240315 09:35:00 EST",    # Good after time\n)\n\n# Apply tags to an order\norder = order_factory.limit(\n    instrument_id=instrument.id,\n    order_side=OrderSide.BUY,\n    quantity=instrument.make_qty(100),\n    price=instrument.make_price(100.0),\n    tags=[order_tags.value],\n)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"oca-one-cancels-all-orders",children:"OCA (one-cancels-all) orders"}),"\n",(0,t.jsxs)(n.p,{children:["The adapter provides comprehensive support for OCA orders through explicit configuration using ",(0,t.jsx)(n.code,{children:"IBOrderTags"}),":"]}),"\n",(0,t.jsx)(n.h3,{id:"basic-oca-configuration",children:"Basic OCA configuration"}),"\n",(0,t.jsxs)(n.p,{children:["All OCA functionality must be explicitly configured using ",(0,t.jsx)(n.code,{children:"IBOrderTags"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.adapters.interactive_brokers.common import IBOrderTags\n\n# Create OCA configuration\noca_tags = IBOrderTags(\n    ocaGroup="MY_OCA_GROUP",\n    ocaType=1,  # Type 1: Cancel All with Block (recommended)\n)\n\n# Apply to bracket orders\nbracket_order = order_factory.bracket(\n    instrument_id=instrument.id,\n    order_side=OrderSide.BUY,\n    quantity=instrument.make_qty(100),\n    tp_price=instrument.make_price(110.0),\n    sl_trigger_price=instrument.make_price(90.0),\n    tp_tags=[oca_tags.value],  # Must explicitly add OCA tags\n    sl_tags=[oca_tags.value],  # Must explicitly add OCA tags\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"advanced-oca-configuration",children:"Advanced OCA configuration"}),"\n",(0,t.jsxs)(n.p,{children:["You can specify different OCA types and behaviors using ",(0,t.jsx)(n.code,{children:"IBOrderTags"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.adapters.interactive_brokers.common import IBOrderTags\n\n# Create custom OCA configuration\ncustom_oca_tags = IBOrderTags(\n    ocaGroup="MY_CUSTOM_GROUP",\n    ocaType=2,  # Use Type 2: Reduce with Block\n)\n\n# Apply to individual orders\norder = order_factory.limit(\n    instrument_id=instrument.id,\n    order_side=OrderSide.BUY,\n    quantity=instrument.make_qty(100),\n    price=instrument.make_price(100.0),\n    tags=[custom_oca_tags.value],\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"oca-types",children:"OCA types"}),"\n",(0,t.jsx)(n.p,{children:"Interactive Brokers supports three OCA types:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Behavior"}),(0,t.jsx)(n.th,{children:"Use Case"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"1"})}),(0,t.jsx)(n.td,{children:"Cancel All with Block"}),(0,t.jsx)(n.td,{children:"Cancel all remaining orders with block protection"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Default"})," - Safest option, prevents overfills"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"2"})}),(0,t.jsx)(n.td,{children:"Reduce with Block"}),(0,t.jsx)(n.td,{children:"Proportionally reduce remaining orders with block protection"}),(0,t.jsx)(n.td,{children:"Partial fills with overfill protection"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"3"})}),(0,t.jsx)(n.td,{children:"Reduce without Block"}),(0,t.jsx)(n.td,{children:"Proportionally reduce remaining orders without block protection"}),(0,t.jsx)(n.td,{children:"Fastest execution, higher overfill risk"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"multiple-orders-in-same-oca-group",children:"Multiple orders in same OCA group"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Create multiple orders with the same OCA group\noca_tags = IBOrderTags(\n    ocaGroup="MULTI_ORDER_GROUP",\n    ocaType=3,  # Use Type 3: Reduce without Block\n)\n\norder1 = order_factory.limit(\n    instrument_id=instrument.id,\n    order_side=OrderSide.BUY,\n    quantity=instrument.make_qty(50),\n    price=instrument.make_price(99.0),\n    tags=[oca_tags.value],\n)\n\norder2 = order_factory.limit(\n    instrument_id=instrument.id,\n    order_side=OrderSide.BUY,\n    quantity=instrument.make_qty(50),\n    price=instrument.make_price(101.0),\n    tags=[oca_tags.value],\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"oca-configuration-requirements",children:"OCA configuration requirements"}),"\n",(0,t.jsxs)(n.p,{children:["OCA functionality is ",(0,t.jsx)(n.strong,{children:"only"})," available through explicit configuration:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"IBOrderTags Required"})," - OCA settings must be explicitly specified in order tags"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No Automatic Detection"})," - ",(0,t.jsx)(n.code,{children:"ContingencyType.OCO"})," and ",(0,t.jsx)(n.code,{children:"ContingencyType.OUO"})," do not automatically create OCA groups"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Manual Configuration"})," - All OCA groups and types must be manually specified"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"conditional-orders",children:"Conditional orders"}),"\n",(0,t.jsxs)(n.p,{children:["The adapter supports Interactive Brokers conditional orders through the ",(0,t.jsx)(n.code,{children:"conditions"})," parameter in ",(0,t.jsx)(n.code,{children:"IBOrderTags"}),". Conditional orders allow you to specify criteria that must be met before an order is transmitted or cancelled."]}),"\n",(0,t.jsx)(n.h4,{id:"supported-condition-types",children:"Supported condition types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Price Conditions"}),": Trigger based on price movements of a specific instrument"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Time Conditions"}),": Trigger at a specific date and time"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Volume Conditions"}),": Trigger based on trading volume thresholds"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Execution Conditions"}),": Trigger when trades occur for a specific instrument"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Margin Conditions"}),": Trigger based on account margin levels"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Percent Change Conditions"}),": Trigger based on percentage price changes"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"basic-conditional-order-example",children:"Basic conditional order example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.adapters.interactive_brokers.common import IBOrderTags\n\n# Create a price condition: trigger when SPY goes above $250\nprice_condition = {\n    "type": "price",\n    "conId": 265598,  # SPY contract ID\n    "exchange": "SMART",\n    "isMore": True,  # Trigger when price is greater than threshold\n    "price": 250.00,\n    "triggerMethod": 0,  # Default trigger method\n    "conjunction": "and",\n}\n\n# Create order tags with condition\norder_tags = IBOrderTags(\n    conditions=[price_condition],\n    conditionsCancelOrder=False,  # Transmit order when condition is met\n)\n\n# Apply to order\norder = order_factory.limit(\n    instrument_id=instrument.id,\n    order_side=OrderSide.BUY,\n    quantity=instrument.make_qty(100),\n    price=instrument.make_price(251.00),\n    tags=[order_tags.value],\n)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"multiple-conditions-with-logic",children:"Multiple conditions with logic"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Create multiple conditions with AND/OR logic\nconditions = [\n    {\n        "type": "price",\n        "conId": 265598,\n        "exchange": "SMART",\n        "isMore": True,\n        "price": 250.00,\n        "triggerMethod": 0,\n        "conjunction": "and",  # AND with next condition\n    },\n    {\n        "type": "time",\n        "time": "20250315-09:30:00",\n        "isMore": True,\n        "conjunction": "or",  # OR with next condition\n    },\n    {\n        "type": "volume",\n        "conId": 265598,\n        "exchange": "SMART",\n        "isMore": True,\n        "volume": 10000000,\n        "conjunction": "and",\n    },\n]\n\norder_tags = IBOrderTags(\n    conditions=conditions,\n    conditionsCancelOrder=False,\n)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"condition-parameters",children:"Condition parameters"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Price Condition:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"conId"}),": Contract ID of the instrument to monitor"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"exchange"}),': Exchange to monitor (e.g., "SMART", "NASDAQ")']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isMore"}),": True for >=, False for <=- ",(0,t.jsx)(n.code,{children:"price"}),": Price threshold"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"triggerMethod"}),": 0=Default, 1=DoubleBidAsk, 2=Last, 3=DoubleLast, 4=BidAsk, 7=LastBidAsk, 8=MidPoint"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Time Condition:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"time"}),': Time string in UTC format "YYYYMMDD-HH:MM',":SS",'" (e.g., "20250315-09:30:00")']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isMore"}),": True for after time, False for before time"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Volume Condition:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"conId"}),": Contract ID of the instrument to monitor"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"exchange"}),": Exchange to monitor"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isMore"}),": True for >=, False for <=- ",(0,t.jsx)(n.code,{children:"volume"}),": Volume threshold"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Execution Condition:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"symbol"}),": Symbol to monitor for trades"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"secType"}),': Security type (e.g., "STK", "OPT", "FUT")']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"exchange"}),": Exchange to monitor"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Margin Condition:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"percent"}),": Margin cushion percentage threshold"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"isMore"}),": True for >=, False for <=\n",(0,t.jsx)(n.strong,{children:"Percent Change Condition:"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"conId"}),": Contract ID of the instrument to monitor"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"exchange"}),": Exchange to monitor"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"isMore"}),": True for >=, False for <=- ",(0,t.jsx)(n.code,{children:"changePercent"}),": Percentage change threshold"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"complete-example-all-condition-types",children:"Complete example: all condition types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Example showing all 6 supported condition types\nfrom nautilus_trader.adapters.interactive_brokers.common import IBOrderTags\n\n# 1. Price Condition - trigger when ES futures > 6000\nprice_condition = {\n    "type": "price",\n    "conId": 495512563,  # ES futures contract ID\n    "exchange": "CME",\n    "isMore": True,\n    "price": 6000.0,\n    "triggerMethod": 0,\n    "conjunction": "and",\n}\n\n# 2. Time Condition - trigger at specific time\ntime_condition = {\n    "type": "time",\n    "time": "20250315-09:30:00",  # UTC format\n    "isMore": True,\n    "conjunction": "and",\n}\n\n# 3. Volume Condition - trigger when volume > 100,000\nvolume_condition = {\n    "type": "volume",\n    "conId": 495512563,\n    "exchange": "CME",\n    "isMore": True,\n    "volume": 100000,\n    "conjunction": "and",\n}\n\n# 4. Execution Condition - trigger when SPY trades\nexecution_condition = {\n    "type": "execution",\n    "symbol": "SPY",\n    "secType": "STK",\n    "exchange": "SMART",\n    "conjunction": "and",\n}\n\n# 5. Margin Condition - trigger when margin cushion > 75%\nmargin_condition = {\n    "type": "margin",\n    "percent": 75,\n    "isMore": True,\n    "conjunction": "and",\n}\n\n# 6. Percent Change Condition - trigger when price changes > 5%\npercent_change_condition = {\n    "type": "percent_change",\n    "conId": 495512563,\n    "exchange": "CME",\n    "changePercent": 5.0,\n    "isMore": True,\n    "conjunction": "and",\n}\n\n# Use any combination of conditions\norder_tags = IBOrderTags(\n    conditions=[price_condition, time_condition],  # Multiple conditions\n    conditionsCancelOrder=False,  # Transmit when conditions met\n)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"order-behavior",children:"Order behavior"}),"\n",(0,t.jsxs)(n.p,{children:["Set ",(0,t.jsx)(n.code,{children:"conditionsCancelOrder"})," to control what happens when conditions are met:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"False"}),": Transmit the order when conditions are satisfied"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"True"}),": Cancel the order when conditions are satisfied"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"implementation-notes",children:"Implementation notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"All 6 condition types are fully supported"})," and tested with live Interactive Brokers orders"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Price conditions"})," work correctly despite a known bug in the ibapi library where ",(0,t.jsx)(n.code,{children:"PriceCondition.__str__"})," is incorrectly decorated as a property"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Time conditions"})," use UTC format with dash separator (",(0,t.jsx)(n.code,{children:"YYYYMMDD-HH:MM:SS"}),") for reliable parsing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Conjunction logic"}),' allows complex condition combinations using "and"/"or" operators']}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"complete-trading-node-configuration",children:"Complete trading node configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Setting up a complete trading environment involves configuring a ",(0,t.jsx)(n.code,{children:"TradingNodeConfig"})," with all necessary components. Here are comprehensive examples for different scenarios."]}),"\n",(0,t.jsx)(n.h4,{id:"paper-trading-configuration",children:"Paper trading configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import os\nfrom nautilus_trader.adapters.interactive_brokers.common import IB\nfrom nautilus_trader.adapters.interactive_brokers.common import IB_VENUE\nfrom nautilus_trader.adapters.interactive_brokers.config import InteractiveBrokersDataClientConfig\nfrom nautilus_trader.adapters.interactive_brokers.config import InteractiveBrokersExecClientConfig\nfrom nautilus_trader.adapters.interactive_brokers.config import InteractiveBrokersInstrumentProviderConfig\nfrom nautilus_trader.adapters.interactive_brokers.config import IBMarketDataTypeEnum\nfrom nautilus_trader.adapters.interactive_brokers.config import SymbologyMethod\nfrom nautilus_trader.adapters.interactive_brokers.factories import InteractiveBrokersLiveDataClientFactory\nfrom nautilus_trader.adapters.interactive_brokers.factories import InteractiveBrokersLiveExecClientFactory\nfrom nautilus_trader.config import LiveDataEngineConfig\nfrom nautilus_trader.config import LoggingConfig\nfrom nautilus_trader.config import RoutingConfig\nfrom nautilus_trader.config import TradingNodeConfig\nfrom nautilus_trader.live.node import TradingNode\n\n# Instrument provider configuration\ninstrument_provider_config = InteractiveBrokersInstrumentProviderConfig(\n    symbology_method=SymbologyMethod.IB_SIMPLIFIED,\n    load_ids=frozenset([\n        "EUR/USD.IDEALPRO",\n        "GBP/USD.IDEALPRO",\n        "SPY.ARCA",\n        "QQQ.NASDAQ",\n        "AAPL.NASDAQ",\n        "MSFT.NASDAQ",\n    ]),\n)\n\n# Data client configuration\ndata_client_config = InteractiveBrokersDataClientConfig(\n    ibg_host="127.0.0.1",\n    ibg_port=7497,  # TWS paper trading\n    ibg_client_id=1,\n    use_regular_trading_hours=True,\n    market_data_type=IBMarketDataTypeEnum.DELAYED_FROZEN,\n    instrument_provider=instrument_provider_config,\n)\n\n# Execution client configuration\nexec_client_config = InteractiveBrokersExecClientConfig(\n    ibg_host="127.0.0.1",\n    ibg_port=7497,  # TWS paper trading\n    ibg_client_id=1,\n    account_id="DU123456",  # Your paper trading account\n    instrument_provider=instrument_provider_config,\n    routing=RoutingConfig(default=True),\n)\n\n# Trading node configuration\nconfig_node = TradingNodeConfig(\n    trader_id="PAPER-TRADER-001",\n    logging=LoggingConfig(log_level="INFO"),\n    data_clients={IB: data_client_config},\n    exec_clients={IB: exec_client_config},\n    data_engine=LiveDataEngineConfig(\n        time_bars_timestamp_on_close=False,  # IB standard: use bar open time\n        validate_data_sequence=True,         # Discard out-of-sequence bars\n    ),\n    timeout_connection=90.0,\n    timeout_reconciliation=5.0,\n    timeout_portfolio=5.0,\n    timeout_disconnection=5.0,\n    timeout_post_stop=2.0,\n)\n\n# Create and configure the trading node\nnode = TradingNode(config=config_node)\nnode.add_data_client_factory(IB, InteractiveBrokersLiveDataClientFactory)\nnode.add_exec_client_factory(IB, InteractiveBrokersLiveExecClientFactory)\nnode.build()\nnode.portfolio.set_specific_venue(IB_VENUE)\n\nif __name__ == "__main__":\n    try:\n        node.run()\n    finally:\n        node.dispose()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"live-trading-with-dockerized-gateway",children:"Live trading with Dockerized gateway"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.adapters.interactive_brokers.config import DockerizedIBGatewayConfig\n\n# Dockerized gateway configuration\ndockerized_gateway_config = DockerizedIBGatewayConfig(\n    username=os.environ.get("TWS_USERNAME"),\n    password=os.environ.get("TWS_PASSWORD"),\n    trading_mode="live",  # "paper" or "live"\n    read_only_api=False,  # Allow order execution\n    timeout=300,\n)\n\n# Data client with dockerized gateway\ndata_client_config = InteractiveBrokersDataClientConfig(\n    ibg_client_id=1,\n    use_regular_trading_hours=False,  # Include extended hours\n    market_data_type=IBMarketDataTypeEnum.REALTIME,\n    instrument_provider=instrument_provider_config,\n    dockerized_gateway=dockerized_gateway_config,\n)\n\n# Execution client with dockerized gateway\nexec_client_config = InteractiveBrokersExecClientConfig(\n    ibg_client_id=1,\n    account_id=os.environ.get("TWS_ACCOUNT"),  # Live account ID\n    instrument_provider=instrument_provider_config,\n    dockerized_gateway=dockerized_gateway_config,\n    routing=RoutingConfig(default=True),\n)\n\n# Live trading node configuration\nconfig_node = TradingNodeConfig(\n    trader_id="LIVE-TRADER-001",\n    logging=LoggingConfig(log_level="INFO"),\n    data_clients={IB: data_client_config},\n    exec_clients={IB: exec_client_config},\n    data_engine=LiveDataEngineConfig(\n        time_bars_timestamp_on_close=False,\n        validate_data_sequence=True,\n    ),\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"multi-client-configuration",children:"Multi-client configuration"}),"\n",(0,t.jsx)(n.p,{children:"For advanced setups, you can configure multiple clients with different purposes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Separate data and execution clients with different client IDs\ndata_client_config = InteractiveBrokersDataClientConfig(\n    ibg_host="127.0.0.1",\n    ibg_port=7497,\n    ibg_client_id=1,  # Data client uses ID 1\n    market_data_type=IBMarketDataTypeEnum.REALTIME,\n    instrument_provider=instrument_provider_config,\n)\n\nexec_client_config = InteractiveBrokersExecClientConfig(\n    ibg_host="127.0.0.1",\n    ibg_port=7497,\n    ibg_client_id=2,  # Execution client uses ID 2\n    account_id="DU123456",\n    instrument_provider=instrument_provider_config,\n    routing=RoutingConfig(default=True),\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"running-the-trading-node",children:"Running the trading node"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def run_trading_node():\n    """Run the trading node with proper error handling."""\n    node = None\n    try:\n        # Create and build node\n        node = TradingNode(config=config_node)\n        node.add_data_client_factory(IB, InteractiveBrokersLiveDataClientFactory)\n        node.add_exec_client_factory(IB, InteractiveBrokersLiveExecClientFactory)\n        node.build()\n\n        # Set venue for portfolio\n        node.portfolio.set_specific_venue(IB_VENUE)\n\n        # Add your strategies here\n        # node.trader.add_strategy(YourStrategy())\n\n        # Run the node\n        node.run()\n\n    except KeyboardInterrupt:\n        print("Shutting down...")\n    except Exception as e:\n        print(f"Error: {e}")\n    finally:\n        if node:\n            node.dispose()\n\nif __name__ == "__main__":\n    run_trading_node()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"additional-configuration-options",children:"Additional configuration options"}),"\n",(0,t.jsx)(n.h4,{id:"environment-variables-1",children:"Environment variables"}),"\n",(0,t.jsx)(n.p,{children:"Set these environment variables for easier configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'export TWS_USERNAME="your_ib_username"\nexport TWS_PASSWORD="your_ib_password"\nexport TWS_ACCOUNT="your_account_id"\nexport IB_MAX_CONNECTION_ATTEMPTS="5"  # Optional: limit reconnection attempts\n'})}),"\n",(0,t.jsx)(n.h4,{id:"logging-configuration",children:"Logging configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Enhanced logging configuration\nlogging_config = LoggingConfig(\n    log_level="INFO",\n    log_level_file="DEBUG",\n    log_file_format="json",  # JSON format for structured logging\n    log_component_levels={\n        "InteractiveBrokersClient": "DEBUG",\n        "InteractiveBrokersDataClient": "INFO",\n        "InteractiveBrokersExecutionClient": "INFO",\n    },\n)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can find additional examples here: ",(0,t.jsx)(n.a,{href:"https://github.com/nautechsystems/nautilus_trader/tree/develop/examples/live/interactive_brokers",children:"https://github.com/nautechsystems/nautilus_trader/tree/develop/examples/live/interactive_brokers"})]}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-connection-issues",children:"Common connection issues"}),"\n",(0,t.jsx)(n.h4,{id:"connection-refused",children:"Connection refused"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cause"}),": TWS/Gateway not running or wrong port"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Verify TWS/Gateway is running and check port configuration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Default Ports"}),": TWS (7497/7496), IB Gateway (4002/4001)"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"authentication-errors",children:"Authentication errors"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cause"}),": Incorrect credentials or account not logged in"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Verify username/password and ensure account is logged into TWS/Gateway"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"client-id-conflicts",children:"Client ID conflicts"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cause"}),": Multiple clients using the same client ID"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Use unique client IDs for each connection"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"market-data-permissions",children:"Market data permissions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cause"}),": Insufficient market data subscriptions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Use ",(0,t.jsx)(n.code,{children:"IBMarketDataTypeEnum.DELAYED_FROZEN"})," for testing or subscribe to required data feeds"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"error-codes",children:"Error codes"}),"\n",(0,t.jsx)(n.p,{children:"Interactive Brokers uses specific error codes. Common ones include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"200"}),": No security definition found"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"201"}),": Order rejected - reason follows"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"202"}),": Order cancelled"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"300"}),": Can't find EId with ticker ID"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"354"}),": Requested market data is not subscribed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"2104"}),": Market data farm connection is OK"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"2106"}),": HMDS data farm connection is OK"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"performance-optimization",children:"Performance optimization"}),"\n",(0,t.jsx)(n.h4,{id:"reduce-data-volume",children:"Reduce data volume"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Reduce quote tick volume by ignoring size-only updates\ndata_config = InteractiveBrokersDataClientConfig(\n    ignore_quote_tick_size_updates=True,\n    # ... other config\n)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"connection-management-1",children:"Connection management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Set reasonable timeouts\nconfig = InteractiveBrokersDataClientConfig(\n    connection_timeout=300,  # 5 minutes\n    request_timeout=60,      # 1 minute\n    # ... other config\n)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"memory-management",children:"Memory management"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use appropriate bar sizes for your strategy"}),"\n",(0,t.jsx)(n.li,{children:"Limit the number of simultaneous subscriptions"}),"\n",(0,t.jsx)(n.li,{children:"Consider using historical data for backtesting instead of live data"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"best-practices-1",children:"Best practices"}),"\n",(0,t.jsx)(n.h4,{id:"security",children:"Security"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Never hardcode credentials in source code"}),"\n",(0,t.jsx)(n.li,{children:"Use environment variables for sensitive information"}),"\n",(0,t.jsx)(n.li,{children:"Use paper trading for development and testing"}),"\n",(0,t.jsxs)(n.li,{children:["Set ",(0,t.jsx)(n.code,{children:"read_only_api=True"})," for data-only applications"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"development-workflow",children:"Development workflow"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Start with Paper Trading"}),": Always test with paper trading first"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Delayed Data"}),": Use ",(0,t.jsx)(n.code,{children:"DELAYED_FROZEN"})," market data for development"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement Proper Error Handling"}),": Handle connection losses and API errors gracefully"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitor Logs"}),": Enable appropriate logging levels for debugging"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test Reconnection"}),": Test your strategy's behavior during connection interruptions"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"production-deployment",children:"Production deployment"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use dockerized gateway for automated deployments"}),"\n",(0,t.jsx)(n.li,{children:"Implement proper monitoring and alerting"}),"\n",(0,t.jsx)(n.li,{children:"Set up log aggregation and analysis"}),"\n",(0,t.jsx)(n.li,{children:"Use real-time data subscriptions only when necessary"}),"\n",(0,t.jsx)(n.li,{children:"Implement circuit breakers and position limits"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"order-management",children:"Order management"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Always validate orders before submission"}),"\n",(0,t.jsx)(n.li,{children:"Implement proper position sizing"}),"\n",(0,t.jsx)(n.li,{children:"Use appropriate order types for your strategy"}),"\n",(0,t.jsx)(n.li,{children:"Monitor order status and handle rejections"}),"\n",(0,t.jsx)(n.li,{children:"Implement timeout handling for order operations"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"debugging-tips",children:"Debugging tips"}),"\n",(0,t.jsx)(n.h4,{id:"enable-debug-logging",children:"Enable debug logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'logging_config = LoggingConfig(\n    log_level="DEBUG",\n    log_component_levels={\n        "InteractiveBrokersClient": "DEBUG",\n    },\n)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"monitor-connection-status",children:"Monitor connection status"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Check connection status in your strategy\nif not self.data_client.is_connected:\n    self.log.warning("Data client disconnected")\n'})}),"\n",(0,t.jsx)(n.h4,{id:"validate-instruments",children:"Validate instruments"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Ensure instruments are loaded before trading\ninstruments = self.cache.instruments()\nif not instruments:\n    self.log.error("No instruments loaded")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"support-and-resources",children:"Support and resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"IB API Documentation"}),": ",(0,t.jsx)(n.a,{href:"https://ibkrcampus.com/ibkr-api-page/trader-workstation-api/",children:"TWS API Guide"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"NautilusTrader Examples"}),": ",(0,t.jsx)(n.a,{href:"https://github.com/nautechsystems/nautilus_trader/tree/develop/examples/live/interactive_brokers",children:"GitHub Examples"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"IB Contract Search"}),": ",(0,t.jsx)(n.a,{href:"https://pennies.interactivebrokers.com/cstools/contract_info/",children:"Contract Information Center"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Market Data Subscriptions"}),": ",(0,t.jsx)(n.a,{href:"https://www.interactivebrokers.com/en/trading/market-data.php",children:"IB Market Data"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},9087:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var r=i(6363);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);