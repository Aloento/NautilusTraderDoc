"use strict";(globalThis.webpackChunknautilus_trader=globalThis.webpackChunknautilus_trader||[]).push([[8648],{248:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"concepts/strategies","title":"Strategies","description":"The heart of the NautilusTrader user experience is in writing and working with","source":"@site/docs/concepts/strategies.md","sourceDirName":"concepts","slug":"/concepts/strategies","permalink":"/concepts/strategies","draft":false,"unlisted":false,"editUrl":"https://github.com/Aloento/NautilusTraderDoc/tree/main/docs/concepts/strategies.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Reports","permalink":"/concepts/reports"},"next":{"title":"Developer Guide","permalink":"/developer_guide/"}}');var i=t(7259),s=t(9087);const o={},a="Strategies",d={},l=[{value:"Strategy implementation",id:"strategy-implementation",level:2},{value:"Handlers",id:"handlers",level:3},{value:"Stateful actions",id:"stateful-actions",level:4},{value:"Data handling",id:"data-handling",level:4},{value:"Order management",id:"order-management",level:4},{value:"Position management",id:"position-management",level:4},{value:"Generic event handling",id:"generic-event-handling",level:4},{value:"Handler example",id:"handler-example",level:4},{value:"Clock and timers",id:"clock-and-timers",level:3},{value:"Current timestamps",id:"current-timestamps",level:4},{value:"Time alerts",id:"time-alerts",level:4},{value:"Timers",id:"timers",level:4},{value:"Cache access",id:"cache-access",level:3},{value:"Fetching data",id:"fetching-data",level:4},{value:"Fetching execution objects",id:"fetching-execution-objects",level:4},{value:"Portfolio access",id:"portfolio-access",level:3},{value:"Account and positional information",id:"account-and-positional-information",level:4},{value:"Reports and analysis",id:"reports-and-analysis",level:4},{value:"Trading commands",id:"trading-commands",level:3},{value:"Submitting orders",id:"submitting-orders",level:4},{value:"Canceling orders",id:"canceling-orders",level:4},{value:"Modifying orders",id:"modifying-orders",level:4},{value:"Strategy configuration",id:"strategy-configuration",level:2},{value:"Managed GTD expiry",id:"managed-gtd-expiry",level:3},{value:"Multiple strategies",id:"multiple-strategies",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"strategies",children:"Strategies"})}),"\n",(0,i.jsxs)(n.p,{children:["The heart of the NautilusTrader user experience is in writing and working with\ntrading strategies. Defining a strategy involves inheriting the ",(0,i.jsx)(n.code,{children:"Strategy"})," class and\nimplementing the methods required by the strategy's logic."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key capabilities"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["All ",(0,i.jsx)(n.code,{children:"Actor"})," capabilities."]}),"\n",(0,i.jsx)(n.li,{children:"Order management."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Relationship with actors"}),":\nThe ",(0,i.jsx)(n.code,{children:"Strategy"})," class inherits from ",(0,i.jsx)(n.code,{children:"Actor"}),", which means strategies have access to all actor functionality\nplus order management capabilities."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["We recommend reviewing the ",(0,i.jsx)(n.a,{href:"/concepts/actors",children:"Actors"})," guide before diving into strategy development."]})}),"\n",(0,i.jsxs)(n.p,{children:["Strategies can be added to Nautilus systems in any ",(0,i.jsx)(n.a,{href:"/concepts/architecture#environment-contexts",children:"environment contexts"})," and will start sending commands and receiving\nevents based on their logic as soon as the system starts."]}),"\n",(0,i.jsx)(n.p,{children:"Using the basic building blocks of data ingest, event handling, and order management (which we will discuss\nbelow), it's possible to implement any type of strategy including directional, momentum, re-balancing,\npairs, market making etc."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.code,{children:"Strategy"})," ",(0,i.jsx)(n.a,{href:"/api_reference/trading",children:"API Reference"})," for a complete description\nof all available methods."]})}),"\n",(0,i.jsx)(n.p,{children:"There are two main parts of a Nautilus trading strategy:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The strategy implementation itself, defined by inheriting the ",(0,i.jsx)(n.code,{children:"Strategy"})," class."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.em,{children:"optional"})," strategy configuration, defined by inheriting the ",(0,i.jsx)(n.code,{children:"StrategyConfig"})," class."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Once a strategy is defined, the same source code can be used for backtesting and live trading."})}),"\n",(0,i.jsx)(n.p,{children:"The main capabilities of a strategy include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Historical data requests."}),"\n",(0,i.jsx)(n.li,{children:"Live data feed subscriptions."}),"\n",(0,i.jsx)(n.li,{children:"Setting time alerts or timers."}),"\n",(0,i.jsx)(n.li,{children:"Cache access."}),"\n",(0,i.jsx)(n.li,{children:"Portfolio access."}),"\n",(0,i.jsx)(n.li,{children:"Creating and managing orders and positions."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"strategy-implementation",children:"Strategy implementation"}),"\n",(0,i.jsxs)(n.p,{children:["Since a trading strategy is a class which inherits from ",(0,i.jsx)(n.code,{children:"Strategy"}),", you must define\na constructor where you can handle initialization. Minimally the base/super class needs to be initialized:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.trading.strategy import Strategy\n\nclass MyStrategy(Strategy):\n    def __init__(self) -> None:\n        super().__init__()  # <-- the superclass must be called to initialize the strategy\n"})}),"\n",(0,i.jsx)(n.p,{children:"From here, you can implement handlers as necessary to perform actions based on state transitions\nand events."}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["Do not call components such as ",(0,i.jsx)(n.code,{children:"clock"})," and ",(0,i.jsx)(n.code,{children:"logger"})," in the ",(0,i.jsx)(n.code,{children:"__init__"})," constructor (which is prior to registration).\nThis is because the systems clock and logging subsystem have not yet been initialized."]})}),"\n",(0,i.jsx)(n.h3,{id:"handlers",children:"Handlers"}),"\n",(0,i.jsxs)(n.p,{children:["Handlers are methods within the ",(0,i.jsx)(n.code,{children:"Strategy"})," class which may perform actions based on different types of events or on state changes.\nThese methods are named with the prefix ",(0,i.jsx)(n.code,{children:"on_*"}),". You can choose to implement any or all of these handler\nmethods depending on the specific goals and needs of your strategy."]}),"\n",(0,i.jsx)(n.p,{children:"The purpose of having multiple handlers for similar types of events is to provide flexibility in handling granularity.\nThis means that you can choose to respond to specific events with a dedicated handler, or use a more generic\nhandler to react to a range of related events (using typical switch statement logic).\nThe handlers are called in sequence from the most specific to the most general."}),"\n",(0,i.jsx)(n.h4,{id:"stateful-actions",children:"Stateful actions"}),"\n",(0,i.jsxs)(n.p,{children:["These handlers are triggered by lifecycle state changes of the ",(0,i.jsx)(n.code,{children:"Strategy"}),". It's recommended to:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:"on_start"})," method to initialize your strategy (e.g., fetch instruments, subscribe to data)."]}),"\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:"on_stop"})," method for cleanup tasks (e.g., cancel open orders, close open positions, unsubscribe from data)."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def on_start(self) -> None:\ndef on_stop(self) -> None:\ndef on_resume(self) -> None:\ndef on_reset(self) -> None:\ndef on_dispose(self) -> None:\ndef on_degrade(self) -> None:\ndef on_fault(self) -> None:\ndef on_save(self) -> dict[str, bytes]:  # Returns user-defined dictionary of state to be saved\ndef on_load(self, state: dict[str, bytes]) -> None:\n"})}),"\n",(0,i.jsx)(n.h4,{id:"data-handling",children:"Data handling"}),"\n",(0,i.jsx)(n.p,{children:"These handlers receive data updates, including built-in market data and custom user-defined data.\nYou can use these handlers to define actions upon receiving data object instances."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.core import Data\nfrom nautilus_trader.model import OrderBook\nfrom nautilus_trader.model import Bar\nfrom nautilus_trader.model import QuoteTick\nfrom nautilus_trader.model import TradeTick\nfrom nautilus_trader.model import OrderBookDeltas\nfrom nautilus_trader.model import InstrumentClose\nfrom nautilus_trader.model import InstrumentStatus\nfrom nautilus_trader.model.instruments import Instrument\n\ndef on_order_book_deltas(self, deltas: OrderBookDeltas) -> None:\ndef on_order_book(self, order_book: OrderBook) -> None:\ndef on_quote_tick(self, tick: QuoteTick) -> None:\ndef on_trade_tick(self, tick: TradeTick) -> None:\ndef on_bar(self, bar: Bar) -> None:\ndef on_instrument(self, instrument: Instrument) -> None:\ndef on_instrument_status(self, data: InstrumentStatus) -> None:\ndef on_instrument_close(self, data: InstrumentClose) -> None:\ndef on_historical_data(self, data: Data) -> None:\ndef on_data(self, data: Data) -> None:  # Custom data passed to this handler\ndef on_signal(self, signal: Data) -> None:  # Custom signals passed to this handler\n"})}),"\n",(0,i.jsx)(n.h4,{id:"order-management",children:"Order management"}),"\n",(0,i.jsxs)(n.p,{children:["These handlers receive events related to orders.\n",(0,i.jsx)(n.code,{children:"OrderEvent"})," type messages are passed to handlers in the following sequence:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Specific handler (e.g., ",(0,i.jsx)(n.code,{children:"on_order_accepted"}),", ",(0,i.jsx)(n.code,{children:"on_order_rejected"}),", etc.)"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"on_order_event(...)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"on_event(...)"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.model.events import OrderAccepted\nfrom nautilus_trader.model.events import OrderCanceled\nfrom nautilus_trader.model.events import OrderCancelRejected\nfrom nautilus_trader.model.events import OrderDenied\nfrom nautilus_trader.model.events import OrderEmulated\nfrom nautilus_trader.model.events import OrderEvent\nfrom nautilus_trader.model.events import OrderExpired\nfrom nautilus_trader.model.events import OrderFilled\nfrom nautilus_trader.model.events import OrderInitialized\nfrom nautilus_trader.model.events import OrderModifyRejected\nfrom nautilus_trader.model.events import OrderPendingCancel\nfrom nautilus_trader.model.events import OrderPendingUpdate\nfrom nautilus_trader.model.events import OrderRejected\nfrom nautilus_trader.model.events import OrderReleased\nfrom nautilus_trader.model.events import OrderSubmitted\nfrom nautilus_trader.model.events import OrderTriggered\nfrom nautilus_trader.model.events import OrderUpdated\n\ndef on_order_initialized(self, event: OrderInitialized) -> None:\ndef on_order_denied(self, event: OrderDenied) -> None:\ndef on_order_emulated(self, event: OrderEmulated) -> None:\ndef on_order_released(self, event: OrderReleased) -> None:\ndef on_order_submitted(self, event: OrderSubmitted) -> None:\ndef on_order_rejected(self, event: OrderRejected) -> None:\ndef on_order_accepted(self, event: OrderAccepted) -> None:\ndef on_order_canceled(self, event: OrderCanceled) -> None:\ndef on_order_expired(self, event: OrderExpired) -> None:\ndef on_order_triggered(self, event: OrderTriggered) -> None:\ndef on_order_pending_update(self, event: OrderPendingUpdate) -> None:\ndef on_order_pending_cancel(self, event: OrderPendingCancel) -> None:\ndef on_order_modify_rejected(self, event: OrderModifyRejected) -> None:\ndef on_order_cancel_rejected(self, event: OrderCancelRejected) -> None:\ndef on_order_updated(self, event: OrderUpdated) -> None:\ndef on_order_filled(self, event: OrderFilled) -> None:\ndef on_order_event(self, event: OrderEvent) -> None:  # All order event messages are eventually passed to this handler\n"})}),"\n",(0,i.jsx)(n.h4,{id:"position-management",children:"Position management"}),"\n",(0,i.jsxs)(n.p,{children:["These handlers receive events related to positions.\n",(0,i.jsx)(n.code,{children:"PositionEvent"})," type messages are passed to handlers in the following sequence:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Specific handler (e.g., ",(0,i.jsx)(n.code,{children:"on_position_opened"}),", ",(0,i.jsx)(n.code,{children:"on_position_changed"}),", etc.)"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"on_position_event(...)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"on_event(...)"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.model.events import PositionChanged\nfrom nautilus_trader.model.events import PositionClosed\nfrom nautilus_trader.model.events import PositionEvent\nfrom nautilus_trader.model.events import PositionOpened\n\ndef on_position_opened(self, event: PositionOpened) -> None:\ndef on_position_changed(self, event: PositionChanged) -> None:\ndef on_position_closed(self, event: PositionClosed) -> None:\ndef on_position_event(self, event: PositionEvent) -> None:  # All position event messages are eventually passed to this handler\n"})}),"\n",(0,i.jsx)(n.h4,{id:"generic-event-handling",children:"Generic event handling"}),"\n",(0,i.jsx)(n.p,{children:"This handler will eventually receive all event messages which arrive at the strategy, including those for\nwhich no other specific handler exists."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.core.message import Event\n\ndef on_event(self, event: Event) -> None:\n"})}),"\n",(0,i.jsx)(n.h4,{id:"handler-example",children:"Handler example"}),"\n",(0,i.jsxs)(n.p,{children:["The following example shows a typical ",(0,i.jsx)(n.code,{children:"on_start"})," handler method implementation (taken from the example EMA cross strategy).\nHere we can see the following:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Indicators being registered to receive bar updates."}),"\n",(0,i.jsx)(n.li,{children:"Historical data being requested (to hydrate the indicators)."}),"\n",(0,i.jsx)(n.li,{children:"Live data being subscribed to."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def on_start(self) -> None:\n    """\n    Actions to be performed on strategy start.\n    """\n    self.instrument = self.cache.instrument(self.instrument_id)\n    if self.instrument is None:\n        self.log.error(f"Could not find instrument for {self.instrument_id}")\n        self.stop()\n        return\n\n    # Register the indicators for updating\n    self.register_indicator_for_bars(self.bar_type, self.fast_ema)\n    self.register_indicator_for_bars(self.bar_type, self.slow_ema)\n\n    # Get historical data\n    self.request_bars(self.bar_type)\n\n    # Subscribe to live data\n    self.subscribe_bars(self.bar_type)\n    self.subscribe_quote_ticks(self.instrument_id)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"clock-and-timers",children:"Clock and timers"}),"\n",(0,i.jsxs)(n.p,{children:["Strategies have access to a ",(0,i.jsx)(n.code,{children:"Clock"})," which provides a number of methods for creating\ndifferent timestamps, as well as setting time alerts or timers to trigger ",(0,i.jsx)(n.code,{children:"TimeEvent"}),"s."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.code,{children:"Clock"})," ",(0,i.jsx)(n.a,{href:"/api_reference/common",children:"API reference"})," for a complete list of available methods."]})}),"\n",(0,i.jsx)(n.h4,{id:"current-timestamps",children:"Current timestamps"}),"\n",(0,i.jsx)(n.p,{children:"While there are multiple ways to obtain current timestamps, here are two commonly used methods as examples:"}),"\n",(0,i.jsxs)(n.p,{children:["To get the current UTC timestamp as a tz-aware ",(0,i.jsx)(n.code,{children:"pd.Timestamp"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import pandas as pd\n\n\nnow: pd.Timestamp = self.clock.utc_now()\n"})}),"\n",(0,i.jsx)(n.p,{children:"To get the current UTC timestamp as nanoseconds since the UNIX epoch:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"unix_nanos: int = self.clock.timestamp_ns()\n"})}),"\n",(0,i.jsx)(n.h4,{id:"time-alerts",children:"Time alerts"}),"\n",(0,i.jsxs)(n.p,{children:["Time alerts can be set which will result in a ",(0,i.jsx)(n.code,{children:"TimeEvent"})," being dispatched to the ",(0,i.jsx)(n.code,{children:"on_event"})," handler at the\nspecified alert time. In a live context, this might be slightly delayed by a few microseconds."]}),"\n",(0,i.jsx)(n.p,{children:"This example sets a time alert to trigger one minute from the current time:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import pandas as pd\n\n# Fire a TimeEvent one minute from now\nself.clock.set_time_alert(\n    name="MyTimeAlert1",\n    alert_time=self.clock.utc_now() + pd.Timedelta(minutes=1),\n)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"timers",children:"Timers"}),"\n",(0,i.jsxs)(n.p,{children:["Continuous timers can be set up which will generate a ",(0,i.jsx)(n.code,{children:"TimeEvent"})," at regular intervals until the timer expires\nor is canceled."]}),"\n",(0,i.jsx)(n.p,{children:"This example sets a timer to fire once per minute, starting immediately:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import pandas as pd\n\n# Fire a TimeEvent every minute\nself.clock.set_timer(\n    name="MyTimer1",\n    interval=pd.Timedelta(minutes=1),\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"cache-access",children:"Cache access"}),"\n",(0,i.jsxs)(n.p,{children:["The trader instances central ",(0,i.jsx)(n.code,{children:"Cache"})," can be accessed to fetch data and execution objects (orders, positions etc).\nThere are many methods available often with filtering functionality, here we go through some basic use cases."]}),"\n",(0,i.jsx)(n.h4,{id:"fetching-data",children:"Fetching data"}),"\n",(0,i.jsx)(n.p,{children:"The following example shows how data can be fetched from the cache (assuming some instrument ID attribute is assigned):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"last_quote = self.cache.quote_tick(self.instrument_id)\nlast_trade = self.cache.trade_tick(self.instrument_id)\nlast_bar = self.cache.bar(bar_type)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"fetching-execution-objects",children:"Fetching execution objects"}),"\n",(0,i.jsx)(n.p,{children:"The following example shows how individual order and position objects can be fetched from the cache:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"order = self.cache.order(client_order_id)\nposition = self.cache.position(position_id)\n\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.code,{children:"Cache"})," ",(0,i.jsx)(n.a,{href:"/api_reference/cache",children:"API Reference"})," for a complete description\nof all available methods."]})}),"\n",(0,i.jsx)(n.h3,{id:"portfolio-access",children:"Portfolio access"}),"\n",(0,i.jsxs)(n.p,{children:["The traders central ",(0,i.jsx)(n.code,{children:"Portfolio"})," can be accessed to fetch account and positional information.\nThe following shows a general outline of available methods."]}),"\n",(0,i.jsx)(n.h4,{id:"account-and-positional-information",children:"Account and positional information"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import decimal\n\nfrom nautilus_trader.accounting.accounts.base import Account\nfrom nautilus_trader.model import Venue\nfrom nautilus_trader.model import Currency\nfrom nautilus_trader.model import Money\nfrom nautilus_trader.model import InstrumentId\n\ndef account(self, venue: Venue) -> Account\n\ndef balances_locked(self, venue: Venue) -> dict[Currency, Money]\ndef margins_init(self, venue: Venue) -> dict[Currency, Money]\ndef margins_maint(self, venue: Venue) -> dict[Currency, Money]\ndef unrealized_pnls(self, venue: Venue) -> dict[Currency, Money]\ndef realized_pnls(self, venue: Venue) -> dict[Currency, Money]\ndef net_exposures(self, venue: Venue) -> dict[Currency, Money]\n\ndef unrealized_pnl(self, instrument_id: InstrumentId) -> Money\ndef realized_pnl(self, instrument_id: InstrumentId) -> Money\ndef net_exposure(self, instrument_id: InstrumentId) -> Money\ndef net_position(self, instrument_id: InstrumentId) -> decimal.Decimal\n\ndef is_net_long(self, instrument_id: InstrumentId) -> bool\ndef is_net_short(self, instrument_id: InstrumentId) -> bool\ndef is_flat(self, instrument_id: InstrumentId) -> bool\ndef is_completely_flat(self) -> bool\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.code,{children:"Portfolio"})," ",(0,i.jsx)(n.a,{href:"/api_reference/portfolio",children:"API Reference"})," for a complete description\nof all available methods."]})}),"\n",(0,i.jsx)(n.h4,{id:"reports-and-analysis",children:"Reports and analysis"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Portfolio"})," also makes a ",(0,i.jsx)(n.code,{children:"PortfolioAnalyzer"})," available, which can be fed with a flexible amount of data\n(to accommodate different lookback windows). The analyzer can provide tracking for and generating of performance\nmetrics and statistics."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.code,{children:"PortfolioAnalyzer"})," ",(0,i.jsx)(n.a,{href:"/api_reference/analysis",children:"API Reference"})," for a complete description\nof all available methods."]})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.a,{href:"/concepts/portfolio#portfolio-statistics",children:"Portfolio statistics"})," guide."]})}),"\n",(0,i.jsx)(n.h3,{id:"trading-commands",children:"Trading commands"}),"\n",(0,i.jsx)(n.p,{children:"NautilusTrader offers a comprehensive suite of trading commands, enabling granular order management\ntailored for algorithmic trading. These commands are essential for executing strategies, managing risk,\nand ensuring seamless interaction with various trading venues. In the following sections, we will\ndelve into the specifics of each command and its use cases."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/concepts/execution",children:"Execution"})," guide explains the flow through the system, and can be helpful to read in conjunction with the below."]})}),"\n",(0,i.jsx)(n.h4,{id:"submitting-orders",children:"Submitting orders"}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.code,{children:"OrderFactory"})," is provided on the base class for every ",(0,i.jsx)(n.code,{children:"Strategy"})," as a convenience, reducing\nthe amount of boilerplate required to create different ",(0,i.jsx)(n.code,{children:"Order"})," objects (although these objects\ncan still be initialized directly with the ",(0,i.jsx)(n.code,{children:"Order.__init__(...)"})," constructor if the trader prefers)."]}),"\n",(0,i.jsxs)(n.p,{children:["The component a ",(0,i.jsx)(n.code,{children:"SubmitOrder"})," or ",(0,i.jsx)(n.code,{children:"SubmitOrderList"})," command will flow to for execution depends on the following:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If an ",(0,i.jsx)(n.code,{children:"emulation_trigger"})," is specified, the command will ",(0,i.jsx)(n.em,{children:"firstly"})," be sent to the ",(0,i.jsx)(n.code,{children:"OrderEmulator"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["If an ",(0,i.jsx)(n.code,{children:"exec_algorithm_id"})," is specified (with no ",(0,i.jsx)(n.code,{children:"emulation_trigger"}),"), the command will ",(0,i.jsx)(n.em,{children:"firstly"})," be sent to the relevant ",(0,i.jsx)(n.code,{children:"ExecAlgorithm"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Otherwise, the command will ",(0,i.jsx)(n.em,{children:"firstly"})," be sent to the ",(0,i.jsx)(n.code,{children:"RiskEngine"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This example submits a ",(0,i.jsx)(n.code,{children:"LIMIT"})," BUY order for emulation (see ",(0,i.jsx)(n.a,{href:"/concepts/orders#emulated-orders",children:"Emulated Orders"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.model.enums import OrderSide\nfrom nautilus_trader.model.enums import TriggerType\nfrom nautilus_trader.model.orders import LimitOrder\n\n\ndef buy(self) -> None:\n    """\n    Users simple buy method (example).\n    """\n    order: LimitOrder = self.order_factory.limit(\n        instrument_id=self.instrument_id,\n        order_side=OrderSide.BUY,\n        quantity=self.instrument.make_qty(self.trade_size),\n        price=self.instrument.make_price(5000.00),\n        emulation_trigger=TriggerType.LAST_PRICE,\n    )\n\n    self.submit_order(order)\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"You can specify both order emulation and an execution algorithm."})}),"\n",(0,i.jsxs)(n.p,{children:["This example submits a ",(0,i.jsx)(n.code,{children:"MARKET"})," BUY order to a TWAP execution algorithm:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from nautilus_trader.model.enums import OrderSide\nfrom nautilus_trader.model.enums import TimeInForce\nfrom nautilus_trader.model import ExecAlgorithmId\n\n\ndef buy(self) -> None:\n    """\n    Users simple buy method (example).\n    """\n    order: MarketOrder = self.order_factory.market(\n        instrument_id=self.instrument_id,\n        order_side=OrderSide.BUY,\n        quantity=self.instrument.make_qty(self.trade_size),\n        time_in_force=TimeInForce.FOK,\n        exec_algorithm_id=ExecAlgorithmId("TWAP"),\n        exec_algorithm_params={"horizon_secs": 20, "interval_secs": 2.5},\n    )\n\n    self.submit_order(order)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"canceling-orders",children:"Canceling orders"}),"\n",(0,i.jsx)(n.p,{children:"Orders can be canceled individually, as a batch, or all orders for an instrument (with an optional side filter)."}),"\n",(0,i.jsxs)(n.p,{children:["If the order is already ",(0,i.jsx)(n.em,{children:"closed"})," or already pending cancel, then a warning will be logged."]}),"\n",(0,i.jsxs)(n.p,{children:["If the order is currently ",(0,i.jsx)(n.em,{children:"open"})," then the status will become ",(0,i.jsx)(n.code,{children:"PENDING_CANCEL"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The component a ",(0,i.jsx)(n.code,{children:"CancelOrder"}),", ",(0,i.jsx)(n.code,{children:"CancelAllOrders"})," or ",(0,i.jsx)(n.code,{children:"BatchCancelOrders"})," command will flow to for execution depends on the following:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If the order is currently emulated, the command will ",(0,i.jsx)(n.em,{children:"firstly"})," be sent to the ",(0,i.jsx)(n.code,{children:"OrderEmulator"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["If an ",(0,i.jsx)(n.code,{children:"exec_algorithm_id"})," is specified (with no ",(0,i.jsx)(n.code,{children:"emulation_trigger"}),"), and the order is still active within the local system, the command will ",(0,i.jsx)(n.em,{children:"firstly"})," be sent to the relevant ",(0,i.jsx)(n.code,{children:"ExecAlgorithm"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Otherwise, the order will ",(0,i.jsx)(n.em,{children:"firstly"})," be sent to the ",(0,i.jsx)(n.code,{children:"ExecutionEngine"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Any managed GTD timer will also be canceled after the command has left the strategy."})}),"\n",(0,i.jsx)(n.p,{children:"The following shows how to cancel an individual order:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"\nself.cancel_order(order)\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"The following shows how to cancel a batch of orders:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.model import Order\n\n\nmy_order_list: list[Order] = [order1, order2, order3]\nself.cancel_orders(my_order_list)\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"The following shows how to cancel all orders:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"\nself.cancel_all_orders()\n\n"})}),"\n",(0,i.jsx)(n.h4,{id:"modifying-orders",children:"Modifying orders"}),"\n",(0,i.jsxs)(n.p,{children:["Orders can be modified individually when emulated, or ",(0,i.jsx)(n.em,{children:"open"})," on a venue (if supported)."]}),"\n",(0,i.jsxs)(n.p,{children:["If the order is already ",(0,i.jsx)(n.em,{children:"closed"})," or already pending cancel, then a warning will be logged.\nIf the order is currently ",(0,i.jsx)(n.em,{children:"open"})," then the status will become ",(0,i.jsx)(n.code,{children:"PENDING_UPDATE"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"At least one value must differ from the original order for the command to be valid."})}),"\n",(0,i.jsxs)(n.p,{children:["The component a ",(0,i.jsx)(n.code,{children:"ModifyOrder"})," command will flow to for execution depends on the following:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If the order is currently emulated, the command will ",(0,i.jsx)(n.em,{children:"firstly"})," be sent to the ",(0,i.jsx)(n.code,{children:"OrderEmulator"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Otherwise, the order will ",(0,i.jsx)(n.em,{children:"firstly"})," be sent to the ",(0,i.jsx)(n.code,{children:"RiskEngine"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Once an order is under the control of an execution algorithm, it cannot be directly modified by a strategy (only canceled)."})}),"\n",(0,i.jsxs)(n.p,{children:["The following shows how to modify the size of ",(0,i.jsx)(n.code,{children:"LIMIT"})," BUY order currently ",(0,i.jsx)(n.em,{children:"open"})," on a venue:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.model import Quantity\n\n\nnew_quantity: Quantity = Quantity.from_int(5)\nself.modify_order(order, new_quantity)\n\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"The price and trigger price can also be modified (when emulated or supported by a venue)."})}),"\n",(0,i.jsx)(n.h2,{id:"strategy-configuration",children:"Strategy configuration"}),"\n",(0,i.jsx)(n.p,{children:"The main purpose of a separate configuration class is to provide total flexibility\nover where and how a trading strategy can be instantiated. This includes being able\nto serialize strategies and their configurations over the wire, making distributed backtesting\nand firing up remote live trading possible."}),"\n",(0,i.jsx)(n.p,{children:"This configuration flexibility is actually opt-in, in that you can actually choose not to have\nany strategy configuration beyond the parameters you choose to pass into your\nstrategies' constructor. If you would like to run distributed backtests or launch\nlive trading servers remotely, then you will need to define a configuration."}),"\n",(0,i.jsx)(n.p,{children:"Here is an example configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from decimal import Decimal\nfrom nautilus_trader.config import StrategyConfig\nfrom nautilus_trader.model import Bar, BarType\nfrom nautilus_trader.model import InstrumentId\nfrom nautilus_trader.trading.strategy import Strategy\n\n\n# Configuration definition\nclass MyStrategyConfig(StrategyConfig):\n    instrument_id: InstrumentId   # example value: "ETHUSDT-PERP.BINANCE"\n    bar_type: BarType             # example value: "ETHUSDT-PERP.BINANCE-15-MINUTE[LAST]-EXTERNAL"\n    fast_ema_period: int = 10\n    slow_ema_period: int = 20\n    trade_size: Decimal\n    order_id_tag: str\n\n\n# Strategy definition\nclass MyStrategy(Strategy):\n    def __init__(self, config: MyStrategyConfig) -> None:\n        # Always initialize the parent Strategy class\n        # After this, configuration is stored and available via `self.config`\n        super().__init__(config)\n\n        # Custom state variables\n        self.time_started = None\n        self.count_of_processed_bars: int = 0\n\n    def on_start(self) -> None:\n        self.time_started = self.clock.utc_now()    # Remember time, when strategy started\n        self.subscribe_bars(self.config.bar_type)   # See how configuration data are exposed via `self.config`\n\n    def on_bar(self, bar: Bar):\n        self.count_of_processed_bars += 1           # Update count of processed bars\n\n\n# Instantiate configuration with specific values. By setting:\n#   - InstrumentId - we parameterize the instrument the strategy will trade.\n#   - BarType - we parameterize bar-data, that strategy will trade.\nconfig = MyStrategyConfig(\n    instrument_id=InstrumentId.from_str("ETHUSDT-PERP.BINANCE"),\n    bar_type=BarType.from_str("ETHUSDT-PERP.BINANCE-15-MINUTE[LAST]-EXTERNAL"),\n    trade_size=Decimal(1),\n    order_id_tag="001",\n)\n\n# Pass configuration to our trading strategy.\nstrategy = MyStrategy(config=config)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["When implementing strategies, it's recommended to access configuration values directly through ",(0,i.jsx)(n.code,{children:"self.config"}),".\nThis provides clear separation between:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Configuration data (accessed via ",(0,i.jsx)(n.code,{children:"self.config"}),"):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Contains initial settings, that define how the strategy works."}),"\n",(0,i.jsxs)(n.li,{children:["Example: ",(0,i.jsx)(n.code,{children:"self.config.trade_size"}),", ",(0,i.jsx)(n.code,{children:"self.config.instrument_id"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Strategy state variables (as direct attributes):"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Track any custom state of the strategy."}),"\n",(0,i.jsxs)(n.li,{children:["Example: ",(0,i.jsx)(n.code,{children:"self.time_started"}),", ",(0,i.jsx)(n.code,{children:"self.count_of_processed_bars"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This separation makes code easier to understand and maintain."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Even though it often makes sense to define a strategy which will trade a single\ninstrument. The number of instruments a single strategy can work with is only limited by machine resources."})}),"\n",(0,i.jsx)(n.h3,{id:"managed-gtd-expiry",children:"Managed GTD expiry"}),"\n",(0,i.jsxs)(n.p,{children:["It's possible for the strategy to manage expiry for orders with a time in force of GTD (",(0,i.jsx)(n.em,{children:"Good 'till Date"}),").\nThis may be desirable if the exchange/broker does not support this time in force option, or for any\nreason you prefer the strategy to manage this."]}),"\n",(0,i.jsxs)(n.p,{children:["To use this option, pass ",(0,i.jsx)(n.code,{children:"manage_gtd_expiry=True"})," to your ",(0,i.jsx)(n.code,{children:"StrategyConfig"}),". When an order is submitted with\na time in force of GTD, the strategy will automatically start an internal time alert.\nOnce the internal GTD time alert is reached, the order will be canceled (if not already ",(0,i.jsx)(n.em,{children:"closed"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["Some venues (such as Binance Futures) support the GTD time in force, so to avoid conflicts when using\n",(0,i.jsx)(n.code,{children:"managed_gtd_expiry"})," you should set ",(0,i.jsx)(n.code,{children:"use_gtd=False"})," for your execution client config."]}),"\n",(0,i.jsx)(n.h3,{id:"multiple-strategies",children:"Multiple strategies"}),"\n",(0,i.jsxs)(n.p,{children:["If you intend running multiple instances of the same strategy, with different\nconfigurations (such as trading different instruments), then you will need to define\na unique ",(0,i.jsx)(n.code,{children:"order_id_tag"})," for each of these strategies (as shown above)."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"The platform has built-in safety measures in the event that two strategies share a\nduplicated strategy ID, then an exception will be raised that the strategy ID has already been registered."})}),"\n",(0,i.jsxs)(n.p,{children:["The reason for this is that the system must be able to identify which strategy\nvarious commands and events belong to. A strategy ID is made up of the\nstrategy class name, and the strategies ",(0,i.jsx)(n.code,{children:"order_id_tag"})," separated by a hyphen. For\nexample the above config would result in a strategy ID of ",(0,i.jsx)(n.code,{children:"MyStrategy-001"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.code,{children:"StrategyId"})," ",(0,i.jsx)(n.a,{href:"/api_reference/model/identifiers",children:"API Reference"})," for further details."]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},9087:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6363);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);