"use strict";(globalThis.webpackChunknautilus_trader=globalThis.webpackChunknautilus_trader||[]).push([[8680],{9087:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var r=s(6363);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}},9475:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"developer_guide/environment_setup","title":"Environment Setup","description":"For development we recommend using the PyCharm Professional edition IDE, as it interprets Cython syntax. Alternatively, you could use Visual Studio Code with a Cython extension.","source":"@site/docs/developer_guide/environment_setup.md","sourceDirName":"developer_guide","slug":"/developer_guide/environment_setup","permalink":"/developer_guide/environment_setup","draft":false,"unlisted":false,"editUrl":"https://github.com/Aloento/NautilusTraderDoc/tree/main/docs/developer_guide/environment_setup.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Docs Style Guide","permalink":"/developer_guide/docs"},"next":{"title":"FFI Memory Contract","permalink":"/developer_guide/ffi"}}');var i=s(7259),t=s(9087);const l={},o="Environment Setup",a={},d=[{value:"Setup",id:"setup",level:2},{value:"Builds",id:"builds",level:2},{value:"Faster builds",id:"faster-builds",level:2},{value:"Services",id:"services",level:2},{value:"Nautilus CLI developer guide",id:"nautilus-cli-developer-guide",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Install",id:"install",level:2},{value:"Commands",id:"commands",level:2},{value:"Database",id:"database",level:3},{value:"Rust analyzer settings",id:"rust-analyzer-settings",level:2},{value:"VSCode",id:"vscode",level:3},{value:"Astro Nvim (Neovim + AstroLSP)",id:"astro-nvim-neovim--astrolsp",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"environment-setup",children:"Environment Setup"})}),"\n",(0,i.jsxs)(n.p,{children:["For development we recommend using the PyCharm ",(0,i.jsx)(n.em,{children:"Professional"})," edition IDE, as it interprets Cython syntax. Alternatively, you could use Visual Studio Code with a Cython extension."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://docs.astral.sh/uv",children:"uv"})," is the preferred tool for handling all Python virtual environments and dependencies."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://pre-commit.com/",children:"pre-commit"})," is used to automatically run various checks, auto-formatters and linting tools at commit."]}),"\n",(0,i.jsxs)(n.p,{children:["NautilusTrader uses increasingly more ",(0,i.jsx)(n.a,{href:"https://www.rust-lang.org",children:"Rust"}),", so Rust should be installed on your system as well\n(",(0,i.jsx)(n.a,{href:"https://www.rust-lang.org/tools/install",children:"installation guide"}),")."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["NautilusTrader ",(0,i.jsx)(n.em,{children:"must"})," compile and run on ",(0,i.jsx)(n.strong,{children:"Linux, macOS, and Windows"}),". Please keep portability in\nmind (use ",(0,i.jsx)(n.code,{children:"std::path::Path"}),", avoid Bash-isms in shell scripts, etc.)."]})}),"\n",(0,i.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,i.jsx)(n.p,{children:"The following steps are for UNIX-like systems, and only need to be completed once."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Follow the ",(0,i.jsx)(n.a,{href:"/getting_started/installation",children:"installation guide"})," to set up the project with a modification to the final command to install development and test dependencies:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"uv sync --active --all-groups --all-extras\n"})}),"\n",(0,i.jsx)(n.p,{children:"or"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"make install\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you're developing and iterating frequently, then compiling in debug mode is often sufficient and ",(0,i.jsx)(n.em,{children:"significantly"})," faster than a fully optimized build.\nTo install in debug mode, use:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"make install-debug\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Set up the pre-commit hook which will then run automatically at commit:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pre-commit install\n"})}),"\n",(0,i.jsx)(n.p,{children:"Before opening a pull-request run the formatting and lint suite locally so that CI passes on the\nfirst attempt:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"make format\nmake pre-commit\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Make sure the Rust compiler reports ",(0,i.jsx)(n.strong,{children:"zero errors"})," \u2013 broken builds slow everyone down."]}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optional"}),": For frequent Rust development, configure the ",(0,i.jsx)(n.code,{children:"PYO3_PYTHON"})," variable in ",(0,i.jsx)(n.code,{children:".cargo/config.toml"})," with the path to the Python interpreter. This helps reduce recompilation times for IDE/rust-analyzer based ",(0,i.jsx)(n.code,{children:"cargo check"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'PYTHON_PATH=$(which python)\necho -e "\\n[env]\\nPYO3_PYTHON = \\"$PYTHON_PATH\\"" >> .cargo/config.toml\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Since ",(0,i.jsx)(n.code,{children:".cargo/config.toml"})," is tracked, configure git to skip any local modifications:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git update-index --skip-worktree .cargo/config.toml\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To restore tracking: ",(0,i.jsx)(n.code,{children:"git update-index --no-skip-worktree .cargo/config.toml"})]}),"\n",(0,i.jsx)(n.h2,{id:"builds",children:"Builds"}),"\n",(0,i.jsxs)(n.p,{children:["Following any changes to ",(0,i.jsx)(n.code,{children:".rs"}),", ",(0,i.jsx)(n.code,{children:".pyx"})," or ",(0,i.jsx)(n.code,{children:".pxd"})," files, you can re-compile by running:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"uv run --no-sync python build.py\n"})}),"\n",(0,i.jsx)(n.p,{children:"or"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"make build\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you're developing and iterating frequently, then compiling in debug mode is often sufficient and ",(0,i.jsx)(n.em,{children:"significantly"})," faster than a fully optimized build.\nTo compile in debug mode, use:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"make build-debug\n"})}),"\n",(0,i.jsx)(n.h2,{id:"faster-builds",children:"Faster builds"}),"\n",(0,i.jsx)(n.p,{children:"The cranelift backends reduces build time significantly for dev, testing and IDE checks. However, cranelift is available on the nightly toolchain and needs extra configuration. Install the nightly toolchain"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"rustup install nightly\nrustup override set nightly\nrustup component add rust-analyzer # install nightly lsp\nrustup override set stable # reset to stable\n"})}),"\n",(0,i.jsxs)(n.p,{children:['Activate the nightly feature and use "cranelift" backend for dev and testing profiles in workspace ',(0,i.jsx)(n.code,{children:"Cargo.toml"}),". You can apply the below patch using ",(0,i.jsx)(n.code,{children:"git apply <patch>"}),". You can remove it using ",(0,i.jsx)(n.code,{children:"git apply -R <patch>"})," before pushing changes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'diff --git a/Cargo.toml b/Cargo.toml\nindex 62b78cd8d0..beb0800211 100644\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -1,3 +1,6 @@\n+# This line needs to come before anything else in Cargo.toml\n+cargo-features = ["codegen-backend"]\n+\n [workspace]\n resolver = "2"\n members = [\n@@ -140,6 +143,7 @@ lto = false\n panic = "unwind"\n incremental = true\n codegen-units = 256\n+codegen-backend = "cranelift"\n\n [profile.test]\n opt-level = 0\n@@ -150,11 +154,13 @@ strip = false\n lto = false\n incremental = true\n codegen-units = 256\n+codegen-backend = "cranelift"\n\n [profile.nextest]\n inherits = "test"\n debug = false # Improves compile times\n strip = "debuginfo" # Improves compile times\n+codegen-backend = "cranelift"\n\n [profile.release]\n opt-level = 3\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Pass ",(0,i.jsx)(n.code,{children:"RUSTUP_TOOLCHAIN=nightly"})," when running ",(0,i.jsx)(n.code,{children:"make build-debug"})," like commands and include it in all ",(0,i.jsx)(n.a,{href:"#rust-analyzer-settings",children:"rust analyzer settings"})," for faster builds and IDE checks."]}),"\n",(0,i.jsx)(n.h2,{id:"services",children:"Services"}),"\n",(0,i.jsxs)(n.p,{children:["You can use ",(0,i.jsx)(n.code,{children:"docker-compose.yml"})," file located in ",(0,i.jsx)(n.code,{children:".docker"})," directory\nto bootstrap the Nautilus working environment. This will start the following services:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker-compose up -d\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you only want specific services running (like ",(0,i.jsx)(n.code,{children:"postgres"})," for example), you can start them with command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker-compose up -d postgres\n"})}),"\n",(0,i.jsx)(n.p,{children:"Used services are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"postgres"}),": Postgres database with root user ",(0,i.jsx)(n.code,{children:"POSTRES_USER"})," which defaults to ",(0,i.jsx)(n.code,{children:"postgres"}),", ",(0,i.jsx)(n.code,{children:"POSTGRES_PASSWORD"})," which defaults to ",(0,i.jsx)(n.code,{children:"pass"})," and ",(0,i.jsx)(n.code,{children:"POSTGRES_DB"})," which defaults to ",(0,i.jsx)(n.code,{children:"postgres"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"redis"}),": Redis server."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pgadmin"}),": PgAdmin4 for database management and administration."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Please use this as development environment only. For production, use a proper and more secure setup."})}),"\n",(0,i.jsxs)(n.p,{children:["After the services has been started, you must log in with ",(0,i.jsx)(n.code,{children:"psql"})," cli to create ",(0,i.jsx)(n.code,{children:"nautilus"})," Postgres database.\nTo do that you can run, and type ",(0,i.jsx)(n.code,{children:"POSTGRES_PASSWORD"})," from docker service setup"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"psql -h localhost -p 5432 -U postgres\n"})}),"\n",(0,i.jsxs)(n.p,{children:["After you have logged in as ",(0,i.jsx)(n.code,{children:"postgres"})," administrator, run ",(0,i.jsx)(n.code,{children:"CREATE DATABASE"})," command with target db name (we use ",(0,i.jsx)(n.code,{children:"nautilus"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'psql (16.2, server 15.2 (Debian 15.2-1.pgdg110+1))\nType "help" for help.\n\npostgres=# CREATE DATABASE nautilus;\nCREATE DATABASE\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"nautilus-cli-developer-guide",children:"Nautilus CLI developer guide"}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"The Nautilus CLI is a command-line interface tool for interacting with the NautilusTrader ecosystem.\nIt offers commands for managing the PostgreSQL database and handling various trading operations."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"The Nautilus CLI command is only supported on UNIX-like systems."})}),"\n",(0,i.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,i.jsxs)(n.p,{children:["You can install the Nautilus CLI using the below Makefile target, which leverages ",(0,i.jsx)(n.code,{children:"cargo install"})," under the hood.\nThis will place the nautilus binary in your system's PATH, assuming Rust's ",(0,i.jsx)(n.code,{children:"cargo"})," is properly configured."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"make install-cli\n"})}),"\n",(0,i.jsx)(n.h2,{id:"commands",children:"Commands"}),"\n",(0,i.jsxs)(n.p,{children:["You can run ",(0,i.jsx)(n.code,{children:"nautilus --help"})," to view the CLI structure and available command groups:"]}),"\n",(0,i.jsx)(n.h3,{id:"database",children:"Database"}),"\n",(0,i.jsxs)(n.p,{children:["These commands handle bootstrapping the PostgreSQL database.\nTo use them, you need to provide the correct connection configuration,\neither through command-line arguments or a ",(0,i.jsx)(n.code,{children:".env"})," file located in the root directory or the current working directory."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--host"})," or ",(0,i.jsx)(n.code,{children:"POSTGRES_HOST"})," for the database host"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--port"})," or ",(0,i.jsx)(n.code,{children:"POSTGRES_PORT"})," for the database port"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--user"})," or ",(0,i.jsx)(n.code,{children:"POSTGRES_USER"})," for the root administrator (typically the postgres user)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--password"})," or ",(0,i.jsx)(n.code,{children:"POSTGRES_PASSWORD"})," for the root administrator's password"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--database"})," or ",(0,i.jsx)(n.code,{children:"POSTGRES_DATABASE"})," for both the database ",(0,i.jsx)(n.strong,{children:"name and the new user"})," with privileges to that database\n(e.g., if you provide ",(0,i.jsx)(n.code,{children:"nautilus"})," as the value, a new user named nautilus will be created with the password from ",(0,i.jsx)(n.code,{children:"POSTGRES_PASSWORD"}),", and the ",(0,i.jsx)(n.code,{children:"nautilus"})," database will be bootstrapped with this user as the owner)."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Example of ",(0,i.jsx)(n.code,{children:".env"})," file"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"POSTGRES_HOST=localhost\nPOSTGRES_PORT=5432\nPOSTGRES_USERNAME=postgres\nPOSTGRES_PASSWORD=pass\nPOSTGRES_DATABASE=nautilus\n"})}),"\n",(0,i.jsx)(n.p,{children:"List of commands are:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"nautilus database init"}),": Will bootstrap schema, roles and all sql files located in ",(0,i.jsx)(n.code,{children:"schema"})," root directory (like ",(0,i.jsx)(n.code,{children:"tables.sql"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"nautilus database drop"}),": Will drop all tables, roles and data in target Postgres database."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"rust-analyzer-settings",children:"Rust analyzer settings"}),"\n",(0,i.jsxs)(n.p,{children:["Rust analyzer is a popular language server for Rust and has integrations for many IDEs. It is recommended to configure rust analyzer to have same environment variables as ",(0,i.jsx)(n.code,{children:"make build-debug"})," for faster compile times. Below tested configurations for VSCode and Astro Nvim are provided. For more information see ",(0,i.jsx)(n.a,{href:"https://github.com/nautechsystems/nautilus_trader/pull/2524",children:"PR"})," or rust analyzer ",(0,i.jsx)(n.a,{href:"https://rust-analyzer.github.io/book/configuration.html",children:"config docs"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"vscode",children:"VSCode"}),"\n",(0,i.jsxs)(n.p,{children:["You can add the following settings to your VSCode ",(0,i.jsx)(n.code,{children:"settings.json"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'    "rust-analyzer.restartServerOnConfigChange": true,\n    "rust-analyzer.linkedProjects": [\n        "Cargo.toml"\n    ],\n    "rust-analyzer.cargo.features": "all",\n    "rust-analyzer.check.workspace": false,\n    "rust-analyzer.check.extraEnv": {\n        "VIRTUAL_ENV": "<path-to-your-virtual-environment>/.venv",\n        "CC": "clang",\n        "CXX": "clang++"\n    },\n    "rust-analyzer.cargo.extraEnv": {\n        "VIRTUAL_ENV": "<path-to-your-virtual-environment>/.venv",\n        "CC": "clang",\n        "CXX": "clang++"\n    },\n    "rust-analyzer.runnables.extraEnv": {\n        "VIRTUAL_ENV": "<path-to-your-virtual-environment>/.venv",\n        "CC": "clang",\n        "CXX": "clang++"\n    },\n    "rust-analyzer.check.features": "all",\n    "rust-analyzer.testExplorer": true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"astro-nvim-neovim--astrolsp",children:"Astro Nvim (Neovim + AstroLSP)"}),"\n",(0,i.jsx)(n.p,{children:"You can add the following to your astro lsp config file:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'    config = {\n      rust_analyzer = {\n        settings = {\n          ["rust-analyzer"] = {\n            restartServerOnConfigChange = true,\n            linkedProjects = { "Cargo.toml" },\n            cargo = {\n              features = "all",\n              extraEnv = {\n                VIRTUAL_ENV = "<path-to-your-virtual-environment>/.venv",\n                CC = "clang",\n                CXX = "clang++",\n              },\n            },\n            check = {\n              workspace = false,\n              command = "check",\n              features = "all",\n              extraEnv = {\n                VIRTUAL_ENV = "<path-to-your-virtual-environment>/.venv",\n                CC = "clang",\n                CXX = "clang++",\n              },\n            },\n            runnables = {\n              extraEnv = {\n                VIRTUAL_ENV = "<path-to-your-virtual-environment>/.venv",\n                CC = "clang",\n                CXX = "clang++",\n              },\n            },\n            testExplorer = true,\n          },\n        },\n      },\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);