"use strict";(globalThis.webpackChunknautilus_trader=globalThis.webpackChunknautilus_trader||[]).push([[9902],{7549:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"concepts/adapters","title":"Adapters","description":"The NautilusTrader design integrates data providers and/or trading venues","source":"@site/docs/concepts/adapters.md","sourceDirName":"concepts","slug":"/concepts/adapters","permalink":"/concepts/adapters","draft":false,"unlisted":false,"editUrl":"https://github.com/Aloento/NautilusTraderDoc/tree/main/docs/concepts/adapters.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Actors","permalink":"/concepts/actors"},"next":{"title":"Architecture","permalink":"/concepts/architecture"}}');var s=t(7259),i=t(9087);const a={},c="Adapters",d={},l=[{value:"Instrument providers",id:"instrument-providers",level:2},{value:"Research and backtesting",id:"research-and-backtesting",level:3},{value:"Live trading",id:"live-trading",level:3},{value:"Data clients",id:"data-clients",level:2},{value:"Requests",id:"requests",level:3},{value:"Example",id:"example",level:4}];function o(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"adapters",children:"Adapters"})}),"\n",(0,s.jsxs)(n.p,{children:["The NautilusTrader design integrates data providers and/or trading venues\nthrough adapter implementations. These can be found in the top-level ",(0,s.jsx)(n.code,{children:"adapters"})," subpackage."]}),"\n",(0,s.jsxs)(n.p,{children:["An integration adapter is ",(0,s.jsx)(n.em,{children:"typically"})," comprised of the following main components:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"HttpClient"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"WebSocketClient"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"InstrumentProvider"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"DataClient"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"ExecutionClient"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"instrument-providers",children:"Instrument providers"}),"\n",(0,s.jsxs)(n.p,{children:["Instrument providers do as their name suggests - instantiating Nautilus\n",(0,s.jsx)(n.code,{children:"Instrument"})," objects by parsing the raw API of the publisher or venue."]}),"\n",(0,s.jsxs)(n.p,{children:["The use cases for the instruments available from an ",(0,s.jsx)(n.code,{children:"InstrumentProvider"})," are either:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Used standalone to discover the instruments available for an integration, using these for research or backtesting purposes"}),"\n",(0,s.jsxs)(n.li,{children:["Used in a ",(0,s.jsx)(n.code,{children:"sandbox"})," or ",(0,s.jsx)(n.code,{children:"live"})," ",(0,s.jsx)(n.a,{href:"/concepts/architecture#environment-contexts",children:"environment context"})," for consumption by actors/strategies"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"research-and-backtesting",children:"Research and backtesting"}),"\n",(0,s.jsx)(n.p,{children:"Here is an example of discovering the current instruments for the Binance Futures testnet:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import asyncio\nimport os\n\nfrom nautilus_trader.adapters.binance.common.enums import BinanceAccountType\nfrom nautilus_trader.adapters.binance import get_cached_binance_http_client\nfrom nautilus_trader.adapters.binance.futures.providers import BinanceFuturesInstrumentProvider\nfrom nautilus_trader.common.component import LiveClock\n\n\nclock = LiveClock()\naccount_type = BinanceAccountType.USDT_FUTURES\n\nclient = get_cached_binance_http_client(\n    loop=asyncio.get_event_loop(),\n    clock=clock,\n    account_type=account_type,\n    key=os.getenv("BINANCE_FUTURES_TESTNET_API_KEY"),\n    secret=os.getenv("BINANCE_FUTURES_TESTNET_API_SECRET"),\n    is_testnet=True,\n)\nawait client.connect()\n\nprovider = BinanceFuturesInstrumentProvider(\n    client=client,\n    account_type=BinanceAccountType.USDT_FUTURES,\n)\n\nawait provider.load_all_async()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"live-trading",children:"Live trading"}),"\n",(0,s.jsxs)(n.p,{children:["Each integration is implementation specific, and there are generally two options for the behavior of an ",(0,s.jsx)(n.code,{children:"InstrumentProvider"})," within a ",(0,s.jsx)(n.code,{children:"TradingNode"})," for live trading,\nas configured:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"All instruments are automatically loaded on start:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from nautilus_trader.config import InstrumentProviderConfig\n\nInstrumentProviderConfig(load_all=True)\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Only those instruments explicitly specified in the configuration are loaded on start:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'InstrumentProviderConfig(load_ids=["BTCUSDT-PERP.BINANCE", "ETHUSDT-PERP.BINANCE"])\n'})}),"\n",(0,s.jsx)(n.h2,{id:"data-clients",children:"Data clients"}),"\n",(0,s.jsx)(n.h3,{id:"requests",children:"Requests"}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.code,{children:"Actor"})," or ",(0,s.jsx)(n.code,{children:"Strategy"})," can request custom data from a ",(0,s.jsx)(n.code,{children:"DataClient"})," by sending a ",(0,s.jsx)(n.code,{children:"DataRequest"}),". If the client that receives the\n",(0,s.jsx)(n.code,{children:"DataRequest"})," implements a handler for the request, data will be returned to the ",(0,s.jsx)(n.code,{children:"Actor"})," or ",(0,s.jsx)(n.code,{children:"Strategy"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["An example of this is a ",(0,s.jsx)(n.code,{children:"DataRequest"})," for an ",(0,s.jsx)(n.code,{children:"Instrument"}),", which the ",(0,s.jsx)(n.code,{children:"Actor"})," class implements (copied below). Any ",(0,s.jsx)(n.code,{children:"Actor"})," or\n",(0,s.jsx)(n.code,{children:"Strategy"})," can call a ",(0,s.jsx)(n.code,{children:"request_instrument"})," method with an ",(0,s.jsx)(n.code,{children:"InstrumentId"})," to request the instrument from a ",(0,s.jsx)(n.code,{children:"DataClient"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In this particular case, the ",(0,s.jsx)(n.code,{children:"Actor"})," implements a separate method ",(0,s.jsx)(n.code,{children:"request_instrument"}),". A similar type of\n",(0,s.jsx)(n.code,{children:"DataRequest"})," could be instantiated and called from anywhere and/or anytime in the actor/strategy code."]}),"\n",(0,s.jsxs)(n.p,{children:["A simplified version of ",(0,s.jsx)(n.code,{children:"request_instrument"})," for an actor/strategy is:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# nautilus_trader/common/actor.pyx\n\ncpdef void request_instrument(self, InstrumentId instrument_id, ClientId client_id=None):\n    """\n    Request `Instrument` data for the given instrument ID.\n\n    Parameters\n    ----------\n    instrument_id : InstrumentId\n        The instrument ID for the request.\n    client_id : ClientId, optional\n        The specific client ID for the command.\n        If ``None`` then will be inferred from the venue in the instrument ID.\n    """\n    Condition.not_none(instrument_id, "instrument_id")\n\n    cdef RequestInstrument request = RequestInstrument(\n        instrument_id=instrument_id,\n        start=None,\n        end=None,\n        client_id=client_id,\n        venue=instrument_id.venue,\n        callback=self._handle_instrument_response,\n        request_id=UUID4(),\n        ts_init=self._clock.timestamp_ns(),\n        params=None,\n    )\n\n    self._send_data_req(request)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["A simplified version of the request handler implemented in a ",(0,s.jsx)(n.code,{children:"LiveMarketDataClient"})," that will retrieve the data\nand send it back to actors/strategies is for example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# nautilus_trader/live/data_client.py\n\ndef request_instrument(self, request: RequestInstrument) -> None:\n    self.create_task(self._request_instrument(request))\n\n# nautilus_trader/adapters/binance/data.py\n\nasync def _request_instrument(self, request: RequestInstrument) -> None:\n    instrument: Instrument | None = self._instrument_provider.find(request.instrument_id)\n\n    if instrument is None:\n        self._log.error(f"Cannot find instrument for {request.instrument_id}")\n        return\n\n    self._handle_instrument(instrument, request.id, request.params)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"DataEngine"})," which is an important component in Nautilus links a request with a ",(0,s.jsx)(n.code,{children:"DataClient"}),".\nFor example a simplified version of handling an instrument request is:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# nautilus_trader/data/engine.pyx\n\nself._msgbus.register(endpoint="DataEngine.request", handler=self.request)\n\ncpdef void request(self, RequestData request):\n    self._handle_request(request)\n\ncpdef void _handle_request(self, RequestData request):\n    cdef DataClient client = self._clients.get(request.client_id)\n\n    if client is None:\n        client = self._routing_map.get(request.venue, self._default_client)\n\n    if isinstance(request, RequestInstrument):\n        self._handle_request_instrument(client, request)\n\ncpdef void _handle_request_instrument(self, DataClient client, RequestInstrument request):\n    client.request_instrument(request)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},9087:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var r=t(6363);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);