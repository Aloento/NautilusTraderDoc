"use strict";(globalThis.webpackChunknautilus_trader=globalThis.webpackChunknautilus_trader||[]).push([[3881],{6048:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>a});const l=JSON.parse('{"id":"concepts/actors","title":"Actors","description":"We are currently working on this concept guide.","source":"@site/docs/concepts/actors.md","sourceDirName":"concepts","slug":"/concepts/actors","permalink":"/concepts/actors","draft":false,"unlisted":false,"editUrl":"https://github.com/Aloento/NautilusTraderDoc/tree/main/docs/concepts/actors.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Concepts","permalink":"/concepts/"},"next":{"title":"Adapters","permalink":"/concepts/adapters"}}');var i=n(7259),s=n(9087);const r={},d="Actors",c={},a=[{value:"Basic example",id:"basic-example",level:2},{value:"Data handling and callbacks",id:"data-handling-and-callbacks",level:2},{value:"Historical vs real-time data",id:"historical-vs-real-time-data",level:3},{value:"Callback handlers",id:"callback-handlers",level:3},{value:"Example",id:"example",level:3},{value:"Order fill subscriptions",id:"order-fill-subscriptions",level:2},{value:"Example",id:"example-1",level:3}];function o(e){const t={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"actors",children:"Actors"})}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsx)(t.p,{children:"We are currently working on this concept guide."})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"Actor"})," serves as the foundational component for interacting with the trading system.\nIt provides core functionality for receiving market data, handling events, and managing state within\nthe trading environment. The ",(0,i.jsx)(t.code,{children:"Strategy"})," class inherits from Actor and extends its capabilities with\norder management methods."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Key capabilities"}),":"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Event subscription and handling."}),"\n",(0,i.jsx)(t.li,{children:"Market data reception."}),"\n",(0,i.jsx)(t.li,{children:"State management."}),"\n",(0,i.jsx)(t.li,{children:"System interaction primitives."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"basic-example",children:"Basic example"}),"\n",(0,i.jsx)(t.p,{children:"Just like strategies, actors support configuration through a very similar pattern."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'from nautilus_trader.config import ActorConfig\nfrom nautilus_trader.model import InstrumentId\nfrom nautilus_trader.model import Bar, BarType\nfrom nautilus_trader.common.actor import Actor\n\n\nclass MyActorConfig(ActorConfig):\n    instrument_id: InstrumentId   # example value: "ETHUSDT-PERP.BINANCE"\n    bar_type: BarType             # example value: "ETHUSDT-PERP.BINANCE-15-MINUTE[LAST]-INTERNAL"\n    lookback_period: int = 10\n\n\nclass MyActor(Actor):\n    def __init__(self, config: MyActorConfig) -> None:\n        super().__init__(config)\n\n        # Custom state variables\n        self.count_of_processed_bars: int = 0\n\n    def on_start(self) -> None:\n        # Subscribe to all incoming bars\n        self.subscribe_bars(self.config.bar_type)   # You can access configuration directly via `self.config`\n\n    def on_bar(self, bar: Bar):\n        self.count_of_processed_bars += 1\n'})}),"\n",(0,i.jsx)(t.h2,{id:"data-handling-and-callbacks",children:"Data handling and callbacks"}),"\n",(0,i.jsxs)(t.p,{children:["When working with data in Nautilus, it's important to understand the relationship between data\n",(0,i.jsx)(t.em,{children:"requests/subscriptions"})," and their corresponding callback handlers. The system uses different handlers\ndepending on whether the data is historical or real-time."]}),"\n",(0,i.jsx)(t.h3,{id:"historical-vs-real-time-data",children:"Historical vs real-time data"}),"\n",(0,i.jsx)(t.p,{children:"The system distinguishes between two types of data flow:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Historical data"})," (from ",(0,i.jsx)(t.em,{children:"requests"}),"):"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Obtained through methods like ",(0,i.jsx)(t.code,{children:"request_bars()"}),", ",(0,i.jsx)(t.code,{children:"request_quote_ticks()"}),", etc."]}),"\n",(0,i.jsxs)(t.li,{children:["Processed through the ",(0,i.jsx)(t.code,{children:"on_historical_data()"})," handler."]}),"\n",(0,i.jsx)(t.li,{children:"Used for initial data loading and historical analysis."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Real-time data"})," (from ",(0,i.jsx)(t.em,{children:"subscriptions"}),"):"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Obtained through methods like ",(0,i.jsx)(t.code,{children:"subscribe_bars()"}),", ",(0,i.jsx)(t.code,{children:"subscribe_quote_ticks()"}),", etc."]}),"\n",(0,i.jsxs)(t.li,{children:["Processed through specific handlers like ",(0,i.jsx)(t.code,{children:"on_bar()"}),", ",(0,i.jsx)(t.code,{children:"on_quote_tick()"}),", etc."]}),"\n",(0,i.jsx)(t.li,{children:"Used for live data processing."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"callback-handlers",children:"Callback handlers"}),"\n",(0,i.jsx)(t.p,{children:"Here's how different data operations map to their handlers:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Operation"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Category"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Handler"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Purpose"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"subscribe_data()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Real\u2011time"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_data()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Live data updates."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"subscribe_instrument()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Real\u2011time"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_instrument()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Live instrument definition updates."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"subscribe_instruments()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Real\u2011time"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_instrument()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Live instrument definition updates (for venue)."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"subscribe_order_book_deltas()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Real\u2011time"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_order_book_deltas()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Live order book updates."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"subscribe_quote_ticks()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Real\u2011time"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_quote_tick()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Live quote updates."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"subscribe_trade_ticks()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Real\u2011time"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_trade_tick()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Live trade updates."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"subscribe_mark_prices()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Real\u2011time"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_mark_price()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Live mark price updates."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"subscribe_index_prices()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Real\u2011time"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_index_price()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Live index price updates."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"subscribe_funding_rates()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Real\u2011time"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_funding_rate()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Live funding rate updates."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"subscribe_bars()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Real\u2011time"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_bar()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Live bar updates."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"subscribe_instrument_status()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Real\u2011time"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_instrument_status()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Live instrument status updates."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"subscribe_instrument_close()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Real\u2011time"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_instrument_close()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Live instrument close updates."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"subscribe_order_fills()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Real\u2011time"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_order_filled()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Live order fill events for an instrument."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"request_data()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Historical"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_historical_data()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Historical data processing."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"request_instrument()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Historical"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_instrument()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Instrument definition updates."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"request_instruments()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Historical"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_instrument()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Instrument definition updates."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"request_quote_ticks()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Historical"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_historical_data()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Historical quotes processing."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"request_trade_ticks()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Historical"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_historical_data()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Historical trades processing."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"request_bars()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Historical"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_historical_data()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Historical bars processing."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"request_aggregated_bars()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Historical"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"on_historical_data()"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Historical aggregated bars (on-the-fly)."})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(t.p,{children:"Here's an example demonstrating both historical and real-time data handling:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'from nautilus_trader.common.actor import Actor\nfrom nautilus_trader.config import ActorConfig\nfrom nautilus_trader.core.data import Data\nfrom nautilus_trader.model import Bar, BarType\nfrom nautilus_trader.model import ClientId, InstrumentId\n\n\nclass MyActorConfig(ActorConfig):\n    instrument_id: InstrumentId  # example value: "AAPL.XNAS"\n    bar_type: BarType            # example value: "AAPL.XNAS-1-MINUTE-LAST-EXTERNAL"\n\n\nclass MyActor(Actor):\n    def __init__(self, config: MyActorConfig) -> None:\n        super().__init__(config)\n        self.bar_type = config.bar_type\n\n    def on_start(self) -> None:\n        # Request historical data - will be processed by on_historical_data() handler\n        self.request_bars(\n            bar_type=self.bar_type,\n            # Many optional parameters\n            start=None,                # datetime, optional\n            end=None,                  # datetime, optional\n            callback=None,             # called with the request ID when completed\n            update_catalog_mode=None,  # UpdateCatalogMode | None, default None\n            params=None,               # dict[str, Any], optional\n        )\n\n        # Subscribe to real-time data - will be processed by on_bar() handler\n        self.subscribe_bars(\n            bar_type=self.bar_type,\n            # Many optional parameters\n            client_id=None,  # ClientId, optional\n            params=None,     # dict[str, Any], optional\n        )\n\n    def on_historical_data(self, data: Data) -> None:\n        # Handle historical data (from requests)\n        if isinstance(data, Bar):\n            self.log.info(f"Received historical bar: {data}")\n\n    def on_bar(self, bar: Bar) -> None:\n        # Handle real-time bar updates (from subscriptions)\n        self.log.info(f"Received real-time bar: {bar}")\n'})}),"\n",(0,i.jsx)(t.p,{children:"This separation between historical and real-time data handlers allows for different processing logic\nbased on the data context. For example, you might want to:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Use historical data to initialize indicators or establish baseline metrics."}),"\n",(0,i.jsx)(t.li,{children:"Process real-time data differently for live trading decisions."}),"\n",(0,i.jsx)(t.li,{children:"Apply different validation or logging for historical vs real-time data."}),"\n"]}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["When debugging data flow issues, check that you're looking at the correct handler for your data source.\nIf you're not seeing data in ",(0,i.jsx)(t.code,{children:"on_bar()"})," but see log messages about receiving bars, check ",(0,i.jsx)(t.code,{children:"on_historical_data()"}),"\nas the data might be coming from a request rather than a subscription."]})}),"\n",(0,i.jsx)(t.h2,{id:"order-fill-subscriptions",children:"Order fill subscriptions"}),"\n",(0,i.jsxs)(t.p,{children:["Actors can subscribe to order fill events for specific instruments using ",(0,i.jsx)(t.code,{children:"subscribe_order_fills()"}),". This is useful\nfor monitoring trading activity, implementing custom fill analysis, or tracking execution quality."]}),"\n",(0,i.jsxs)(t.p,{children:["When subscribed, all order fills for the specified instrument are forwarded to the ",(0,i.jsx)(t.code,{children:"on_order_filled()"})," handler,\nregardless of which strategy or component generated the original order."]}),"\n",(0,i.jsx)(t.h3,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'from nautilus_trader.common.actor import Actor\nfrom nautilus_trader.config import ActorConfig\nfrom nautilus_trader.model import InstrumentId\nfrom nautilus_trader.model.events import OrderFilled\n\n\nclass MyActorConfig(ActorConfig):\n    instrument_id: InstrumentId  # example value: "ETHUSDT-PERP.BINANCE"\n\n\nclass FillMonitorActor(Actor):\n    def __init__(self, config: MyActorConfig) -> None:\n        super().__init__(config)\n        self.fill_count = 0\n        self.total_volume = 0.0\n\n    def on_start(self) -> None:\n        # Subscribe to all fills for the instrument\n        self.subscribe_order_fills(self.config.instrument_id)\n\n    def on_order_filled(self, event: OrderFilled) -> None:\n        # Handle order fill events\n        self.fill_count += 1\n        self.total_volume += float(event.last_qty)\n\n        self.log.info(\n            f"Fill received: {event.order_side} {event.last_qty} @ {event.last_px}, "\n            f"Total fills: {self.fill_count}, Volume: {self.total_volume}"\n        )\n\n    def on_stop(self) -> None:\n        # Unsubscribe from fills\n        self.unsubscribe_order_fills(self.config.instrument_id)\n'})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["Order fill subscriptions are message bus-only subscriptions and do not involve the data engine.\nThe ",(0,i.jsx)(t.code,{children:"on_order_filled()"})," handler will only receive events while the actor is in a running state."]})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},9087:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>d});var l=n(6363);const i={},s=l.createContext(i);function r(e){const t=l.useContext(s);return l.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),l.createElement(s.Provider,{value:t},e.children)}}}]);