"use strict";(globalThis.webpackChunknautilus_trader=globalThis.webpackChunknautilus_trader||[]).push([[7321],{2357:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"developer_guide/rust","title":"Rust Style Guide","description":"The Rust programming language is an ideal fit for implementing the mission-critical core of the platform and systems.","source":"@site/docs/developer_guide/rust.md","sourceDirName":"developer_guide","slug":"/developer_guide/rust","permalink":"/developer_guide/rust","draft":false,"unlisted":false,"editUrl":"https://github.com/Aloento/NautilusTraderDoc/tree/main/docs/developer_guide/rust.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Packaged Data","permalink":"/developer_guide/packaged_data"},"next":{"title":"Testing","permalink":"/developer_guide/testing"}}');var r=s(7259),t=s(9087);const o={},a="Rust Style Guide",l={},c=[{value:"Cargo manifest conventions",id:"cargo-manifest-conventions",level:2},{value:"Versioning guidance",id:"versioning-guidance",level:2},{value:"Feature flag conventions",id:"feature-flag-conventions",level:2},{value:"Module organization",id:"module-organization",level:2},{value:"Code style and conventions",id:"code-style-and-conventions",level:2},{value:"File header requirements",id:"file-header-requirements",level:3},{value:"Code formatting",id:"code-formatting",level:3},{value:"String formatting",id:"string-formatting",level:4},{value:"Logging",id:"logging",level:3},{value:"Error handling",id:"error-handling",level:3},{value:"Async patterns",id:"async-patterns",level:3},{value:"Attribute patterns",id:"attribute-patterns",level:3},{value:"Constructor patterns",id:"constructor-patterns",level:3},{value:"Constants and naming conventions",id:"constants-and-naming-conventions",level:3},{value:"Hash collections",id:"hash-collections",level:3},{value:"Re-export patterns",id:"re-export-patterns",level:3},{value:"Documentation standards",id:"documentation-standards",level:3},{value:"Module-Level documentation",id:"module-level-documentation",level:4},{value:"Field documentation",id:"field-documentation",level:4},{value:"Function documentation",id:"function-documentation",level:4},{value:"Errors and panics documentation format",id:"errors-and-panics-documentation-format",level:4},{value:"Safety documentation format",id:"safety-documentation-format",level:4},{value:"Python bindings",id:"python-bindings",level:2},{value:"PyO3 naming conventions",id:"pyo3-naming-conventions",level:3},{value:"Testing conventions",id:"testing-conventions",level:3},{value:"Test organization",id:"test-organization",level:4},{value:"Parameterized testing",id:"parameterized-testing",level:4},{value:"Test naming",id:"test-naming",level:4},{value:"Rust-Python memory management",id:"rust-python-memory-management",level:2},{value:"The reference cycle problem",id:"the-reference-cycle-problem",level:3},{value:"The solution: GIL-based cloning",id:"the-solution-gil-based-cloning",level:3},{value:"Best practices",id:"best-practices",level:3},{value:"1. Use <code>clone_py_object()</code> for Python object cloning",id:"1-use-clone_py_object-for-python-object-cloning",level:4},{value:"2. Remove <code>#[derive(Clone)]</code> from callback-holding structs",id:"2-remove-deriveclone-from-callback-holding-structs",level:4},{value:"3. Update function signatures to accept <code>PyObject</code>",id:"3-update-function-signatures-to-accept-pyobject",level:4},{value:"4. Avoid <code>Arc::new()</code> when creating Python callbacks",id:"4-avoid-arcnew-when-creating-python-callbacks",level:4},{value:"Why this works",id:"why-this-works",level:3},{value:"Common anti-patterns",id:"common-anti-patterns",level:2},{value:"Unsafe Rust",id:"unsafe-rust",level:2},{value:"Safety policy",id:"safety-policy",level:3},{value:"Tooling configuration",id:"tooling-configuration",level:2},{value:"Resources",id:"resources",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"rust-style-guide",children:"Rust Style Guide"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://www.rust-lang.org/learn",children:"Rust"})," programming language is an ideal fit for implementing the mission-critical core of the platform and systems.\nIts strong type system, ownership model, and compile-time checks eliminate memory errors and data races by construction,\nwhile zero-cost abstractions and the absence of a garbage collector deliver C-like performance\u2014critical for high-frequency trading workloads."]}),"\n",(0,r.jsx)(n.h2,{id:"cargo-manifest-conventions",children:"Cargo manifest conventions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["In ",(0,r.jsx)(n.code,{children:"[dependencies]"}),", list internal crates (",(0,r.jsx)(n.code,{children:"nautilus-*"}),") first in alphabetical order, insert a blank line, then external required dependencies alphabetically, followed by another blank line and the optional dependencies (those with ",(0,r.jsx)(n.code,{children:"optional = true"}),") in alphabetical order. Preserve inline comments with their dependency."]}),"\n",(0,r.jsxs)(n.li,{children:["Add ",(0,r.jsx)(n.code,{children:'"python"'})," to every ",(0,r.jsx)(n.code,{children:"extension-module"})," feature list that builds a Python artefact, keeping it adjacent to ",(0,r.jsx)(n.code,{children:'"pyo3/extension-module"'})," so the full Python stack is obvious."]}),"\n",(0,r.jsxs)(n.li,{children:["When a manifest groups adapters separately (for example ",(0,r.jsx)(n.code,{children:"crates/pyo3"}),"), keep the ",(0,r.jsx)(n.code,{children:"# Adapters"})," block immediately below the internal crate list so downstream consumers can scan adapter coverage quickly."]}),"\n",(0,r.jsxs)(n.li,{children:["Always include a blank line before ",(0,r.jsx)(n.code,{children:"[dev-dependencies]"})," and ",(0,r.jsx)(n.code,{children:"[build-dependencies]"})," sections."]}),"\n",(0,r.jsx)(n.li,{children:"Apply the same layout across related manifests when the feature or dependency sets change to avoid drift between crates."}),"\n",(0,r.jsxs)(n.li,{children:["Use snake_case filenames for ",(0,r.jsx)(n.code,{children:"bin/"})," sources (for example ",(0,r.jsx)(n.code,{children:"bin/ws_data.rs"}),") and reflect those paths in each ",(0,r.jsx)(n.code,{children:"[[bin]]"})," section."]}),"\n",(0,r.jsxs)(n.li,{children:["Keep ",(0,r.jsx)(n.code,{children:"[[bin]] name"})," entries in kebab-case (for example ",(0,r.jsx)(n.code,{children:'name = "hyperliquid-ws-data"'}),") so the compiled binaries retain their intended CLI names."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"versioning-guidance",children:"Versioning guidance"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use workspace inheritance for shared dependencies (for example ",(0,r.jsx)(n.code,{children:"serde = { workspace = true }"}),")."]}),"\n",(0,r.jsx)(n.li,{children:"Only pin versions directly for crate-specific dependencies that are not part of the workspace."}),"\n",(0,r.jsx)(n.li,{children:"Group workspace-provided dependencies before crate-only dependencies so the inheritance is easy to audit."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"feature-flag-conventions",children:"Feature flag conventions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Prefer additive feature flags\u2014enabling a feature must not break existing functionality."}),"\n",(0,r.jsx)(n.li,{children:"Use descriptive flag names that explain what capability is enabled."}),"\n",(0,r.jsx)(n.li,{children:"Document every feature in the crate-level documentation so consumers know what they toggle."}),"\n",(0,r.jsxs)(n.li,{children:["Common patterns:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"high-precision"}),": switches the value-type backing (64-bit or 128-bit integers) to support domains that require extra precision."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"default = []"}),": keep defaults minimal."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"python"}),": enables Python bindings."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"extension-module"}),": builds a Python extension module (always include ",(0,r.jsx)(n.code,{children:"python"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ffi"}),": enables C FFI bindings."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stubs"}),": exposes testing stubs."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"module-organization",children:"Module organization"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Keep modules focused on a single responsibility."}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"mod.rs"})," as the module root when defining submodules."]}),"\n",(0,r.jsx)(n.li,{children:"Prefer relatively flat hierarchies over deep nesting to keep paths manageable."}),"\n",(0,r.jsx)(n.li,{children:"Re-export commonly used items from the crate root for convenience."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"code-style-and-conventions",children:"Code style and conventions"}),"\n",(0,r.jsx)(n.h3,{id:"file-header-requirements",children:"File header requirements"}),"\n",(0,r.jsx)(n.p,{children:"All Rust files must include the standardized copyright header:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// -------------------------------------------------------------------------------------------------\n//  Copyright (C) 2015-2025 Nautech Systems Pty Ltd. All rights reserved.\n//  https://nautechsystems.io\n//\n//  Licensed under the GNU Lesser General Public License Version 3.0 (the "License");\n//  You may not use this file except in compliance with the License.\n//  You may obtain a copy of the License at https://www.gnu.org/licenses/lgpl-3.0.en.html\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an "AS IS" BASIS,\n//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//  See the License for the specific language governing permissions and\n//  limitations under the License.\n// -------------------------------------------------------------------------------------------------\n'})}),"\n",(0,r.jsx)(n.h3,{id:"code-formatting",children:"Code formatting"}),"\n",(0,r.jsxs)(n.p,{children:["Import formatting is automatically handled by rustfmt when running ",(0,r.jsx)(n.code,{children:"make format"}),".\nThe tool organizes imports into groups (standard library, external crates, local imports) and sorts them alphabetically within each group."]}),"\n",(0,r.jsx)(n.p,{children:"Within this section, follow these spacing rules:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Leave ",(0,r.jsx)(n.strong,{children:"one blank line between functions"})," (including tests) \u2013 this improves readability and\nmirrors the default behavior of ",(0,r.jsx)(n.code,{children:"rustfmt"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Leave ",(0,r.jsx)(n.strong,{children:"one blank line above every doc comment"})," (",(0,r.jsx)(n.code,{children:"///"})," or ",(0,r.jsx)(n.code,{children:"//!"}),") so that the comment is clearly\ndetached from the previous code block."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"string-formatting",children:"String formatting"}),"\n",(0,r.jsx)(n.p,{children:"Prefer inline format strings over positional arguments:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// Preferred - inline format with variable names\nanyhow::bail!("Failed to subtract {n} months from {datetime}");\n\n// Instead of - positional arguments\nanyhow::bail!("Failed to subtract {} months from {}", n, datetime);\n'})}),"\n",(0,r.jsx)(n.p,{children:"This makes messages more readable and self-documenting, especially when there are multiple variables."}),"\n",(0,r.jsx)(n.h3,{id:"logging",children:"Logging"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Fully qualify logging macros so the backend is explicit:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"log::\u2026"})," (",(0,r.jsx)(n.code,{children:"log::info!"}),", ",(0,r.jsx)(n.code,{children:"log::warn!"}),", etc.) inside synchronous core crates."]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"tracing::\u2026"})," (",(0,r.jsx)(n.code,{children:"tracing::debug!"}),", ",(0,r.jsx)(n.code,{children:"tracing::info!"}),", etc.) for async runtimes, adapters, and peripheral components."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Start messages with a capitalised word, prefer complete sentences, and omit terminal periods (e.g. ",(0,r.jsx)(n.code,{children:'"Processing batch"'}),", not ",(0,r.jsx)(n.code,{children:'"Processing batch."'}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"error-handling",children:"Error handling"}),"\n",(0,r.jsx)(n.p,{children:"Use structured error handling patterns consistently:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Primary Pattern"}),": Use ",(0,r.jsx)(n.code,{children:"anyhow::Result<T>"})," for fallible functions:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub fn calculate_balance(&mut self) -> anyhow::Result<Money> {\n    // Implementation\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Custom Error Types"}),": Use ",(0,r.jsx)(n.code,{children:"thiserror"})," for domain-specific errors:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[derive(Error, Debug)]\npub enum NetworkError {\n    #[error("Connection failed: {0}")]\n    ConnectionFailed(String),\n    #[error("Timeout occurred")]\n    Timeout,\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Error Propagation"}),": Use the ",(0,r.jsx)(n.code,{children:"?"})," operator for clean error propagation."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Error Creation"}),": Prefer ",(0,r.jsx)(n.code,{children:"anyhow::bail!"})," for early returns with errors:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// Preferred - using bail! for early returns\npub fn process_value(value: i32) -> anyhow::Result<i32> {\n    if value < 0 {\n        anyhow::bail!("Value cannot be negative: {value}");\n    }\n    Ok(value * 2)\n}\n\n// Instead of - verbose return statement\nif value < 0 {\n    return Err(anyhow::anyhow!("Value cannot be negative: {value}"));\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": Use ",(0,r.jsx)(n.code,{children:"anyhow::bail!"})," for early returns, but ",(0,r.jsx)(n.code,{children:"anyhow::anyhow!"})," in closure contexts like ",(0,r.jsx)(n.code,{children:"ok_or_else()"})," where early returns aren't possible."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"async-patterns",children:"Async patterns"}),"\n",(0,r.jsx)(n.p,{children:"Use consistent async/await patterns:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Async function naming"}),": No special suffix is required; prefer natural names."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tokio usage"}),": Use ",(0,r.jsx)(n.code,{children:"tokio::spawn"})," for fire-and-forget work, and document when that background task is expected to finish."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error handling"}),": Return ",(0,r.jsx)(n.code,{children:"anyhow::Result"})," from async functions to match the synchronous conventions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cancellation safety"}),": Call out whether the function is cancellation-safe and what invariants still hold when it is cancelled."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Stream handling"}),": Use ",(0,r.jsx)(n.code,{children:"tokio_stream"})," (or ",(0,r.jsx)(n.code,{children:"futures::Stream"}),") for async iterators to make back-pressure explicit."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Timeout patterns"}),": Wrap network or long-running awaits with timeouts (",(0,r.jsx)(n.code,{children:"tokio::time::timeout"}),") and propagate or handle the timeout error."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"attribute-patterns",children:"Attribute patterns"}),"\n",(0,r.jsx)(n.p,{children:"Consistent attribute usage and ordering:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[repr(C)]\n#[derive(Clone, Copy, Debug, Hash, PartialEq, Eq, PartialOrd, Ord)]\n#[cfg_attr(\n    feature = "python",\n    pyo3::pyclass(module = "nautilus_trader.model")\n)]\npub struct Symbol(Ustr);\n'})}),"\n",(0,r.jsx)(n.p,{children:"For enums with extensive derive attributes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[repr(C)]\n#[derive(\n    Copy,\n    Clone,\n    Debug,\n    Display,\n    Hash,\n    PartialEq,\n    Eq,\n    PartialOrd,\n    Ord,\n    AsRefStr,\n    FromRepr,\n    EnumIter,\n    EnumString,\n)]\n#[strum(ascii_case_insensitive)]\n#[strum(serialize_all = "SCREAMING_SNAKE_CASE")]\n#[cfg_attr(\n    feature = "python",\n    pyo3::pyclass(eq, eq_int, module = "nautilus_trader.model")\n)]\npub enum AccountType {\n    /// An account with unleveraged cash assets only.\n    Cash = 1,\n    /// An account which facilitates trading on margin, using account assets as collateral.\n    Margin = 2,\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"constructor-patterns",children:"Constructor patterns"}),"\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"new()"})," vs ",(0,r.jsx)(n.code,{children:"new_checked()"})," convention consistently:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"/// Creates a new [`Symbol`] instance with correctness checking.\n///\n/// # Errors\n///\n/// Returns an error if `value` is not a valid string.\n///\n/// # Notes\n///\n/// PyO3 requires a `Result` type for proper error handling and stacktrace printing in Python.\npub fn new_checked<T: AsRef<str>>(value: T) -> anyhow::Result<Self> {\n    // Implementation\n}\n\n/// Creates a new [`Symbol`] instance.\n///\n/// # Panics\n///\n/// Panics if `value` is not a valid string.\npub fn new<T: AsRef<str>>(value: T) -> Self {\n    Self::new_checked(value).expect(FAILED)\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Always use the ",(0,r.jsx)(n.code,{children:"FAILED"})," constant for ",(0,r.jsx)(n.code,{children:".expect()"})," messages related to correctness checks:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"use nautilus_core::correctness::FAILED;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"constants-and-naming-conventions",children:"Constants and naming conventions"}),"\n",(0,r.jsx)(n.p,{children:"Use SCREAMING_SNAKE_CASE for constants with descriptive names:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"/// Number of nanoseconds in one second.\npub const NANOSECONDS_IN_SECOND: u64 = 1_000_000_000;\n\n/// Bar specification for 1-minute last price bars.\npub const BAR_SPEC_1_MINUTE_LAST: BarSpecification = BarSpecification {\n    step: NonZero::new(1).unwrap(),\n    aggregation: BarAggregation::Minute,\n    price_type: PriceType::Last,\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"hash-collections",children:"Hash collections"}),"\n",(0,r.jsxs)(n.p,{children:["Prefer ",(0,r.jsx)(n.code,{children:"AHashMap"})," and ",(0,r.jsx)(n.code,{children:"AHashSet"})," from the ",(0,r.jsx)(n.code,{children:"ahash"})," crate over the standard library's ",(0,r.jsx)(n.code,{children:"HashMap"})," and ",(0,r.jsx)(n.code,{children:"HashSet"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"use ahash::{AHashMap, AHashSet};\n\n// Preferred - using AHashMap/AHashSet\nlet mut symbols: AHashSet<Symbol> = AHashSet::new();\nlet mut prices: AHashMap<InstrumentId, Price> = AHashMap::new();\n\n// Instead of - standard library HashMap/HashSet\nuse std::collections::{HashMap, HashSet};\nlet mut symbols: HashSet<Symbol> = HashSet::new();\nlet mut prices: HashMap<InstrumentId, Price> = HashMap::new();\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Why use ",(0,r.jsx)(n.code,{children:"ahash"}),"?"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Superior performance"}),": AHash uses AES-NI hardware instructions when available, providing 2-3x faster hashing compared to the default SipHash."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Low collision rates"}),": Despite being non-cryptographic, AHash provides excellent distribution and low collision rates for typical data."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Drop-in replacement"}),": Fully compatible API with standard library collections."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["When to use standard ",(0,r.jsx)(n.code,{children:"HashMap"}),"/",(0,r.jsx)(n.code,{children:"HashSet"}),":"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cryptographic security required"}),": Use standard ",(0,r.jsx)(n.code,{children:"HashMap"})," when hash flooding attacks are a concern (e.g., handling untrusted user input in network protocols)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Network clients"}),": Currently prefer standard ",(0,r.jsx)(n.code,{children:"HashMap"})," for network-facing components where security considerations outweigh performance benefits."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"re-export-patterns",children:"Re-export patterns"}),"\n",(0,r.jsx)(n.p,{children:"Organize re-exports alphabetically and place at the end of lib.rs files:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"// Re-exports\npub use crate::{\n    nanos::UnixNanos,\n    time::AtomicTime,\n    uuid::UUID4,\n};\n\n// Module-level re-exports\npub use crate::identifiers::{\n    account_id::AccountId,\n    actor_id::ActorId,\n    client_id::ClientId,\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"documentation-standards",children:"Documentation standards"}),"\n",(0,r.jsx)(n.h4,{id:"module-level-documentation",children:"Module-Level documentation"}),"\n",(0,r.jsx)(n.p,{children:"All modules must have module-level documentation starting with a brief description:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"//! Functions for correctness checks similar to the *design by contract* philosophy.\n//!\n//! This module provides validation checking of function or method conditions.\n//!\n//! A condition is a predicate which must be true just prior to the execution of\n//! some section of code - for correct behavior as per the design specification.\n"})}),"\n",(0,r.jsx)(n.p,{children:"For modules with feature flags, document them clearly:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"//! # Feature flags\n//!\n//! This crate provides feature flags to control source code inclusion during compilation,\n//! depending on the intended use case:\n//!\n//! - `ffi`: Enables the C foreign function interface (FFI) from [cbindgen](https://github.com/mozilla/cbindgen).\n//! - `python`: Enables Python bindings from [PyO3](https://pyo3.rs).\n//! - `extension-module`: Builds as a Python extension module (used with `python`).\n//! - `stubs`: Enables type stubs for use in testing scenarios.\n"})}),"\n",(0,r.jsx)(n.h4,{id:"field-documentation",children:"Field documentation"}),"\n",(0,r.jsx)(n.p,{children:"All struct and enum fields must have documentation with terminating periods:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'pub struct Currency {\n    /// The currency code as an alpha-3 string (e.g., "USD", "EUR").\n    pub code: Ustr,\n    /// The currency decimal precision.\n    pub precision: u8,\n    /// The ISO 4217 currency code.\n    pub iso4217: u16,\n    /// The full name of the currency.\n    pub name: Ustr,\n    /// The currency type, indicating its category (e.g. Fiat, Crypto).\n    pub currency_type: CurrencyType,\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"function-documentation",children:"Function documentation"}),"\n",(0,r.jsx)(n.p,{children:"Document all public functions with:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Purpose and behavior"}),"\n",(0,r.jsx)(n.li,{children:"Explanation of input argument usage"}),"\n",(0,r.jsx)(n.li,{children:"Error conditions (if applicable)"}),"\n",(0,r.jsx)(n.li,{children:"Panic conditions (if applicable)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"/// Returns a reference to the `AccountBalance` for the specified currency, or `None` if absent.\n///\n/// # Panics\n///\n/// Panics if `currency` is `None` and `self.base_currency` is `None`.\npub fn base_balance(&self, currency: Option<Currency>) -> Option<&AccountBalance> {\n    // Implementation\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"errors-and-panics-documentation-format",children:"Errors and panics documentation format"}),"\n",(0,r.jsx)(n.p,{children:"For single line errors and panics documentation, use sentence case with the following convention:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"/// Returns a reference to the `AccountBalance` for the specified currency, or `None` if absent.\n///\n/// # Errors\n///\n/// Returns an error if the currency conversion fails.\n///\n/// # Panics\n///\n/// Panics if `currency` is `None` and `self.base_currency` is `None`.\npub fn base_balance(&self, currency: Option<Currency>) -> anyhow::Result<Option<&AccountBalance>> {\n    // Implementation\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"For multi-line errors and panics documentation, use sentence case with bullets and terminating periods:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"/// Calculates the unrealized profit and loss for the position.\n///\n/// # Errors\n///\n/// Returns an error if:\n/// - The market price for the instrument cannot be found.\n/// - The conversion rate calculation fails.\n/// - Invalid position state is encountered.\n///\n/// # Panics\n///\n/// This function panics if:\n/// - The instrument ID is invalid or uninitialized.\n/// - Required market data is missing from the cache.\n/// - Internal state consistency checks fail.\npub fn calculate_unrealized_pnl(&self, market_price: Price) -> anyhow::Result<Money> {\n    // Implementation\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"safety-documentation-format",children:"Safety documentation format"}),"\n",(0,r.jsxs)(n.p,{children:["For Safety documentation, use the ",(0,r.jsx)(n.code,{children:"SAFETY:"})," prefix followed by a short description explaining why the unsafe operation is valid:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"/// Creates a new instance from raw components without validation.\n///\n/// # Safety\n///\n/// The caller must ensure that all input parameters are valid and properly initialized.\npub unsafe fn from_raw_parts(ptr: *const u8, len: usize) -> Self {\n    // SAFETY: Caller guarantees ptr is valid and len is correct\n    Self {\n        data: std::slice::from_raw_parts(ptr, len),\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For inline unsafe blocks, use the ",(0,r.jsx)(n.code,{children:"SAFETY:"})," comment directly above the unsafe code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"impl Send for MessageBus {\n    fn send(&self) {\n        // SAFETY: Message bus is not meant to be passed between threads\n        unsafe {\n            // unsafe operation here\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"python-bindings",children:"Python bindings"}),"\n",(0,r.jsxs)(n.p,{children:["Python bindings are provided via Cython and ",(0,r.jsx)(n.a,{href:"https://pyo3.rs",children:"PyO3"}),", allowing users to import NautilusTrader crates directly in Python without a Rust toolchain."]}),"\n",(0,r.jsx)(n.h3,{id:"pyo3-naming-conventions",children:"PyO3 naming conventions"}),"\n",(0,r.jsxs)(n.p,{children:["When exposing Rust functions to Python ",(0,r.jsx)(n.strong,{children:"via PyO3"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["The Rust symbol ",(0,r.jsx)(n.strong,{children:"must"})," be prefixed with ",(0,r.jsx)(n.code,{children:"py_*"})," to make its purpose explicit inside the Rust\ncodebase."]}),"\n",(0,r.jsxs)(n.li,{children:["Use the ",(0,r.jsx)(n.code,{children:'#[pyo3(name = "\u2026")]'})," attribute to publish the ",(0,r.jsx)(n.em,{children:"Python"})," name ",(0,r.jsx)(n.strong,{children:"without"})," the ",(0,r.jsx)(n.code,{children:"py_"}),"\nprefix so the Python API remains clean."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[pyo3(name = "do_something")]\npub fn py_do_something() -> PyResult<()> {\n    // \u2026\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"testing-conventions",children:"Testing conventions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"mod tests"})," as the standard test module name unless you need to specifically compartmentalize."]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"#[rstest]"})," attributes consistently, this standardization reduces cognitive overhead."]}),"\n",(0,r.jsxs)(n.li,{children:["Do ",(0,r.jsx)(n.em,{children:"not"})," use Arrange, Act, Assert separator comments in Rust tests."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"test-organization",children:"Test organization"}),"\n",(0,r.jsx)(n.p,{children:"Use consistent test module structure with section separators:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'////////////////////////////////////////////////////////////////////////////////\n// Tests\n////////////////////////////////////////////////////////////////////////////////\n\n#[cfg(test)]\nmod tests {\n    use rstest::rstest;\n    use super::*;\n    use crate::identifiers::{Symbol, stubs::*};\n\n    #[rstest]\n    fn test_string_reprs(symbol_eth_perp: Symbol) {\n        assert_eq!(symbol_eth_perp.as_str(), "ETH-PERP");\n        assert_eq!(format!("{symbol_eth_perp}"), "ETH-PERP");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"parameterized-testing",children:"Parameterized testing"}),"\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"rstest"})," attribute consistently, and for parameterized tests:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[rstest]\n#[case("AUDUSD", false)]\n#[case("AUD/USD", false)]\n#[case("CL.FUT", true)]\nfn test_symbol_is_composite(#[case] input: &str, #[case] expected: bool) {\n    let symbol = Symbol::new(input);\n    assert_eq!(symbol.is_composite(), expected);\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"test-naming",children:"Test naming"}),"\n",(0,r.jsx)(n.p,{children:"Use descriptive test names that explain the scenario:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"fn test_sma_with_no_inputs()\nfn test_sma_with_single_input()\nfn test_symbol_is_composite()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"rust-python-memory-management",children:"Rust-Python memory management"}),"\n",(0,r.jsxs)(n.p,{children:["When working with PyO3 bindings, it's critical to understand and avoid reference cycles between Rust's ",(0,r.jsx)(n.code,{children:"Arc"})," reference counting and Python's garbage collector.\nThis section documents best practices for handling Python objects in Rust callback-holding structures."]}),"\n",(0,r.jsx)(n.h3,{id:"the-reference-cycle-problem",children:"The reference cycle problem"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": Using ",(0,r.jsx)(n.code,{children:"Arc<PyObject>"})," in callback-holding structs creates circular references:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Rust ",(0,r.jsx)(n.code,{children:"Arc"})," holds Python objects"]})," \u2192 increases Python reference count."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Python objects might reference Rust objects"})," \u2192 creates cycles."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Neither side can be garbage collected"})," \u2192 memory leak."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example of problematic pattern"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"// AVOID: This creates reference cycles\nstruct CallbackHolder {\n    handler: Option<Arc<PyObject>>,  // \u274c Arc wrapper causes cycles\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"the-solution-gil-based-cloning",children:"The solution: GIL-based cloning"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Use plain ",(0,r.jsx)(n.code,{children:"PyObject"})," with proper GIL-based cloning via ",(0,r.jsx)(n.code,{children:"clone_py_object()"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"use nautilus_core::python::clone_py_object;\n\n// CORRECT: Use plain PyObject without Arc wrapper\nstruct CallbackHolder {\n    handler: Option<PyObject>,  // \u2705 No Arc wrapper\n}\n\n// Manual Clone implementation using clone_py_object\nimpl Clone for CallbackHolder {\n    fn clone(&self) -> Self {\n        Self {\n            handler: self.handler.as_ref().map(clone_py_object),\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"best-practices",children:"Best practices"}),"\n",(0,r.jsxs)(n.h4,{id:"1-use-clone_py_object-for-python-object-cloning",children:["1. Use ",(0,r.jsx)(n.code,{children:"clone_py_object()"})," for Python object cloning"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"// When cloning Python callbacks\nlet cloned_callback = clone_py_object(&original_callback);\n\n// In manual Clone implementations\nself.py_handler.as_ref().map(clone_py_object)\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"2-remove-deriveclone-from-callback-holding-structs",children:["2. Remove ",(0,r.jsx)(n.code,{children:"#[derive(Clone)]"})," from callback-holding structs"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"// BEFORE: Automatic derive causes issues with PyObject\n#[derive(Clone)]  // \u274c Remove this\nstruct Config {\n    handler: Option<PyObject>,\n}\n\n// AFTER: Manual implementation with proper cloning\nstruct Config {\n    handler: Option<PyObject>,\n}\n\nimpl Clone for Config {\n    fn clone(&self) -> Self {\n        Self {\n            // Clone regular fields normally\n            url: self.url.clone(),\n            // Use clone_py_object for Python objects\n            handler: self.handler.as_ref().map(clone_py_object),\n        }\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"3-update-function-signatures-to-accept-pyobject",children:["3. Update function signatures to accept ",(0,r.jsx)(n.code,{children:"PyObject"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"// BEFORE: Arc wrapper in function signatures\nfn spawn_task(handler: Arc<PyObject>) { ... }  // \u274c\n\n// AFTER: Plain PyObject\nfn spawn_task(handler: PyObject) { ... }  // \u2705\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"4-avoid-arcnew-when-creating-python-callbacks",children:["4. Avoid ",(0,r.jsx)(n.code,{children:"Arc::new()"})," when creating Python callbacks"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"// BEFORE: Wrapping in Arc\nlet callback = Arc::new(py_function);  // \u274c\n\n// AFTER: Use directly\nlet callback = py_function;  // \u2705\n"})}),"\n",(0,r.jsx)(n.h3,{id:"why-this-works",children:"Why this works"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"clone_py_object()"})," function:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Acquires the Python GIL"})," before performing clone operations."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Uses Python's native reference counting"})," via ",(0,r.jsx)(n.code,{children:"clone_ref()"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Avoids Rust Arc wrappers"})," that interfere with Python GC."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Maintains thread safety"})," through proper GIL management."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This approach allows both Rust and Python garbage collectors to work correctly, eliminating memory leaks from reference cycles."}),"\n",(0,r.jsx)(n.h2,{id:"common-anti-patterns",children:"Common anti-patterns"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Avoid ",(0,r.jsx)(n.code,{children:".clone()"})," in hot paths"]})," \u2013 favour borrowing or shared ownership via ",(0,r.jsx)(n.code,{children:"Arc"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Avoid ",(0,r.jsx)(n.code,{children:".unwrap()"})," in production code"]})," \u2013 generally propagate errors with ",(0,r.jsx)(n.code,{children:"?"})," or map them into domain errors, but unwrapping lock poisoning is acceptable because it signals a severe program state that should abort fast."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Avoid ",(0,r.jsx)(n.code,{children:"String"})," when ",(0,r.jsx)(n.code,{children:"&str"})," suffices"]})," \u2013 minimise allocations on tight loops."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Avoid exposing interior mutability"})," \u2013 hide mutexes/",(0,r.jsx)(n.code,{children:"RefCell"})," behind safe APIs."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Avoid large structs in ",(0,r.jsx)(n.code,{children:"Result<T, E>"})]})," \u2013 box large error payloads (",(0,r.jsx)(n.code,{children:"Box<dyn Error + Send + Sync>"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"unsafe-rust",children:"Unsafe Rust"}),"\n",(0,r.jsxs)(n.p,{children:["It will be necessary to write ",(0,r.jsx)(n.code,{children:"unsafe"})," Rust code to be able to achieve the value\nof interoperating between Cython and Rust. The ability to step outside the boundaries of safe Rust is what makes it possible to\nimplement many of the most fundamental features of the Rust language itself, just as C and C++ are used to implement\ntheir own standard libraries."]}),"\n",(0,r.jsxs)(n.p,{children:["Great care will be taken with the use of Rusts ",(0,r.jsx)(n.code,{children:"unsafe"})," facility - which just enables a small set of additional language features, thereby changing\nthe contract between the interface and caller, shifting some responsibility for guaranteeing correctness\nfrom the Rust compiler, and onto us. The goal is to realize the advantages of the ",(0,r.jsx)(n.code,{children:"unsafe"})," facility, whilst avoiding ",(0,r.jsx)(n.em,{children:"any"})," undefined behavior.\nThe definition for what the Rust language designers consider undefined behavior can be found in the ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/stable/reference/behavior-considered-undefined.html",children:"language reference"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"safety-policy",children:"Safety policy"}),"\n",(0,r.jsxs)(n.p,{children:["To maintain correctness, any use of ",(0,r.jsx)(n.code,{children:"unsafe"})," Rust must follow our policy:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If a function is ",(0,r.jsx)(n.code,{children:"unsafe"})," to call, there ",(0,r.jsx)(n.em,{children:"must"})," be a ",(0,r.jsx)(n.code,{children:"Safety"})," section in the documentation explaining why the function is ",(0,r.jsx)(n.code,{children:"unsafe"}),".\nand covering the invariants which the function expects the callers to uphold, and how to meet their obligations in that contract."]}),"\n",(0,r.jsxs)(n.li,{children:["Document why each function is ",(0,r.jsx)(n.code,{children:"unsafe"})," in its doc comment's Safety section, and cover all ",(0,r.jsx)(n.code,{children:"unsafe"})," blocks with unit tests."]}),"\n",(0,r.jsxs)(n.li,{children:["Always include a ",(0,r.jsx)(n.code,{children:"SAFETY:"})," comment explaining why the unsafe operation is valid:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"// SAFETY: Message bus is not meant to be passed between threads\n#[allow(unsafe_code)]\n\nunsafe impl Send for MessageBus {}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Crate-level lint"})," \u2013 every crate that exposes FFI symbols enables\n",(0,r.jsx)(n.code,{children:"#![deny(unsafe_op_in_unsafe_fn)]"}),". Even inside an ",(0,r.jsx)(n.code,{children:"unsafe fn"}),", each pointer dereference or\nother dangerous operation must be wrapped in its own ",(0,r.jsx)(n.code,{children:"unsafe { \u2026 }"})," block."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"CVec contract"})," \u2013 for raw vectors that cross the FFI boundary read the\n",(0,r.jsx)(n.a,{href:"/developer_guide/ffi",children:"FFI Memory Contract"}),". Foreign code becomes the owner of the allocation and ",(0,r.jsx)(n.strong,{children:"must"}),"\ncall the matching ",(0,r.jsx)(n.code,{children:"vec_drop_*"})," function exactly once."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"tooling-configuration",children:"Tooling configuration"}),"\n",(0,r.jsx)(n.p,{children:"The project uses several tools for code quality:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"rustfmt"}),": Automatic code formatting (see ",(0,r.jsx)(n.code,{children:"rustfmt.toml"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"clippy"}),": Linting and best practices (see ",(0,r.jsx)(n.code,{children:"clippy.toml"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"cbindgen"}),": C header generation for FFI."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/nomicon/",children:"The Rustonomicon"})," \u2013 The Dark Arts of Unsafe Rust."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/stable/reference/unsafety.html",children:"The Rust Reference \u2013 Unsafety"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.abubalay.com/blog/2020/08/22/safe-bindings-in-rust",children:"Safe Bindings in Rust \u2013 Russell Johnston"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.chromium.org/Home/chromium-security/memory-safety/rust-and-c-interoperability/",children:"Google \u2013 Rust and C interoperability"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},9087:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(6363);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);